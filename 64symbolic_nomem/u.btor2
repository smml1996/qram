; selfie.cs.uni-salzburg.at

; BTOR2 examples/symbolic/u.btor2 generated by ./beator
; with --linear-address-space
; with --heap-allowance 0
; with --stack-allowance 0
; with --MMURAM

; RISC-V code obtained from examples/symbolic/u.c and invoked as: examples/symbolic/u.c
; with --constant-propagation

1 sort bitvec 1 ; Boolean
2 sort bitvec 64 ; 64-bit machine word

4 sort bitvec 29 ; 29-bit linear address

6 sort bitvec 4 ; 4-bit physical address

; 112B total memory, 16B data, 8B heap (8B,0B), 88B stack (88B,0B)

10 zero 1
11 one 1

20 zero 2
21 one 2
22 constd 2 2
23 constd 2 3
24 constd 2 4
25 constd 2 5
26 constd 2 6
27 constd 2 7
28 constd 2 8

; start of data segment in 64-bit virtual memory
30 constd 2 69632 ; 0x11000
; end of data segment in 64-bit virtual memory
31 constd 2 69648 ; 0x11010

; start of heap segment in 64-bit virtual memory (initial program break)
32 constd 2 73728 ; 0x12000
; current end of heap segment in 64-bit virtual memory (current program break)
33 constd 2 73736 ; 0x12008

; allowed end of heap segment in 64-bit virtual memory (with 0B allowance)
34 constd 2 73736 ; 0x12008
; allowed start of stack segment in 64-bit virtual memory (with 0B allowance)
35 constd 2 4294967208 ; 0xFFFFFFA8

; start of data segment in 29-bit linear memory
40 constd 4 8704 ; 0x2200
; end of data segment in 29-bit linear memory
41 constd 4 8706 ; 0x2202

; start of heap segment in 29-bit linear memory (initial program break)
42 constd 4 9216 ; 0x2400
; current end of heap segment in 29-bit linear memory (current program break)
43 constd 4 9217 ; 0x2401

; allowed end of heap segment in 29-bit linear memory (with 0B allowance)
44 constd 4 9217 ; 0x2401
; allowed start of stack segment in 29-bit linear memory (with 0B allowance)
45 constd 4 536870901 ; 0x1FFFFFF5

; highest address in 32-bit virtual address space (4GB)

50 constd 2 4294967288 ; 0xFFFFFFF8

; kernel-mode flag

60 state 1 kernel-mode
61 init 1 60 10 kernel-mode ; initial value is false
62 not 1 60

; unsigned-extended inputs for byte-wise reading

71 sort bitvec 8 ; 1 byte
72 sort bitvec 16 ; 2 bytes
73 sort bitvec 24 ; 3 bytes
74 sort bitvec 32 ; 4 bytes
75 sort bitvec 40 ; 5 bytes
76 sort bitvec 48 ; 6 bytes
77 sort bitvec 56 ; 7 bytes

81 input 71 1-byte-input
82 input 72 2-byte-input
83 input 73 3-byte-input
84 input 74 4-byte-input
85 input 75 5-byte-input
86 input 76 6-byte-input
87 input 77 7-byte-input

91 uext 2 81 56 ; uext-1-byte-input
92 uext 2 82 48 ; uext-2-byte-input
93 uext 2 83 40 ; uext-3-byte-input
94 uext 2 84 32 ; uext-4-byte-input
95 uext 2 85 24 ; uext-5-byte-input
96 uext 2 86 16 ; uext-6-byte-input
97 uext 2 87 8 ; uext-7-byte-input
98 input 2 8-byte-input

; 32 64-bit general-purpose registers

; non-zero initial register values

101 constd 2 65952 ; 0x101A0 for ra
102 constd 2 4294967208 ; 0xFFFFFFA8 for sp
103 constd 2 69648 ; 0x11010 for gp
105 constd 2 1 ; 0x1 for t0
108 constd 2 4294967216 ; 0xFFFFFFB0 for s0
111 constd 2 73728 ; 0x12000 for a1
112 constd 2 1 ; 0x1 for a2
116 constd 2 105553172692992 ; 0x6000035D0000 for a6
117 constd 2 63 ; 0x3F for a7

; registers

200 zero 2 zero ; register $0 is always 0
201 state 2 ra ; register $1
202 state 2 sp ; register $2
203 state 2 gp ; register $3
204 state 2 tp ; register $4
205 state 2 t0 ; register $5
206 state 2 t1 ; register $6
207 state 2 t2 ; register $7
208 state 2 s0 ; register $8
209 state 2 s1 ; register $9
210 state 2 a0 ; register $10
211 state 2 a1 ; register $11
212 state 2 a2 ; register $12
213 state 2 a3 ; register $13
214 state 2 a4 ; register $14
215 state 2 a5 ; register $15
216 state 2 a6 ; register $16
217 state 2 a7 ; register $17
218 state 2 s2 ; register $18
219 state 2 s3 ; register $19
220 state 2 s4 ; register $20
221 state 2 s5 ; register $21
222 state 2 s6 ; register $22
223 state 2 s7 ; register $23
224 state 2 s8 ; register $24
225 state 2 s9 ; register $25
226 state 2 s10 ; register $26
227 state 2 s11 ; register $27
228 state 2 t3 ; register $28
229 state 2 t4 ; register $29
230 state 2 t5 ; register $30
231 state 2 t6 ; register $31

; initializing registers

301 init 2 201 101 ra ; initial value is 65952
302 init 2 202 102 sp ; initial value is 4294967208
303 init 2 203 103 gp ; initial value is 69648
304 init 2 204 20 tp ; initial value is 0
305 init 2 205 105 t0 ; initial value is 1
306 init 2 206 20 t1 ; initial value is 0
307 init 2 207 20 t2 ; initial value is 0
308 init 2 208 108 s0 ; initial value is 4294967216
309 init 2 209 20 s1 ; initial value is 0
310 init 2 210 20 a0 ; initial value is 0
311 init 2 211 111 a1 ; initial value is 73728
312 init 2 212 112 a2 ; initial value is 1
313 init 2 213 20 a3 ; initial value is 0
314 init 2 214 20 a4 ; initial value is 0
315 init 2 215 20 a5 ; initial value is 0
316 init 2 216 116 a6 ; initial value is 105553172692992
317 init 2 217 117 a7 ; initial value is 63
318 init 2 218 20 s2 ; initial value is 0
319 init 2 219 20 s3 ; initial value is 0
320 init 2 220 20 s4 ; initial value is 0
321 init 2 221 20 s5 ; initial value is 0
322 init 2 222 20 s6 ; initial value is 0
323 init 2 223 20 s7 ; initial value is 0
324 init 2 224 20 s8 ; initial value is 0
325 init 2 225 20 s9 ; initial value is 0
326 init 2 226 20 s10 ; initial value is 0
327 init 2 227 20 s11 ; initial value is 0
328 init 2 228 20 t3 ; initial value is 0
329 init 2 229 20 t4 ; initial value is 0
330 init 2 230 20 t5 ; initial value is 0
331 init 2 231 20 t6 ; initial value is 0

; 64-bit program counter encoded in Boolean flags

; 16553600 unreachable state at 10000
; 16554000 unreachable state at 10004
; 16554400 unreachable state at 10008
; 16554800 unreachable state at 1000C
; 16555200 unreachable state at 10010
; 16555600 unreachable state at 10014
; 16556000 unreachable state at 10018
; 16556400 unreachable state at 1001C
; 16556800 unreachable state at 10020
; 16557200 unreachable state at 10024
; 16557600 unreachable state at 10028
; 16558000 unreachable state at 1002C
; 16558400 unreachable state at 10030
; 16558800 unreachable state at 10034
; 16559200 unreachable state at 10038
; 16559600 unreachable state at 1003C
; 16560000 unreachable state at 10040
; 16560400 unreachable state at 10044
; 16560800 unreachable state at 10048
; 16561200 unreachable state at 1004C
16561600 state 1 pc=0x10050
16561601 init 1 16561600 10
16562000 state 1 pc=0x10054
16562001 init 1 16562000 10
16562400 state 1 pc=0x10058
16562401 init 1 16562400 10
16562800 state 1 pc=0x1005C
16562801 init 1 16562800 10
16563200 state 1 pc=0x10060
16563201 init 1 16563200 10
16563600 state 1 pc=0x10064
16563601 init 1 16563600 10
; 16564000 unreachable state at 10068
; 16564400 unreachable state at 1006C
; 16564800 unreachable state at 10070
; 16565200 unreachable state at 10074
; 16565600 unreachable state at 10078
; 16566000 unreachable state at 1007C
; 16566400 unreachable state at 10080
16566800 state 1 pc=0x10084
16566801 init 1 16566800 11 ; initial program counter
16567200 state 1 pc=0x10088
16567201 init 1 16567200 10
; 16567600 unreachable state at 1008C
; 16568000 unreachable state at 10090
; 16568400 unreachable state at 10094
; 16568800 unreachable state at 10098
; 16569200 unreachable state at 1009C
; 16569600 unreachable state at 100A0
; 16570000 unreachable state at 100A4
; 16570400 unreachable state at 100A8
; 16570800 unreachable state at 100AC
; 16571200 unreachable state at 100B0
; 16571600 unreachable state at 100B4
; 16572000 unreachable state at 100B8
; 16572400 unreachable state at 100BC
; 16572800 unreachable state at 100C0
; 16573200 unreachable state at 100C4
; 16573600 unreachable state at 100C8
; 16574000 unreachable state at 100CC
; 16574400 unreachable state at 100D0
; 16574800 unreachable state at 100D4
; 16575200 unreachable state at 100D8
; 16575600 unreachable state at 100DC
; 16576000 unreachable state at 100E0
; 16576400 unreachable state at 100E4
; 16576800 unreachable state at 100E8
; 16577200 unreachable state at 100EC
; 16577600 unreachable state at 100F0
; 16578000 unreachable state at 100F4
; 16578400 unreachable state at 100F8
; 16578800 unreachable state at 100FC
; 16579200 unreachable state at 10100
; 16579600 unreachable state at 10104
; 16580000 unreachable state at 10108
; 16580400 unreachable state at 1010C
; 16580800 unreachable state at 10110
; 16581200 unreachable state at 10114
; 16581600 unreachable state at 10118
; 16582000 unreachable state at 1011C
; 16582400 unreachable state at 10120
; 16582800 unreachable state at 10124
; 16583200 unreachable state at 10128
; 16583600 unreachable state at 1012C
; 16584000 unreachable state at 10130
; 16584400 unreachable state at 10134
; 16584800 unreachable state at 10138
; 16585200 unreachable state at 1013C
; 16585600 unreachable state at 10140
; 16586000 unreachable state at 10144
; 16586400 unreachable state at 10148
; 16586800 unreachable state at 1014C
; 16587200 unreachable state at 10150
; 16587600 unreachable state at 10154
; 16588000 unreachable state at 10158
; 16588400 unreachable state at 1015C
; 16588800 unreachable state at 10160
; 16589200 unreachable state at 10164
; 16589600 unreachable state at 10168
; 16590000 unreachable state at 1016C
; 16590400 unreachable state at 10170
; 16590800 unreachable state at 10174
; 16591200 unreachable state at 10178
; 16591600 unreachable state at 1017C
; 16592000 unreachable state at 10180
; 16592400 unreachable state at 10184
; 16592800 unreachable state at 10188
; 16593200 unreachable state at 1018C
; 16593600 unreachable state at 10190
; 16594000 unreachable state at 10194
; 16594400 unreachable state at 10198
; 16594800 unreachable state at 1019C
16595200 state 1 pc=0x101A0
16595201 init 1 16595200 10
16595600 state 1 pc=0x101A4
16595601 init 1 16595600 10
16596000 state 1 pc=0x101A8
16596001 init 1 16596000 10
16596400 state 1 pc=0x101AC
16596401 init 1 16596400 10
16596800 state 1 pc=0x101B0
16596801 init 1 16596800 10
16597200 state 1 pc=0x101B4
16597201 init 1 16597200 10
16597600 state 1 pc=0x101B8
16597601 init 1 16597600 10
16598000 state 1 pc=0x101BC
16598001 init 1 16598000 10
16598400 state 1 pc=0x101C0
16598401 init 1 16598400 10
16598800 state 1 pc=0x101C4
16598801 init 1 16598800 10
16599200 state 1 pc=0x101C8
16599201 init 1 16599200 10
16599600 state 1 pc=0x101CC
16599601 init 1 16599600 10
16600000 state 1 pc=0x101D0
16600001 init 1 16600000 10
16600400 state 1 pc=0x101D4
16600401 init 1 16600400 10
16600800 state 1 pc=0x101D8
16600801 init 1 16600800 10
16601200 state 1 pc=0x101DC
16601201 init 1 16601200 10
16601600 state 1 pc=0x101E0
16601601 init 1 16601600 10
; 16602000 unreachable state at 101E4

; 4-bit physical memory

; data segment

20000000 constd 4 8704 ; 0x2200 laddr, 0x11000 vaddr
20000001 constd 2 73728 ; 0x12000 word
20000002 state 2 RAM-word-0
20000003 init 2 20000002 20000001
20000100 constd 4 8705 ; 0x2201 laddr, 0x11008 vaddr
20000101 constd 2 73736 ; 0x12008 word
20000102 state 2 RAM-word-1
20000103 init 2 20000102 20000101

; heap segment

20000200 constd 4 9216 ; 0x2400 laddr, 0x12000 vaddr
20000202 state 2 RAM-word-2
20000203 init 2 20000202 20

; stack segment

20000300 constd 4 536870901 ; 0x1FFFFFF5 laddr, 0xFFFFFFA8 vaddr
20000302 state 2 RAM-word-3
20000303 init 2 20000302 20
20000400 constd 4 536870902 ; 0x1FFFFFF6 laddr, 0xFFFFFFB0 vaddr
20000402 state 2 RAM-word-4
20000403 init 2 20000402 20
20000500 constd 4 536870903 ; 0x1FFFFFF7 laddr, 0xFFFFFFB8 vaddr
20000501 constd 2 65616 ; 0x10050 word
20000502 state 2 RAM-word-5
20000503 init 2 20000502 20000501
20000600 constd 4 536870904 ; 0x1FFFFFF8 laddr, 0xFFFFFFC0 vaddr
20000601 constd 2 1 ; 0x1 word
20000602 state 2 RAM-word-6
20000603 init 2 20000602 20000601
20000700 constd 4 536870905 ; 0x1FFFFFF9 laddr, 0xFFFFFFC8 vaddr
20000701 constd 2 4294967248 ; 0xFFFFFFD0 word
20000702 state 2 RAM-word-7
20000703 init 2 20000702 20000701
20000800 constd 4 536870906 ; 0x1FFFFFFA laddr, 0xFFFFFFD0 vaddr
20000801 constd 2 4294967272 ; 0xFFFFFFE8 word
20000802 state 2 RAM-word-8
20000803 init 2 20000802 20000801
20000900 constd 4 536870907 ; 0x1FFFFFFB laddr, 0xFFFFFFD8 vaddr
20000902 state 2 RAM-word-9
20000903 init 2 20000902 20
20001000 constd 4 536870908 ; 0x1FFFFFFC laddr, 0xFFFFFFE0 vaddr
20001002 state 2 RAM-word-10
20001003 init 2 20001002 20
20001100 constd 4 536870909 ; 0x1FFFFFFD laddr, 0xFFFFFFE8 vaddr
20001101 constd 2 8315171517136730213 ; 0x73656C706D617865 word
20001102 state 2 RAM-word-11
20001103 init 2 20001102 20001101
20001200 constd 4 536870910 ; 0x1FFFFFFE laddr, 0xFFFFFFF0 vaddr
20001201 constd 2 7596569140001338159 ; 0x696C6F626D79732F word
20001202 state 2 RAM-word-12
20001203 init 2 20001202 20001201
20001300 constd 4 536870911 ; 0x1FFFFFFF laddr, 0xFFFFFFF8 vaddr
20001301 constd 2 12666799933173603 ; 0x2D00632E752F63 word
20001302 state 2 RAM-word-13
20001303 init 2 20001302 20001301

; data flow

36561200 constd 2 65616 ; 0x10050
36561600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36561601 add 2 202 36561600
36561602 ite 2 16561600 36561601 202 ; 0x10050(~1): addi sp,sp,-8
36562000 slice 4 202 31 3
36562001 ite 2 16562000 202 30 ; for checking address validity
36562002 eq 1 36562000 20000000
36562003 ite 2 36562002 210 20000002
36562004 ite 2 16562000 36562003 20000002
36562005 eq 1 36562000 20000100
36562006 ite 2 36562005 210 20000102
36562007 ite 2 16562000 36562006 20000102
36562008 eq 1 36562000 20000200
36562009 ite 2 36562008 210 20000202
36562010 ite 2 16562000 36562009 20000202
36562011 eq 1 36562000 20000300
36562012 ite 2 36562011 210 20000302
36562013 ite 2 16562000 36562012 20000302
36562014 eq 1 36562000 20000400
36562015 ite 2 36562014 210 20000402
36562016 ite 2 16562000 36562015 20000402
36562017 eq 1 36562000 20000500
36562018 ite 2 36562017 210 20000502
36562019 ite 2 16562000 36562018 20000502
36562020 eq 1 36562000 20000600
36562021 ite 2 36562020 210 20000602
36562022 ite 2 16562000 36562021 20000602
36562023 eq 1 36562000 20000700
36562024 ite 2 36562023 210 20000702
36562025 ite 2 16562000 36562024 20000702
36562026 eq 1 36562000 20000800
36562027 ite 2 36562026 210 20000802
36562028 ite 2 16562000 36562027 20000802
36562029 eq 1 36562000 20000900
36562030 ite 2 36562029 210 20000902
36562031 ite 2 16562000 36562030 20000902
36562032 eq 1 36562000 20001000
36562033 ite 2 36562032 210 20001002
36562034 ite 2 16562000 36562033 20001002
36562035 eq 1 36562000 20001100
36562036 ite 2 36562035 210 20001102
36562037 ite 2 16562000 36562036 20001102
36562038 eq 1 36562000 20001200
36562039 ite 2 36562038 210 20001202
36562040 ite 2 16562000 36562039 20001202
36562041 eq 1 36562000 20001300
36562042 ite 2 36562041 210 20001302
36562043 ite 2 16562000 36562042 20001302 ; 0x10054(~1): sd a0,0(sp)
36562400 slice 4 202 31 3
36562401 ite 2 16562400 202 36562001 ; for checking address validity
36562402 eq 1 36562400 20000000
36562403 ite 2 36562402 20000002 20
36562404 eq 1 36562400 20000100
36562405 ite 2 36562404 20000102 36562403
36562406 eq 1 36562400 20000200
36562407 ite 2 36562406 20000202 36562405
36562408 eq 1 36562400 20000300
36562409 ite 2 36562408 20000302 36562407
36562410 eq 1 36562400 20000400
36562411 ite 2 36562410 20000402 36562409
36562412 eq 1 36562400 20000500
36562413 ite 2 36562412 20000502 36562411
36562414 eq 1 36562400 20000600
36562415 ite 2 36562414 20000602 36562413
36562416 eq 1 36562400 20000700
36562417 ite 2 36562416 20000702 36562415
36562418 eq 1 36562400 20000800
36562419 ite 2 36562418 20000802 36562417
36562420 eq 1 36562400 20000900
36562421 ite 2 36562420 20000902 36562419
36562422 eq 1 36562400 20001000
36562423 ite 2 36562422 20001002 36562421
36562424 eq 1 36562400 20001100
36562425 ite 2 36562424 20001102 36562423
36562426 eq 1 36562400 20001200
36562427 ite 2 36562426 20001202 36562425
36562428 eq 1 36562400 20001300
36562429 ite 2 36562428 20001302 36562427
36562430 ite 2 16562400 36562429 210 ; 0x10058(~1): ld a0,0(sp)
36562800 constd 2 8 ; 0x8
36562801 add 2 202 36562800
36562802 ite 2 16562800 36562801 36561602 ; 0x1005C(~1): addi sp,sp,8
36563200 constd 2 93 ; 0x5D
36563201 ite 2 16563200 36563200 217 ; 0x10060(~1): addi a7,zero,93
36563600 ite 1 16563600 11 10 ; 0x10064(~1): ecall
36566800 ite 1 16566800 11 36563600 ; 0x10084(~1): ecall
36589200 constd 2 65896 ; 0x10168
36594800 constd 2 65952 ; 0x101A0
36595200 ite 2 16595200 200 36562430 ; 0x101A0(~8): addi a0,zero,0
36595600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36595601 add 2 203 36595600
36595602 slice 4 36595601 31 3
36595603 ite 2 16595600 36595601 36562401 ; for checking address validity
36595604 eq 1 36595602 20000000
36595605 ite 2 36595604 20000002 20
36595606 eq 1 36595602 20000100
36595607 ite 2 36595606 20000102 36595605
36595608 eq 1 36595602 20000200
36595609 ite 2 36595608 20000202 36595607
36595610 eq 1 36595602 20000300
36595611 ite 2 36595610 20000302 36595609
36595612 eq 1 36595602 20000400
36595613 ite 2 36595612 20000402 36595611
36595614 eq 1 36595602 20000500
36595615 ite 2 36595614 20000502 36595613
36595616 eq 1 36595602 20000600
36595617 ite 2 36595616 20000602 36595615
36595618 eq 1 36595602 20000700
36595619 ite 2 36595618 20000702 36595617
36595620 eq 1 36595602 20000800
36595621 ite 2 36595620 20000802 36595619
36595622 eq 1 36595602 20000900
36595623 ite 2 36595622 20000902 36595621
36595624 eq 1 36595602 20001000
36595625 ite 2 36595624 20001002 36595623
36595626 eq 1 36595602 20001100
36595627 ite 2 36595626 20001102 36595625
36595628 eq 1 36595602 20001200
36595629 ite 2 36595628 20001202 36595627
36595630 eq 1 36595602 20001300
36595631 ite 2 36595630 20001302 36595629
36595632 ite 2 16595600 36595631 205 ; 0x101A4(~9): ld t0,-16(gp)
36596000 slice 4 205 31 3
36596001 ite 2 16596000 205 36595603 ; for checking address validity
36596002 eq 1 36596000 20000000
36596003 ite 2 36596002 20000002 20
36596004 eq 1 36596000 20000100
36596005 ite 2 36596004 20000102 36596003
36596006 eq 1 36596000 20000200
36596007 ite 2 36596006 20000202 36596005
36596008 eq 1 36596000 20000300
36596009 ite 2 36596008 20000302 36596007
36596010 eq 1 36596000 20000400
36596011 ite 2 36596010 20000402 36596009
36596012 eq 1 36596000 20000500
36596013 ite 2 36596012 20000502 36596011
36596014 eq 1 36596000 20000600
36596015 ite 2 36596014 20000602 36596013
36596016 eq 1 36596000 20000700
36596017 ite 2 36596016 20000702 36596015
36596018 eq 1 36596000 20000800
36596019 ite 2 36596018 20000802 36596017
36596020 eq 1 36596000 20000900
36596021 ite 2 36596020 20000902 36596019
36596022 eq 1 36596000 20001000
36596023 ite 2 36596022 20001002 36596021
36596024 eq 1 36596000 20001100
36596025 ite 2 36596024 20001102 36596023
36596026 eq 1 36596000 20001200
36596027 ite 2 36596026 20001202 36596025
36596028 eq 1 36596000 20001300
36596029 ite 2 36596028 20001302 36596027
36596030 ite 2 16596000 36596029 36595632 ; 0x101A8(~9): ld t0,0(t0)
36596400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36596401 add 2 208 36596400
36596402 slice 4 36596401 31 3
36596403 ite 2 16596400 36596401 36596001 ; for checking address validity
36596404 eq 1 36596402 20000000
36596405 ite 2 36596404 205 36562004
36596406 ite 2 16596400 36596405 36562004
36596407 eq 1 36596402 20000100
36596408 ite 2 36596407 205 36562007
36596409 ite 2 16596400 36596408 36562007
36596410 eq 1 36596402 20000200
36596411 ite 2 36596410 205 36562010
36596412 ite 2 16596400 36596411 36562010
36596413 eq 1 36596402 20000300
36596414 ite 2 36596413 205 36562013
36596415 ite 2 16596400 36596414 36562013
36596416 eq 1 36596402 20000400
36596417 ite 2 36596416 205 36562016
36596418 ite 2 16596400 36596417 36562016
36596419 eq 1 36596402 20000500
36596420 ite 2 36596419 205 36562019
36596421 ite 2 16596400 36596420 36562019
36596422 eq 1 36596402 20000600
36596423 ite 2 36596422 205 36562022
36596424 ite 2 16596400 36596423 36562022
36596425 eq 1 36596402 20000700
36596426 ite 2 36596425 205 36562025
36596427 ite 2 16596400 36596426 36562025
36596428 eq 1 36596402 20000800
36596429 ite 2 36596428 205 36562028
36596430 ite 2 16596400 36596429 36562028
36596431 eq 1 36596402 20000900
36596432 ite 2 36596431 205 36562031
36596433 ite 2 16596400 36596432 36562031
36596434 eq 1 36596402 20001000
36596435 ite 2 36596434 205 36562034
36596436 ite 2 16596400 36596435 36562034
36596437 eq 1 36596402 20001100
36596438 ite 2 36596437 205 36562037
36596439 ite 2 16596400 36596438 36562037
36596440 eq 1 36596402 20001200
36596441 ite 2 36596440 205 36562040
36596442 ite 2 16596400 36596441 36562040
36596443 eq 1 36596402 20001300
36596444 ite 2 36596443 205 36562043
36596445 ite 2 16596400 36596444 36562043 ; 0x101AC(~9): sd t0,-8(s0)
36596800 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36596801 add 2 203 36596800
36596802 slice 4 36596801 31 3
36596803 ite 2 16596800 36596801 36596403 ; for checking address validity
36596804 eq 1 36596802 20000000
36596805 ite 2 36596804 20000002 20
36596806 eq 1 36596802 20000100
36596807 ite 2 36596806 20000102 36596805
36596808 eq 1 36596802 20000200
36596809 ite 2 36596808 20000202 36596807
36596810 eq 1 36596802 20000300
36596811 ite 2 36596810 20000302 36596809
36596812 eq 1 36596802 20000400
36596813 ite 2 36596812 20000402 36596811
36596814 eq 1 36596802 20000500
36596815 ite 2 36596814 20000502 36596813
36596816 eq 1 36596802 20000600
36596817 ite 2 36596816 20000602 36596815
36596818 eq 1 36596802 20000700
36596819 ite 2 36596818 20000702 36596817
36596820 eq 1 36596802 20000800
36596821 ite 2 36596820 20000802 36596819
36596822 eq 1 36596802 20000900
36596823 ite 2 36596822 20000902 36596821
36596824 eq 1 36596802 20001000
36596825 ite 2 36596824 20001002 36596823
36596826 eq 1 36596802 20001100
36596827 ite 2 36596826 20001102 36596825
36596828 eq 1 36596802 20001200
36596829 ite 2 36596828 20001202 36596827
36596830 eq 1 36596802 20001300
36596831 ite 2 36596830 20001302 36596829
36596832 ite 2 16596800 36596831 36596030 ; 0x101B0(~10): ld t0,-16(gp)
36597200 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36597201 add 2 208 36597200
36597202 slice 4 36597201 31 3
36597203 ite 2 16597200 36597201 36596803 ; for checking address validity
36597204 eq 1 36597202 20000000
36597205 ite 2 36597204 20000002 20
36597206 eq 1 36597202 20000100
36597207 ite 2 36597206 20000102 36597205
36597208 eq 1 36597202 20000200
36597209 ite 2 36597208 20000202 36597207
36597210 eq 1 36597202 20000300
36597211 ite 2 36597210 20000302 36597209
36597212 eq 1 36597202 20000400
36597213 ite 2 36597212 20000402 36597211
36597214 eq 1 36597202 20000500
36597215 ite 2 36597214 20000502 36597213
36597216 eq 1 36597202 20000600
36597217 ite 2 36597216 20000602 36597215
36597218 eq 1 36597202 20000700
36597219 ite 2 36597218 20000702 36597217
36597220 eq 1 36597202 20000800
36597221 ite 2 36597220 20000802 36597219
36597222 eq 1 36597202 20000900
36597223 ite 2 36597222 20000902 36597221
36597224 eq 1 36597202 20001000
36597225 ite 2 36597224 20001002 36597223
36597226 eq 1 36597202 20001100
36597227 ite 2 36597226 20001102 36597225
36597228 eq 1 36597202 20001200
36597229 ite 2 36597228 20001202 36597227
36597230 eq 1 36597202 20001300
36597231 ite 2 36597230 20001302 36597229
36597232 ite 2 16597200 36597231 206 ; 0x101B4(~10): ld t1,-8(s0)
36597600 constd 2 8 ; 0x8
36597601 ite 2 16597600 36597600 207 ; 0x101B8(~10): addi t2,zero,8
36598000 mul 2 206 207
36598001 ite 2 16598000 36598000 36597232 ; 0x101BC(~10): mul t1,t1,t2
36598400 add 2 205 206
36598401 ite 2 16598400 36598400 36596832 ; 0x101C0(~10): add t0,t0,t1
36598800 slice 4 205 31 3
36598801 ite 2 16598800 205 36597203 ; for checking address validity
36598802 eq 1 36598800 20000000
36598803 ite 2 36598802 20000002 20
36598804 eq 1 36598800 20000100
36598805 ite 2 36598804 20000102 36598803
36598806 eq 1 36598800 20000200
36598807 ite 2 36598806 20000202 36598805
36598808 eq 1 36598800 20000300
36598809 ite 2 36598808 20000302 36598807
36598810 eq 1 36598800 20000400
36598811 ite 2 36598810 20000402 36598809
36598812 eq 1 36598800 20000500
36598813 ite 2 36598812 20000502 36598811
36598814 eq 1 36598800 20000600
36598815 ite 2 36598814 20000602 36598813
36598816 eq 1 36598800 20000700
36598817 ite 2 36598816 20000702 36598815
36598818 eq 1 36598800 20000800
36598819 ite 2 36598818 20000802 36598817
36598820 eq 1 36598800 20000900
36598821 ite 2 36598820 20000902 36598819
36598822 eq 1 36598800 20001000
36598823 ite 2 36598822 20001002 36598821
36598824 eq 1 36598800 20001100
36598825 ite 2 36598824 20001102 36598823
36598826 eq 1 36598800 20001200
36598827 ite 2 36598826 20001202 36598825
36598828 eq 1 36598800 20001300
36598829 ite 2 36598828 20001302 36598827
36598830 ite 2 16598800 36598829 36598401 ; 0x101C4(~10): ld t0,0(t0)
36599200 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36599201 add 2 208 36599200
36599202 slice 4 36599201 31 3
36599203 ite 2 16599200 36599201 36598801 ; for checking address validity
36599204 eq 1 36599202 20000000
36599205 ite 2 36599204 205 36596406
36599206 ite 2 16599200 36599205 36596406
36599207 eq 1 36599202 20000100
36599208 ite 2 36599207 205 36596409
36599209 ite 2 16599200 36599208 36596409
36599210 eq 1 36599202 20000200
36599211 ite 2 36599210 205 36596412
36599212 ite 2 16599200 36599211 36596412
36599213 eq 1 36599202 20000300
36599214 ite 2 36599213 205 36596415
36599215 ite 2 16599200 36599214 36596415
36599216 eq 1 36599202 20000400
36599217 ite 2 36599216 205 36596418
36599218 ite 2 16599200 36599217 36596418
36599219 eq 1 36599202 20000500
36599220 ite 2 36599219 205 36596421
36599221 ite 2 16599200 36599220 36596421
36599222 eq 1 36599202 20000600
36599223 ite 2 36599222 205 36596424
36599224 ite 2 16599200 36599223 36596424
36599225 eq 1 36599202 20000700
36599226 ite 2 36599225 205 36596427
36599227 ite 2 16599200 36599226 36596427
36599228 eq 1 36599202 20000800
36599229 ite 2 36599228 205 36596430
36599230 ite 2 16599200 36599229 36596430
36599231 eq 1 36599202 20000900
36599232 ite 2 36599231 205 36596433
36599233 ite 2 16599200 36599232 36596433
36599234 eq 1 36599202 20001000
36599235 ite 2 36599234 205 36596436
36599236 ite 2 16599200 36599235 36596436
36599237 eq 1 36599202 20001100
36599238 ite 2 36599237 205 36596439
36599239 ite 2 16599200 36599238 36596439
36599240 eq 1 36599202 20001200
36599241 ite 2 36599240 205 36596442
36599242 ite 2 16599200 36599241 36596442
36599243 eq 1 36599202 20001300
36599244 ite 2 36599243 205 36596445
36599245 ite 2 16599200 36599244 36596445 ; 0x101C8(~10): sd t0,-8(s0)
36599600 ite 2 16599600 208 36562802 ; 0x101CC(~11): addi sp,s0,0
36600000 slice 4 202 31 3
36600001 ite 2 16600000 202 36599203 ; for checking address validity
36600002 eq 1 36600000 20000000
36600003 ite 2 36600002 20000002 20
36600004 eq 1 36600000 20000100
36600005 ite 2 36600004 20000102 36600003
36600006 eq 1 36600000 20000200
36600007 ite 2 36600006 20000202 36600005
36600008 eq 1 36600000 20000300
36600009 ite 2 36600008 20000302 36600007
36600010 eq 1 36600000 20000400
36600011 ite 2 36600010 20000402 36600009
36600012 eq 1 36600000 20000500
36600013 ite 2 36600012 20000502 36600011
36600014 eq 1 36600000 20000600
36600015 ite 2 36600014 20000602 36600013
36600016 eq 1 36600000 20000700
36600017 ite 2 36600016 20000702 36600015
36600018 eq 1 36600000 20000800
36600019 ite 2 36600018 20000802 36600017
36600020 eq 1 36600000 20000900
36600021 ite 2 36600020 20000902 36600019
36600022 eq 1 36600000 20001000
36600023 ite 2 36600022 20001002 36600021
36600024 eq 1 36600000 20001100
36600025 ite 2 36600024 20001102 36600023
36600026 eq 1 36600000 20001200
36600027 ite 2 36600026 20001202 36600025
36600028 eq 1 36600000 20001300
36600029 ite 2 36600028 20001302 36600027
36600030 ite 2 16600000 36600029 208 ; 0x101D0(~11): ld s0,0(sp)
36600400 constd 2 8 ; 0x8
36600401 add 2 202 36600400
36600402 ite 2 16600400 36600401 36599600 ; 0x101D4(~11): addi sp,sp,8
36600800 slice 4 202 31 3
36600801 ite 2 16600800 202 36600001 ; for checking address validity
36600802 eq 1 36600800 20000000
36600803 ite 2 36600802 20000002 20
36600804 eq 1 36600800 20000100
36600805 ite 2 36600804 20000102 36600803
36600806 eq 1 36600800 20000200
36600807 ite 2 36600806 20000202 36600805
36600808 eq 1 36600800 20000300
36600809 ite 2 36600808 20000302 36600807
36600810 eq 1 36600800 20000400
36600811 ite 2 36600810 20000402 36600809
36600812 eq 1 36600800 20000500
36600813 ite 2 36600812 20000502 36600811
36600814 eq 1 36600800 20000600
36600815 ite 2 36600814 20000602 36600813
36600816 eq 1 36600800 20000700
36600817 ite 2 36600816 20000702 36600815
36600818 eq 1 36600800 20000800
36600819 ite 2 36600818 20000802 36600817
36600820 eq 1 36600800 20000900
36600821 ite 2 36600820 20000902 36600819
36600822 eq 1 36600800 20001000
36600823 ite 2 36600822 20001002 36600821
36600824 eq 1 36600800 20001100
36600825 ite 2 36600824 20001102 36600823
36600826 eq 1 36600800 20001200
36600827 ite 2 36600826 20001202 36600825
36600828 eq 1 36600800 20001300
36600829 ite 2 36600828 20001302 36600827
36600830 ite 2 16600800 36600829 201 ; 0x101D8(~11): ld ra,0(sp)
36601200 constd 2 8 ; 0x8
36601201 add 2 202 36601200
36601202 ite 2 16601200 36601201 36600402 ; 0x101DC(~11): addi sp,sp,8

; syscalls

40000000 constd 2 93 ; SYSCALL_EXIT
40000001 constd 2 63 ; SYSCALL_READ
40000002 constd 2 64 ; SYSCALL_WRITE
40000003 constd 2 56 ; SYSCALL_OPENAT
40000004 constd 2 214 ; SYSCALL_BRK

40000010 eq 1 217 40000000 ; $a7 == SYSCALL_EXIT
40000011 eq 1 217 40000001 ; $a7 == SYSCALL_READ
40000012 eq 1 217 40000002 ; $a7 == SYSCALL_WRITE
40000013 eq 1 217 40000003 ; $a7 == SYSCALL_OPENAT
40000014 eq 1 217 40000004 ; $a7 == SYSCALL_BRK

41000000 and 1 36566800 40000010 ; exit ecall is active
41000001 ite 1 60 40000010 41000000 ; stay in kernel mode indefinitely if exit ecall is active

42000000 and 1 36566800 40000011 ; read ecall is active
42000001 ite 2 42000000 211 36600801 ; $a1 is start address of buffer for checking address validity
42000002 ite 1 42000000 11 41000001 ; go into kernel mode if read ecall is active
42000003 ite 2 42000000 20 36595200 ; set $a0 = 0 bytes if read ecall is active
42000004 sub 2 212 210 ; $a2 - $a0
42000005 ugte 1 42000004 28 ; $a2 - $a0 >= 8 bytes
42000006 ite 2 42000005 28 42000004 ; read 8 bytes if $a2 - $a0 >= 8 bytes, or else $a2 - $a0 bytes
42000007 eq 1 42000006 22 ; increment == 2
42000008 ite 2 42000007 92 91 ; unsigned-extended 2-byte input if increment == 2, or else unsigned-extended 1-byte input
42000009 eq 1 42000006 23 ; increment == 3
42000010 ite 2 42000009 93 42000008 ; unsigned-extended 3-byte input if increment == 3
42000011 eq 1 42000006 24 ; increment == 4
42000012 ite 2 42000011 94 42000010 ; unsigned-extended 4-byte input if increment == 4
42000013 eq 1 42000006 25 ; increment == 5
42000014 ite 2 42000013 95 42000012 ; unsigned-extended 5-byte input if increment == 5
42000015 eq 1 42000006 26 ; increment == 6
42000016 ite 2 42000015 96 42000014 ; unsigned-extended 6-byte input if increment == 6
42000017 eq 1 42000006 27 ; increment == 7
42000018 ite 2 42000017 97 42000016 ; unsigned-extended 7-byte input if increment == 7
42000019 eq 1 42000006 28 ; increment == 8
42000020 ite 2 42000019 98 42000018 ; 8-byte input if increment == 8
42000021 add 2 211 210 ; $a1 + $a0
42000022 slice 4 42000021 31 3
42000023 ult 1 210 212 ; $a0 < $a2
42000024 and 1 40000011 42000023 ; $a7 == SYSCALL_READ and $a0 < $a2
42000025 and 1 60 42000024 ; read ecall is in kernel mode and not done yet
42000026 ugt 1 42000006 20 ; increment > 0
42000027 and 1 42000025 42000026 ; read ecall is in kernel mode and not done yet and increment > 0
42000028 eq 1 42000022 20000000
42000029 ite 2 42000028 42000020 36599206
42000030 ite 2 42000027 42000029 36599206 ; read input into RAM[$a1 + $a0]
42000031 eq 1 42000022 20000100
42000032 ite 2 42000031 42000020 36599209
42000033 ite 2 42000027 42000032 36599209 ; read input into RAM[$a1 + $a0]
42000034 eq 1 42000022 20000200
42000035 ite 2 42000034 42000020 36599212
42000036 ite 2 42000027 42000035 36599212 ; read input into RAM[$a1 + $a0]
42000037 eq 1 42000022 20000300
42000038 ite 2 42000037 42000020 36599215
42000039 ite 2 42000027 42000038 36599215 ; read input into RAM[$a1 + $a0]
42000040 eq 1 42000022 20000400
42000041 ite 2 42000040 42000020 36599218
42000042 ite 2 42000027 42000041 36599218 ; read input into RAM[$a1 + $a0]
42000043 eq 1 42000022 20000500
42000044 ite 2 42000043 42000020 36599221
42000045 ite 2 42000027 42000044 36599221 ; read input into RAM[$a1 + $a0]
42000046 eq 1 42000022 20000600
42000047 ite 2 42000046 42000020 36599224
42000048 ite 2 42000027 42000047 36599224 ; read input into RAM[$a1 + $a0]
42000049 eq 1 42000022 20000700
42000050 ite 2 42000049 42000020 36599227
42000051 ite 2 42000027 42000050 36599227 ; read input into RAM[$a1 + $a0]
42000052 eq 1 42000022 20000800
42000053 ite 2 42000052 42000020 36599230
42000054 ite 2 42000027 42000053 36599230 ; read input into RAM[$a1 + $a0]
42000055 eq 1 42000022 20000900
42000056 ite 2 42000055 42000020 36599233
42000057 ite 2 42000027 42000056 36599233 ; read input into RAM[$a1 + $a0]
42000058 eq 1 42000022 20001000
42000059 ite 2 42000058 42000020 36599236
42000060 ite 2 42000027 42000059 36599236 ; read input into RAM[$a1 + $a0]
42000061 eq 1 42000022 20001100
42000062 ite 2 42000061 42000020 36599239
42000063 ite 2 42000027 42000062 36599239 ; read input into RAM[$a1 + $a0]
42000064 eq 1 42000022 20001200
42000065 ite 2 42000064 42000020 36599242
42000066 ite 2 42000027 42000065 36599242 ; read input into RAM[$a1 + $a0]
42000067 eq 1 42000022 20001300
42000068 ite 2 42000067 42000020 36599245
42000069 ite 2 42000027 42000068 36599245 ; read input into RAM[$a1 + $a0]
42000070 add 2 210 42000006 ; $a0 + increment
42000071 ite 2 42000025 42000070 42000003 ; set $a0 = $a0 + increment if read ecall is in kernel mode and not done yet
42000072 ite 1 42000025 11 42000002 ; stay in kernel mode if read ecall is in kernel mode and not done yet

43000000 and 1 36566800 40000012 ; write ecall is active
43000001 ite 2 43000000 211 42000001 ; $a1 is start address of buffer for checking address validity
43000002 ite 2 43000000 212 42000071 ; set $a0 = $a2 if write ecall is active

44000000 and 1 36566800 40000013 ; openat ecall is active
44000001 ite 2 44000000 211 43000001 ; $a1 is start address of buffer for checking address validity
44000002 state 2 fd-bump-pointer
44000003 init 2 44000002 21 ; initial fd-bump-pointer is 1 (file descriptor bump pointer)
44000004 inc 2 44000002
44000005 ite 2 44000000 44000004 44000002 ; fd-bump-pointer + 1 if openat ecall is active
44000006 next 2 44000002 44000005 ; increment fd-bump-pointer if openat ecall is active
44000007 ite 2 44000000 44000004 43000002 ; set $a0 = fd-bump-pointer + 1 if openat ecall is active

45000000 and 1 36566800 40000014 ; brk ecall is active
45000001 state 2 brk-bump-pointer
45000002 init 2 45000001 33 ; current program break
45000003 ulte 1 45000001 210 ; brk <= $a0
45000004 ult 1 210 202 ; $a0 < $sp
45000005 and 1 45000003 45000004 ; brk <= $a0 < $sp
45000006 and 2 210 27 ; reset all but 3 LSBs of $a0
45000007 eq 1 45000006 20 ; 3 LSBs of $a0 == 0 ($a0 is word-aligned)
45000008 and 1 45000005 45000007 ; brk <= $a0 < $sp and $a0 is word-aligned ($a0 is valid)
45000009 and 1 45000000 45000008 ; brk ecall is active and $a0 is valid
45000010 ite 2 45000009 210 45000001 ; brk = $a0 if brk ecall is active and $a0 is valid
45000011 next 2 45000001 45000010 ; set brk = $a0 if brk ecall is active and $a0 is valid
45000012 not 1 45000008 ; $a0 is invalid
45000013 and 1 45000000 45000012 ; brk ecall is active and $a0 is invalid
45000014 ite 2 45000013 45000001 44000007 ; set $a0 = brk if brk ecall is active and $a0 is invalid

46000000 next 1 60 42000072 ; updating kernel-mode flag

; control flow

56561600 not 2 21 ; jalr 66016[0x101E0](~11)
56561601 and 2 201 56561600
56561602 eq 1 56561601 36561200
56561603 and 1 16601600 56561602
56561604 next 1 16561600 56561603 ; ->65616[0x10050](~1)
; 65616[0x10050](~1)
56562000 next 1 16562000 16561600 ; ->65620[0x10054](~1)
; 65620[0x10054](~1)
56562400 next 1 16562400 16562000 ; ->65624[0x10058](~1)
; 65624[0x10058](~1)
56562800 next 1 16562800 16562400 ; ->65628[0x1005C](~1)
; 65628[0x1005C](~1)
56563200 next 1 16563200 16562800 ; ->65632[0x10060](~1)
; 65632[0x10060](~1)
56563600 next 1 16563600 16563200 ; ->65636[0x10064](~1)
56564000 state 1 kernel-mode-pc-flag-65636[0x10064](~1)
56564001 init 1 56564000 10 ; ecall is initially inactive
56564002 ite 1 56564000 60 16563600 ; activate ecall and keep active while in kernel mode
56564003 next 1 56564000 56564002 ; keep ecall active while in kernel mode
56564004 and 1 56564000 62 ; ecall is active but not in kernel mode anymore
56566800 next 1 16566800 10 ; ->65668[0x10084](~1)
56567200 state 1 kernel-mode-pc-flag-65668[0x10084](~1)
56567201 init 1 56567200 10 ; ecall is initially inactive
56567202 ite 1 56567200 60 16566800 ; activate ecall and keep active while in kernel mode
56567203 next 1 56567200 56567202 ; keep ecall active while in kernel mode
56567204 and 1 56567200 62 ; ecall is active but not in kernel mode anymore
56567205 next 1 16567200 56567204 ; ->65672[0x10088](~1)
56595200 not 2 21 ; jalr 65672[0x10088](~1)
56595201 and 2 201 56595200
56595202 eq 1 56595201 36594800
56595203 and 1 16567200 56595202
56595204 next 1 16595200 56595203 ; ->65952[0x101A0](~8)
; 65952[0x101A0](~8)
56595600 next 1 16595600 16595200 ; ->65956[0x101A4](~9)
; 65956[0x101A4](~9)
56596000 next 1 16596000 16595600 ; ->65960[0x101A8](~9)
; 65960[0x101A8](~9)
56596400 next 1 16596400 16596000 ; ->65964[0x101AC](~9)
; 65964[0x101AC](~9)
56596800 next 1 16596800 16596400 ; ->65968[0x101B0](~10)
; 65968[0x101B0](~10)
56597200 next 1 16597200 16596800 ; ->65972[0x101B4](~10)
; 65972[0x101B4](~10)
56597600 next 1 16597600 16597200 ; ->65976[0x101B8](~10)
; 65976[0x101B8](~10)
56598000 next 1 16598000 16597600 ; ->65980[0x101BC](~10)
; 65980[0x101BC](~10)
56598400 next 1 16598400 16598000 ; ->65984[0x101C0](~10)
; 65984[0x101C0](~10)
56598800 next 1 16598800 16598400 ; ->65988[0x101C4](~10)
; 65988[0x101C4](~10)
56599200 next 1 16599200 16598800 ; ->65992[0x101C8](~10)
; 65992[0x101C8](~10)
56599600 next 1 16599600 16599200 ; ->65996[0x101CC](~11)
; 65996[0x101CC](~11)
56600000 next 1 16600000 16599600 ; ->66000[0x101D0](~11)
; 66000[0x101D0](~11)
56600400 next 1 16600400 16600000 ; ->66004[0x101D4](~11)
; 66004[0x101D4](~11)
56600800 next 1 16600800 16600400 ; ->66008[0x101D8](~11)
; 66008[0x101D8](~11)
56601200 next 1 16601200 16600800 ; ->66012[0x101DC](~11)
; 66012[0x101DC](~11)
56601600 next 1 16601600 16601200 ; ->66016[0x101E0](~11)

; updating registers

60000001 next 2 201 36600830 ra ; register $1
60000002 next 2 202 36601202 sp ; register $2
60000003 next 2 203 203 gp ; register $3
60000004 next 2 204 204 tp ; register $4
60000005 next 2 205 36598830 t0 ; register $5
60000006 next 2 206 36598001 t1 ; register $6
60000007 next 2 207 36597601 t2 ; register $7
60000008 next 2 208 36600030 s0 ; register $8
60000009 next 2 209 209 s1 ; register $9
60000010 next 2 210 45000014 a0 ; register $10
60000011 next 2 211 211 a1 ; register $11
60000012 next 2 212 212 a2 ; register $12
60000013 next 2 213 213 a3 ; register $13
60000014 next 2 214 214 a4 ; register $14
60000015 next 2 215 215 a5 ; register $15
60000016 next 2 216 216 a6 ; register $16
60000017 next 2 217 36563201 a7 ; register $17
60000018 next 2 218 218 s2 ; register $18
60000019 next 2 219 219 s3 ; register $19
60000020 next 2 220 220 s4 ; register $20
60000021 next 2 221 221 s5 ; register $21
60000022 next 2 222 222 s6 ; register $22
60000023 next 2 223 223 s7 ; register $23
60000024 next 2 224 224 s8 ; register $24
60000025 next 2 225 225 s9 ; register $25
60000026 next 2 226 226 s10 ; register $26
60000027 next 2 227 227 s11 ; register $27
60000028 next 2 228 228 t3 ; register $28
60000029 next 2 229 229 t4 ; register $29
60000030 next 2 230 230 t5 ; register $30
60000031 next 2 231 231 t6 ; register $31

; updating 4-bit physical memory

70000000 next 2 20000002 42000030 RAM-word-0
70000001 next 2 20000102 42000033 RAM-word-1
70000002 next 2 20000202 42000036 RAM-word-2
70000003 next 2 20000302 42000039 RAM-word-3
70000004 next 2 20000402 42000042 RAM-word-4
70000005 next 2 20000502 42000045 RAM-word-5
70000006 next 2 20000602 42000048 RAM-word-6
70000007 next 2 20000702 42000051 RAM-word-7
70000008 next 2 20000802 42000054 RAM-word-8
70000009 next 2 20000902 42000057 RAM-word-9
70000010 next 2 20001002 42000060 RAM-word-10
70000011 next 2 20001102 42000063 RAM-word-11
70000012 next 2 20001202 42000066 RAM-word-12
70000013 next 2 20001302 42000069 RAM-word-13

; checking syscall id

80000000 not 1 40000010 ; $a7 != SYSCALL_EXIT
80000001 not 1 40000011 ; $a7 != SYSCALL_READ
80000002 not 1 40000012 ; $a7 != SYSCALL_WRITE
80000003 not 1 40000013 ; $a7 != SYSCALL_OPENAT
80000004 not 1 40000014 ; $a7 != SYSCALL_BRK
80000005 and 1 80000000 80000001 ; ... and $a7 != SYSCALL_READ
80000006 and 1 80000005 80000002 ; ... and $a7 != SYSCALL_WRITE
80000007 and 1 80000006 80000003 ; ... and $a7 != SYSCALL_OPENAT
80000008 and 1 80000007 80000004 ; ... and $a7 != SYSCALL_BRK

80000009 and 1 36566800 80000008 ; ecall is active for invalid syscall id
80000010 bad 80000009 b0 ; invalid syscall id

; checking exit code

80000011 neq 1 210 20 ; $a0 != zero exit code
80000012 and 1 41000000 80000011 ; exit ecall is active with non-zero exit code
80000013 bad 80000012 b1 ; non-zero exit code

; checking division and remainder by zero

80000014 eq 1 21 20
80000015 bad 80000014 b2 ; division by zero

80000016 eq 1 21 20
80000017 bad 80000016 b3 ; remainder by zero

; checking address validity

; is start address of memory access word-aligned?

80000018 and 2 44000001 27 ; reset all but 3 LSBs of address
80000019 neq 1 80000018 20 ; 3 LSBs of address != 0 (address is not word-aligned)
80000020 bad 80000019 b4 ; word-unaligned memory access

; checking segmentation faults

; is start address of memory access in a valid segment?

80000021 ult 1 44000001 30 ; address < start of data segment
80000022 bad 80000021 b5 ; memory access below data segment
80000023 ugte 1 44000001 31 ; address >= end of data segment
80000024 ult 1 44000001 32 ; address < start of heap segment
80000025 and 1 80000023 80000024
80000026 bad 80000025 b6 ; memory access in between data and heap segments
80000027 ugte 1 44000001 45000001 ; address >= current end of heap segment
80000028 ult 1 44000001 202 ; address < current start of stack segment
80000029 and 1 80000027 80000028
80000030 bad 80000029 b7 ; memory access in between current heap and stack segments
80000031 ugte 1 44000001 34 ; address >= allowed end of heap segment
80000032 ult 1 44000001 45000001 ; address < current end of heap segment
80000033 and 1 80000031 80000032
80000034 bad 80000033 b8 ; memory access in between allowed and current end of heap segment
80000035 ugte 1 44000001 202 ; address >= current start of stack segment
80000036 ult 1 44000001 35 ; address < allowed start of stack segment
80000037 and 1 80000035 80000036
80000038 bad 80000037 b9 ; memory access in between current and allowed start of stack segment
80000039 ugt 1 44000001 50 ; address > highest address in 32-bit virtual address space (4GB)
80000040 bad 80000039 b10 ; memory access above stack segment

; end of BTOR2 examples/symbolic/u.btor2
