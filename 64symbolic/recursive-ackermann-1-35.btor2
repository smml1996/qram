; selfie.cs.uni-salzburg.at

; BTOR2 examples/symbolic/recursive-ackermann-1-35.btor2 generated by ./beator
; with --linear-address-space
; with --heap-allowance 8
; with --stack-allowance 32

; RISC-V code obtained from examples/symbolic/recursive-ackermann-1-35.c and invoked as: examples/symbolic/recursive-ackermann-1-35.c
; with --constant-propagation

1 sort bitvec 1 ; Boolean
2 sort bitvec 64 ; 64-bit machine word

4 sort bitvec 29 ; 29-bit linear address
5 sort array 4 2 ; 29-bit physical memory

; 176B total memory, 8B data, 16B heap (8B,8B), 152B stack (120B,32B)

10 zero 1
11 one 1

20 zero 2
21 one 2
22 constd 2 2
23 constd 2 3
24 constd 2 4
25 constd 2 5
26 constd 2 6
27 constd 2 7
28 constd 2 8

; start of data segment in 64-bit virtual memory
30 constd 2 69632 ; 0x11000
; end of data segment in 64-bit virtual memory
31 constd 2 69640 ; 0x11008

; start of heap segment in 64-bit virtual memory (initial program break)
32 constd 2 73728 ; 0x12000
; current end of heap segment in 64-bit virtual memory (current program break)
33 constd 2 73736 ; 0x12008

; allowed end of heap segment in 64-bit virtual memory (with 8B allowance)
34 constd 2 73744 ; 0x12010
; allowed start of stack segment in 64-bit virtual memory (with 32B allowance)
35 constd 2 4294967144 ; 0xFFFFFF68

; start of data segment in 29-bit linear memory
40 constd 4 8704 ; 0x2200
; end of data segment in 29-bit linear memory
41 constd 4 8705 ; 0x2201

; start of heap segment in 29-bit linear memory (initial program break)
42 constd 4 9216 ; 0x2400
; current end of heap segment in 29-bit linear memory (current program break)
43 constd 4 9217 ; 0x2401

; allowed end of heap segment in 29-bit linear memory (with 8B allowance)
44 constd 4 9218 ; 0x2402
; allowed start of stack segment in 29-bit linear memory (with 32B allowance)
45 constd 4 536870893 ; 0x1FFFFFED

; highest address in 32-bit virtual address space (4GB)

50 constd 2 4294967288 ; 0xFFFFFFF8

; kernel-mode flag

60 state 1 kernel-mode
61 init 1 60 10 kernel-mode ; initial value is false
62 not 1 60

; unsigned-extended inputs for byte-wise reading

71 sort bitvec 8 ; 1 byte
72 sort bitvec 16 ; 2 bytes
73 sort bitvec 24 ; 3 bytes
74 sort bitvec 32 ; 4 bytes
75 sort bitvec 40 ; 5 bytes
76 sort bitvec 48 ; 6 bytes
77 sort bitvec 56 ; 7 bytes

81 input 71 1-byte-input
82 input 72 2-byte-input
83 input 73 3-byte-input
84 input 74 4-byte-input
85 input 75 5-byte-input
86 input 76 6-byte-input
87 input 77 7-byte-input

91 uext 2 81 56 ; uext-1-byte-input
92 uext 2 82 48 ; uext-2-byte-input
93 uext 2 83 40 ; uext-3-byte-input
94 uext 2 84 32 ; uext-4-byte-input
95 uext 2 85 24 ; uext-5-byte-input
96 uext 2 86 16 ; uext-6-byte-input
97 uext 2 87 8 ; uext-7-byte-input
98 input 2 8-byte-input

; 32 64-bit general-purpose registers

; non-zero initial register values

101 constd 2 66196 ; 0x10294 for ra
102 constd 2 4294967176 ; 0xFFFFFF88 for sp
103 constd 2 69640 ; 0x11008 for gp
105 constd 2 1 ; 0x1 for t0
108 constd 2 4294967192 ; 0xFFFFFF98 for s0
111 constd 2 73728 ; 0x12000 for a1
112 constd 2 1 ; 0x1 for a2
116 constd 2 105553163026432 ; 0x600002C98000 for a6
117 constd 2 63 ; 0x3F for a7

; registers

200 zero 2 zero ; register $0 is always 0
201 state 2 ra ; register $1
202 state 2 sp ; register $2
203 state 2 gp ; register $3
204 state 2 tp ; register $4
205 state 2 t0 ; register $5
206 state 2 t1 ; register $6
207 state 2 t2 ; register $7
208 state 2 s0 ; register $8
209 state 2 s1 ; register $9
210 state 2 a0 ; register $10
211 state 2 a1 ; register $11
212 state 2 a2 ; register $12
213 state 2 a3 ; register $13
214 state 2 a4 ; register $14
215 state 2 a5 ; register $15
216 state 2 a6 ; register $16
217 state 2 a7 ; register $17
218 state 2 s2 ; register $18
219 state 2 s3 ; register $19
220 state 2 s4 ; register $20
221 state 2 s5 ; register $21
222 state 2 s6 ; register $22
223 state 2 s7 ; register $23
224 state 2 s8 ; register $24
225 state 2 s9 ; register $25
226 state 2 s10 ; register $26
227 state 2 s11 ; register $27
228 state 2 t3 ; register $28
229 state 2 t4 ; register $29
230 state 2 t5 ; register $30
231 state 2 t6 ; register $31

; initializing registers

301 init 2 201 101 ra ; initial value is 66196
302 init 2 202 102 sp ; initial value is 4294967176
303 init 2 203 103 gp ; initial value is 69640
304 init 2 204 20 tp ; initial value is 0
305 init 2 205 105 t0 ; initial value is 1
306 init 2 206 20 t1 ; initial value is 0
307 init 2 207 20 t2 ; initial value is 0
308 init 2 208 108 s0 ; initial value is 4294967192
309 init 2 209 20 s1 ; initial value is 0
310 init 2 210 20 a0 ; initial value is 0
311 init 2 211 111 a1 ; initial value is 73728
312 init 2 212 112 a2 ; initial value is 1
313 init 2 213 20 a3 ; initial value is 0
314 init 2 214 20 a4 ; initial value is 0
315 init 2 215 20 a5 ; initial value is 0
316 init 2 216 116 a6 ; initial value is 105553163026432
317 init 2 217 117 a7 ; initial value is 63
318 init 2 218 20 s2 ; initial value is 0
319 init 2 219 20 s3 ; initial value is 0
320 init 2 220 20 s4 ; initial value is 0
321 init 2 221 20 s5 ; initial value is 0
322 init 2 222 20 s6 ; initial value is 0
323 init 2 223 20 s7 ; initial value is 0
324 init 2 224 20 s8 ; initial value is 0
325 init 2 225 20 s9 ; initial value is 0
326 init 2 226 20 s10 ; initial value is 0
327 init 2 227 20 s11 ; initial value is 0
328 init 2 228 20 t3 ; initial value is 0
329 init 2 229 20 t4 ; initial value is 0
330 init 2 230 20 t5 ; initial value is 0
331 init 2 231 20 t6 ; initial value is 0

; 64-bit program counter encoded in Boolean flags

; 16553600 unreachable state at 10000
; 16554000 unreachable state at 10004
; 16554400 unreachable state at 10008
; 16554800 unreachable state at 1000C
; 16555200 unreachable state at 10010
; 16555600 unreachable state at 10014
; 16556000 unreachable state at 10018
; 16556400 unreachable state at 1001C
; 16556800 unreachable state at 10020
; 16557200 unreachable state at 10024
; 16557600 unreachable state at 10028
; 16558000 unreachable state at 1002C
; 16558400 unreachable state at 10030
; 16558800 unreachable state at 10034
; 16559200 unreachable state at 10038
; 16559600 unreachable state at 1003C
; 16560000 unreachable state at 10040
; 16560400 unreachable state at 10044
; 16560800 unreachable state at 10048
; 16561200 unreachable state at 1004C
16561600 state 1 pc=0x10050
16561601 init 1 16561600 10
16562000 state 1 pc=0x10054
16562001 init 1 16562000 10
16562400 state 1 pc=0x10058
16562401 init 1 16562400 10
16562800 state 1 pc=0x1005C
16562801 init 1 16562800 10
16563200 state 1 pc=0x10060
16563201 init 1 16563200 10
16563600 state 1 pc=0x10064
16563601 init 1 16563600 10
; 16564000 unreachable state at 10068
; 16564400 unreachable state at 1006C
; 16564800 unreachable state at 10070
; 16565200 unreachable state at 10074
; 16565600 unreachable state at 10078
; 16566000 unreachable state at 1007C
; 16566400 unreachable state at 10080
16566800 state 1 pc=0x10084
16566801 init 1 16566800 11 ; initial program counter
16567200 state 1 pc=0x10088
16567201 init 1 16567200 10
; 16567600 unreachable state at 1008C
; 16568000 unreachable state at 10090
; 16568400 unreachable state at 10094
; 16568800 unreachable state at 10098
; 16569200 unreachable state at 1009C
; 16569600 unreachable state at 100A0
; 16570000 unreachable state at 100A4
; 16570400 unreachable state at 100A8
; 16570800 unreachable state at 100AC
; 16571200 unreachable state at 100B0
; 16571600 unreachable state at 100B4
; 16572000 unreachable state at 100B8
; 16572400 unreachable state at 100BC
; 16572800 unreachable state at 100C0
; 16573200 unreachable state at 100C4
; 16573600 unreachable state at 100C8
; 16574000 unreachable state at 100CC
; 16574400 unreachable state at 100D0
; 16574800 unreachable state at 100D4
; 16575200 unreachable state at 100D8
; 16575600 unreachable state at 100DC
; 16576000 unreachable state at 100E0
; 16576400 unreachable state at 100E4
; 16576800 unreachable state at 100E8
; 16577200 unreachable state at 100EC
; 16577600 unreachable state at 100F0
; 16578000 unreachable state at 100F4
; 16578400 unreachable state at 100F8
; 16578800 unreachable state at 100FC
; 16579200 unreachable state at 10100
; 16579600 unreachable state at 10104
; 16580000 unreachable state at 10108
; 16580400 unreachable state at 1010C
; 16580800 unreachable state at 10110
; 16581200 unreachable state at 10114
; 16581600 unreachable state at 10118
; 16582000 unreachable state at 1011C
; 16582400 unreachable state at 10120
; 16582800 unreachable state at 10124
; 16583200 unreachable state at 10128
; 16583600 unreachable state at 1012C
; 16584000 unreachable state at 10130
; 16584400 unreachable state at 10134
; 16584800 unreachable state at 10138
; 16585200 unreachable state at 1013C
16585600 state 1 pc=0x10140
16585601 init 1 16585600 10
16586000 state 1 pc=0x10144
16586001 init 1 16586000 10
16586400 state 1 pc=0x10148
16586401 init 1 16586400 10
16586800 state 1 pc=0x1014C
16586801 init 1 16586800 10
16587200 state 1 pc=0x10150
16587201 init 1 16587200 10
16587600 state 1 pc=0x10154
16587601 init 1 16587600 10
16588000 state 1 pc=0x10158
16588001 init 1 16588000 10
16588400 state 1 pc=0x1015C
16588401 init 1 16588400 10
16588800 state 1 pc=0x10160
16588801 init 1 16588800 10
16589200 state 1 pc=0x10164
16589201 init 1 16589200 10
16589600 state 1 pc=0x10168
16589601 init 1 16589600 10
16590000 state 1 pc=0x1016C
16590001 init 1 16590000 10
16590400 state 1 pc=0x10170
16590401 init 1 16590400 10
16590800 state 1 pc=0x10174
16590801 init 1 16590800 10
16591200 state 1 pc=0x10178
16591201 init 1 16591200 10
16591600 state 1 pc=0x1017C
16591601 init 1 16591600 10
16592000 state 1 pc=0x10180
16592001 init 1 16592000 10
16592400 state 1 pc=0x10184
16592401 init 1 16592400 10
16592800 state 1 pc=0x10188
16592801 init 1 16592800 10
16593200 state 1 pc=0x1018C
16593201 init 1 16593200 10
16593600 state 1 pc=0x10190
16593601 init 1 16593600 10
16594000 state 1 pc=0x10194
16594001 init 1 16594000 10
16594400 state 1 pc=0x10198
16594401 init 1 16594400 10
16594800 state 1 pc=0x1019C
16594801 init 1 16594800 10
16595200 state 1 pc=0x101A0
16595201 init 1 16595200 10
16595600 state 1 pc=0x101A4
16595601 init 1 16595600 10
16596000 state 1 pc=0x101A8
16596001 init 1 16596000 10
16596400 state 1 pc=0x101AC
16596401 init 1 16596400 10
16596800 state 1 pc=0x101B0
16596801 init 1 16596800 10
16597200 state 1 pc=0x101B4
16597201 init 1 16597200 10
16597600 state 1 pc=0x101B8
16597601 init 1 16597600 10
16598000 state 1 pc=0x101BC
16598001 init 1 16598000 10
16598400 state 1 pc=0x101C0
16598401 init 1 16598400 10
16598800 state 1 pc=0x101C4
16598801 init 1 16598800 10
16599200 state 1 pc=0x101C8
16599201 init 1 16599200 10
16599600 state 1 pc=0x101CC
16599601 init 1 16599600 10
; 16600000 unreachable state at 101D0
16600400 state 1 pc=0x101D4
16600401 init 1 16600400 10
16600800 state 1 pc=0x101D8
16600801 init 1 16600800 10
16601200 state 1 pc=0x101DC
16601201 init 1 16601200 10
16601600 state 1 pc=0x101E0
16601601 init 1 16601600 10
16602000 state 1 pc=0x101E4
16602001 init 1 16602000 10
16602400 state 1 pc=0x101E8
16602401 init 1 16602400 10
16602800 state 1 pc=0x101EC
16602801 init 1 16602800 10
16603200 state 1 pc=0x101F0
16603201 init 1 16603200 10
16603600 state 1 pc=0x101F4
16603601 init 1 16603600 10
16604000 state 1 pc=0x101F8
16604001 init 1 16604000 10
16604400 state 1 pc=0x101FC
16604401 init 1 16604400 10
16604800 state 1 pc=0x10200
16604801 init 1 16604800 10
; 16605200 unreachable state at 10204
16605600 state 1 pc=0x10208
16605601 init 1 16605600 10
16606000 state 1 pc=0x1020C
16606001 init 1 16606000 10
16606400 state 1 pc=0x10210
16606401 init 1 16606400 10
16606800 state 1 pc=0x10214
16606801 init 1 16606800 10
16607200 state 1 pc=0x10218
16607201 init 1 16607200 10
16607600 state 1 pc=0x1021C
16607601 init 1 16607600 10
16608000 state 1 pc=0x10220
16608001 init 1 16608000 10
16608400 state 1 pc=0x10224
16608401 init 1 16608400 10
16608800 state 1 pc=0x10228
16608801 init 1 16608800 10
16609200 state 1 pc=0x1022C
16609201 init 1 16609200 10
16609600 state 1 pc=0x10230
16609601 init 1 16609600 10
; 16610000 unreachable state at 10234
; 16610400 unreachable state at 10238
; 16610800 unreachable state at 1023C
; 16611200 unreachable state at 10240
; 16611600 unreachable state at 10244
; 16612000 unreachable state at 10248
; 16612400 unreachable state at 1024C
; 16612800 unreachable state at 10250
; 16613200 unreachable state at 10254
; 16613600 unreachable state at 10258
; 16614000 unreachable state at 1025C
; 16614400 unreachable state at 10260
; 16614800 unreachable state at 10264
; 16615200 unreachable state at 10268
; 16615600 unreachable state at 1026C
; 16616000 unreachable state at 10270
; 16616400 unreachable state at 10274
; 16616800 unreachable state at 10278
; 16617200 unreachable state at 1027C
; 16617600 unreachable state at 10280
; 16618000 unreachable state at 10284
; 16618400 unreachable state at 10288
; 16618800 unreachable state at 1028C
; 16619200 unreachable state at 10290
16619600 state 1 pc=0x10294
16619601 init 1 16619600 10
16620000 state 1 pc=0x10298
16620001 init 1 16620000 10
16620400 state 1 pc=0x1029C
16620401 init 1 16620400 10
16620800 state 1 pc=0x102A0
16620801 init 1 16620800 10
16621200 state 1 pc=0x102A4
16621201 init 1 16621200 10
16621600 state 1 pc=0x102A8
16621601 init 1 16621600 10
16622000 state 1 pc=0x102AC
16622001 init 1 16622000 10
16622400 state 1 pc=0x102B0
16622401 init 1 16622400 10
16622800 state 1 pc=0x102B4
16622801 init 1 16622800 10
16623200 state 1 pc=0x102B8
16623201 init 1 16623200 10
16623600 state 1 pc=0x102BC
16623601 init 1 16623600 10
16624000 state 1 pc=0x102C0
16624001 init 1 16624000 10
16624400 state 1 pc=0x102C4
16624401 init 1 16624400 10
16624800 state 1 pc=0x102C8
16624801 init 1 16624800 10
16625200 state 1 pc=0x102CC
16625201 init 1 16625200 10
16625600 state 1 pc=0x102D0
16625601 init 1 16625600 10
16626000 state 1 pc=0x102D4
16626001 init 1 16626000 10
16626400 state 1 pc=0x102D8
16626401 init 1 16626400 10
16626800 state 1 pc=0x102DC
16626801 init 1 16626800 10
16627200 state 1 pc=0x102E0
16627201 init 1 16627200 10
16627600 state 1 pc=0x102E4
16627601 init 1 16627600 10
16628000 state 1 pc=0x102E8
16628001 init 1 16628000 10
16628400 state 1 pc=0x102EC
16628401 init 1 16628400 10
16628800 state 1 pc=0x102F0
16628801 init 1 16628800 10
16629200 state 1 pc=0x102F4
16629201 init 1 16629200 10
16629600 state 1 pc=0x102F8
16629601 init 1 16629600 10
; 16630000 unreachable state at 102FC
16630400 state 1 pc=0x10300
16630401 init 1 16630400 10
16630800 state 1 pc=0x10304
16630801 init 1 16630800 10
16631200 state 1 pc=0x10308
16631201 init 1 16631200 10
16631600 state 1 pc=0x1030C
16631601 init 1 16631600 10
16632000 state 1 pc=0x10310
16632001 init 1 16632000 10
16632400 state 1 pc=0x10314
16632401 init 1 16632400 10
16632800 state 1 pc=0x10318
16632801 init 1 16632800 10
16633200 state 1 pc=0x1031C
16633201 init 1 16633200 10
16633600 state 1 pc=0x10320
16633601 init 1 16633600 10
; 16634000 unreachable state at 10324

16963200 state 5 memory-dump

; data segment

16963201 constd 4 8704 ; 0x2200 paddr, 0x11000 vaddr
16963202 constd 2 73736 ; 0x12008 word
16963203 write 5 16963200 16963201 16963202

; heap segment

17372800 constd 4 9216 ; 0x2400 paddr, 0x12000 vaddr
17372801 write 5 16963203 17372800 20
17373600 constd 4 9217 ; 0x2401 paddr, 0x12008 vaddr
17373601 write 5 17372801 17373600 20

; stack segment

17374400 constd 4 536870893 ; 0x1FFFFFED paddr, 0xFFFFFF68 vaddr
17374401 write 5 17373601 17374400 20
17375200 constd 4 536870894 ; 0x1FFFFFEE paddr, 0xFFFFFF70 vaddr
17375201 write 5 17374401 17375200 20
17376000 constd 4 536870895 ; 0x1FFFFFEF paddr, 0xFFFFFF78 vaddr
17376001 constd 2 73728 ; 0x12000 word
17376002 write 5 17375201 17376000 17376001
17376800 constd 4 536870896 ; 0x1FFFFFF0 paddr, 0xFFFFFF80 vaddr
17376801 constd 2 1 ; 0x1 word
17376802 write 5 17376002 17376800 17376801
17377600 constd 4 536870897 ; 0x1FFFFFF1 paddr, 0xFFFFFF88 vaddr
17377601 constd 2 73728 ; 0x12000 word
17377602 write 5 17376802 17377600 17377601
17378400 constd 4 536870898 ; 0x1FFFFFF2 paddr, 0xFFFFFF90 vaddr
17378401 write 5 17377602 17378400 20
17379200 constd 4 536870899 ; 0x1FFFFFF3 paddr, 0xFFFFFF98 vaddr
17379201 write 5 17378401 17379200 20
17380000 constd 4 536870900 ; 0x1FFFFFF4 paddr, 0xFFFFFFA0 vaddr
17380001 constd 2 65616 ; 0x10050 word
17380002 write 5 17379201 17380000 17380001
17380800 constd 4 536870901 ; 0x1FFFFFF5 paddr, 0xFFFFFFA8 vaddr
17380801 constd 2 1 ; 0x1 word
17380802 write 5 17380002 17380800 17380801
17381600 constd 4 536870902 ; 0x1FFFFFF6 paddr, 0xFFFFFFB0 vaddr
17381601 constd 2 4294967224 ; 0xFFFFFFB8 word
17381602 write 5 17380802 17381600 17381601
17382400 constd 4 536870903 ; 0x1FFFFFF7 paddr, 0xFFFFFFB8 vaddr
17382401 constd 2 4294967248 ; 0xFFFFFFD0 word
17382402 write 5 17381602 17382400 17382401
17383200 constd 4 536870904 ; 0x1FFFFFF8 paddr, 0xFFFFFFC0 vaddr
17383201 write 5 17382402 17383200 20
17384000 constd 4 536870905 ; 0x1FFFFFF9 paddr, 0xFFFFFFC8 vaddr
17384001 write 5 17383201 17384000 20
17384800 constd 4 536870906 ; 0x1FFFFFFA paddr, 0xFFFFFFD0 vaddr
17384801 constd 2 8315171517136730213 ; 0x73656C706D617865 word
17384802 write 5 17384001 17384800 17384801
17385600 constd 4 536870907 ; 0x1FFFFFFB paddr, 0xFFFFFFD8 vaddr
17385601 constd 2 7596569140001338159 ; 0x696C6F626D79732F word
17385602 write 5 17384802 17385600 17385601
17386400 constd 4 536870908 ; 0x1FFFFFFC paddr, 0xFFFFFFE0 vaddr
17386401 constd 2 8318840531470921571 ; 0x7372756365722F63 word
17386402 write 5 17385602 17386400 17386401
17387200 constd 4 536870909 ; 0x1FFFFFFD paddr, 0xFFFFFFE8 vaddr
17387201 constd 2 7308044089363363433 ; 0x656B63612D657669 word
17387202 write 5 17386402 17387200 17387201
17388000 constd 4 536870910 ; 0x1FFFFFFE paddr, 0xFFFFFFF0 vaddr
17388001 constd 2 3256433957887110514 ; 0x2D312D6E6E616D72 word
17388002 write 5 17387202 17388000 17388001
17388800 constd 4 536870911 ; 0x1FFFFFFF paddr, 0xFFFFFFF8 vaddr
17388801 constd 2 3458813993507763507 ; 0x30002D00632E3533 word
17388802 write 5 17388002 17388800 17388801

; 29-bit physical memory

20000000 state 5 physical-memory ; data, heap, stack segments
20000001 init 5 20000000 17388802 ; loading data, heap, stack segments into memory

; data flow

36561200 constd 2 65616 ; 0x10050
36561600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36561601 add 2 202 36561600
36561602 ite 2 16561600 36561601 202 ; 0x10050(~1): addi sp,sp,-8
36562000 slice 4 202 31 3
36562001 ite 2 16562000 202 30 ; for checking address validity
36562002 write 5 20000000 36562000 210
36562003 ite 5 16562000 36562002 20000000 ; 0x10054(~1): sd a0,0(sp)
36562400 slice 4 202 31 3
36562401 ite 2 16562400 202 36562001 ; for checking address validity
36562402 read 2 20000000 36562400
36562403 ite 2 16562400 36562402 210 ; 0x10058(~1): ld a0,0(sp)
36562800 constd 2 8 ; 0x8
36562801 add 2 202 36562800
36562802 ite 2 16562800 36562801 36561602 ; 0x1005C(~1): addi sp,sp,8
36563200 constd 2 93 ; 0x5D
36563201 ite 2 16563200 36563200 217 ; 0x10060(~1): addi a7,zero,93
36563600 ite 1 16563600 11 10 ; 0x10064(~1): ecall
36566800 ite 1 16566800 11 36563600 ; 0x10084(~1): ecall
36585600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36585601 add 2 202 36585600
36585602 ite 2 16585600 36585601 36562802 ; 0x10140(~2): addi sp,sp,-8
36586000 slice 4 202 31 3
36586001 ite 2 16586000 202 36562401 ; for checking address validity
36586002 write 5 20000000 36586000 201
36586003 ite 5 16586000 36586002 36562003 ; 0x10144(~2): sd ra,0(sp)
36586400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36586401 add 2 202 36586400
36586402 ite 2 16586400 36586401 36585602 ; 0x10148(~2): addi sp,sp,-8
36586800 slice 4 202 31 3
36586801 ite 2 16586800 202 36586001 ; for checking address validity
36586802 write 5 20000000 36586800 208
36586803 ite 5 16586800 36586802 36586003 ; 0x1014C(~2): sd s0,0(sp)
36587200 ite 2 16587200 202 208 ; 0x10150(~2): addi s0,sp,0
36587600 constd 2 16 ; 0x10
36587601 add 2 208 36587600
36587602 slice 4 36587601 31 3
36587603 ite 2 16587600 36587601 36586801 ; for checking address validity
36587604 read 2 20000000 36587602
36587605 ite 2 16587600 36587604 205 ; 0x10154(~2): ld t0,16(s0)
36588000 ite 2 16588000 200 206 ; 0x10158(~2): addi t1,zero,0
36588400 sub 2 206 205
36588401 ite 2 16588400 36588400 36587605 ; 0x1015C(~2): sub t0,t1,t0
36588800 ult 1 200 205
36588801 uext 2 36588800 63
36588802 ite 2 16588800 36588801 36588401 ; 0x10160(~2): sltu t0,zero,t0
36589200 eq 1 205 200 ; 0x10164(~2): beq t0,zero,41
36589201 not 1 36589200
36589600 constd 2 24 ; 0x18
36589601 add 2 208 36589600
36589602 slice 4 36589601 31 3
36589603 ite 2 16589600 36589601 36587603 ; for checking address validity
36589604 read 2 20000000 36589602
36589605 ite 2 16589600 36589604 36588802 ; 0x10168(~3): ld t0,24(s0)
36590000 ite 2 16590000 200 36588000 ; 0x1016C(~3): addi t1,zero,0
36590400 sub 2 206 205
36590401 ite 2 16590400 36590400 36589605 ; 0x10170(~3): sub t0,t1,t0
36590800 ult 1 200 205
36590801 uext 2 36590800 63
36590802 ite 2 16590800 36590801 36590401 ; 0x10174(~3): sltu t0,zero,t0
36591200 eq 1 205 200 ; 0x10178(~3): beq t0,zero,23
36591201 not 1 36591200
36591600 constd 2 16 ; 0x10
36591601 add 2 208 36591600
36591602 slice 4 36591601 31 3
36591603 ite 2 16591600 36591601 36589603 ; for checking address validity
36591604 read 2 20000000 36591602
36591605 ite 2 16591600 36591604 36590802 ; 0x1017C(~4): ld t0,16(s0)
36592000 constd 2 1 ; 0x1
36592001 ite 2 16592000 36592000 36590000 ; 0x10180(~4): addi t1,zero,1
36592400 sub 2 205 206
36592401 ite 2 16592400 36592400 36591605 ; 0x10184(~4): sub t0,t0,t1
36592800 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36592801 add 2 202 36592800
36592802 ite 2 16592800 36592801 36586402 ; 0x10188(~4): addi sp,sp,-16
36593200 slice 4 202 31 3
36593201 ite 2 16593200 202 36591603 ; for checking address validity
36593202 write 5 20000000 36593200 205
36593203 ite 5 16593200 36593202 36586803 ; 0x1018C(~4): sd t0,0(sp)
36593600 constd 2 16 ; 0x10
36593601 add 2 208 36593600
36593602 slice 4 36593601 31 3
36593603 ite 2 16593600 36593601 36593201 ; for checking address validity
36593604 read 2 20000000 36593602
36593605 ite 2 16593600 36593604 36592401 ; 0x10190(~4): ld t0,16(s0)
36594000 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36594001 add 2 202 36594000
36594002 ite 2 16594000 36594001 36592802 ; 0x10194(~4): addi sp,sp,-16
36594400 slice 4 202 31 3
36594401 ite 2 16594400 202 36593603 ; for checking address validity
36594402 write 5 20000000 36594400 205
36594403 ite 5 16594400 36594402 36593203 ; 0x10198(~4): sd t0,0(sp)
36594800 constd 2 24 ; 0x18
36594801 add 2 208 36594800
36594802 slice 4 36594801 31 3
36594803 ite 2 16594800 36594801 36594401 ; for checking address validity
36594804 read 2 20000000 36594802
36594805 ite 2 16594800 36594804 36593605 ; 0x1019C(~4): ld t0,24(s0)
36595200 constd 2 1 ; 0x1
36595201 ite 2 16595200 36595200 36592001 ; 0x101A0(~4): addi t1,zero,1
36595600 sub 2 205 206
36595601 ite 2 16595600 36595600 36594805 ; 0x101A4(~4): sub t0,t0,t1
36596000 constd 2 8 ; 0x8
36596001 add 2 202 36596000
36596002 slice 4 36596001 31 3
36596003 ite 2 16596000 36596001 36594803 ; for checking address validity
36596004 write 5 20000000 36596002 205
36596005 ite 5 16596000 36596004 36594403 ; 0x101A8(~4): sd t0,8(sp)
36596400 constd 2 65968 ; 0x101B0
36596401 ite 2 16596400 36596400 201 ; 0x101AC(~4): jal ra,-27
36596800 ite 2 16596800 210 36595601 ; 0x101B0(~4): addi t0,a0,0
36597200 ite 2 16597200 200 36562403 ; 0x101B4(~4): addi a0,zero,0
36597600 constd 2 8 ; 0x8
36597601 add 2 202 36597600
36597602 slice 4 36597601 31 3
36597603 ite 2 16597600 36597601 36596003 ; for checking address validity
36597604 write 5 20000000 36597602 205
36597605 ite 5 16597600 36597604 36596005 ; 0x101B8(~4): sd t0,8(sp)
36598000 constd 2 65984 ; 0x101C0
36598001 ite 2 16598000 36598000 36596401 ; 0x101BC(~4): jal ra,-31
36598400 ite 2 16598400 210 36596800 ; 0x101C0(~4): addi t0,a0,0
36598800 ite 2 16598800 200 36597200 ; 0x101C4(~4): addi a0,zero,0
36599200 ite 2 16599200 205 36598800 ; 0x101C8(~4): addi a0,t0,0
36600400 constd 2 16 ; 0x10
36600401 add 2 208 36600400
36600402 slice 4 36600401 31 3
36600403 ite 2 16600400 36600401 36597603 ; for checking address validity
36600404 read 2 20000000 36600402
36600405 ite 2 16600400 36600404 36598400 ; 0x101D4(~6): ld t0,16(s0)
36600800 constd 2 1 ; 0x1
36600801 ite 2 16600800 36600800 36595201 ; 0x101D8(~6): addi t1,zero,1
36601200 sub 2 205 206
36601201 ite 2 16601200 36601200 36600405 ; 0x101DC(~6): sub t0,t0,t1
36601600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36601601 add 2 202 36601600
36601602 ite 2 16601600 36601601 36594002 ; 0x101E0(~6): addi sp,sp,-16
36602000 slice 4 202 31 3
36602001 ite 2 16602000 202 36600403 ; for checking address validity
36602002 write 5 20000000 36602000 205
36602003 ite 5 16602000 36602002 36597605 ; 0x101E4(~6): sd t0,0(sp)
36602400 constd 2 1 ; 0x1
36602401 ite 2 16602400 36602400 36601201 ; 0x101E8(~6): addi t0,zero,1
36602800 constd 2 8 ; 0x8
36602801 add 2 202 36602800
36602802 slice 4 36602801 31 3
36602803 ite 2 16602800 36602801 36602001 ; for checking address validity
36602804 write 5 20000000 36602802 205
36602805 ite 5 16602800 36602804 36602003 ; 0x101EC(~6): sd t0,8(sp)
36603200 constd 2 66036 ; 0x101F4
36603201 ite 2 16603200 36603200 36598001 ; 0x101F0(~6): jal ra,-44
36603600 ite 2 16603600 210 36602401 ; 0x101F4(~6): addi t0,a0,0
36604000 ite 2 16604000 200 36599200 ; 0x101F8(~6): addi a0,zero,0
36604400 ite 2 16604400 205 36604000 ; 0x101FC(~6): addi a0,t0,0
36605600 constd 2 24 ; 0x18
36605601 add 2 208 36605600
36605602 slice 4 36605601 31 3
36605603 ite 2 16605600 36605601 36602803 ; for checking address validity
36605604 read 2 20000000 36605602
36605605 ite 2 16605600 36605604 36603600 ; 0x10208(~8): ld t0,24(s0)
36606000 constd 2 1 ; 0x1
36606001 ite 2 16606000 36606000 36600801 ; 0x1020C(~8): addi t1,zero,1
36606400 add 2 205 206
36606401 ite 2 16606400 36606400 36605605 ; 0x10210(~8): add t0,t0,t1
36606800 ite 2 16606800 205 36604400 ; 0x10214(~8): addi a0,t0,0
36607600 ite 2 16607600 208 36601602 ; 0x1021C(~9): addi sp,s0,0
36608000 slice 4 202 31 3
36608001 ite 2 16608000 202 36605603 ; for checking address validity
36608002 read 2 20000000 36608000
36608003 ite 2 16608000 36608002 36587200 ; 0x10220(~9): ld s0,0(sp)
36608400 constd 2 8 ; 0x8
36608401 add 2 202 36608400
36608402 ite 2 16608400 36608401 36607600 ; 0x10224(~9): addi sp,sp,8
36608800 slice 4 202 31 3
36608801 ite 2 16608800 202 36608001 ; for checking address validity
36608802 read 2 20000000 36608800
36608803 ite 2 16608800 36608802 36603201 ; 0x10228(~9): ld ra,0(sp)
36609200 constd 2 24 ; 0x18
36609201 add 2 202 36609200
36609202 ite 2 16609200 36609201 36608402 ; 0x1022C(~9): addi sp,sp,24
36613600 constd 2 66140 ; 0x1025C
36619200 constd 2 66196 ; 0x10294
36619600 ite 2 16619600 200 36606800 ; 0x10294(~19): addi a0,zero,0
36620000 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36620001 add 2 208 36620000
36620002 slice 4 36620001 31 3
36620003 ite 2 16620000 36620001 36608801 ; for checking address validity
36620004 read 2 20000000 36620002
36620005 ite 2 16620000 36620004 36606401 ; 0x10298(~21): ld t0,-16(s0)
36620400 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36620401 add 2 208 36620400
36620402 slice 4 36620401 31 3
36620403 ite 2 16620400 36620401 36620003 ; for checking address validity
36620404 read 2 20000000 36620402
36620405 ite 2 16620400 36620404 36606001 ; 0x1029C(~21): ld t1,-16(s0)
36620800 slice 4 206 31 3
36620801 ite 2 16620800 206 36620403 ; for checking address validity
36620802 read 2 20000000 36620800
36620803 ite 2 16620800 36620802 36620405 ; 0x102A0(~21): ld t1,0(t1)
36621200 constd 2 47 ; 0x2F
36621201 ite 2 16621200 36621200 207 ; 0x102A4(~21): addi t2,zero,47
36621600 sub 2 206 207
36621601 ite 2 16621600 36621600 36620803 ; 0x102A8(~21): sub t1,t1,t2
36622000 slice 4 205 31 3
36622001 ite 2 16622000 205 36620801 ; for checking address validity
36622002 write 5 20000000 36622000 206
36622003 ite 5 16622000 36622002 36602805 ; 0x102AC(~21): sd t1,0(t0)
36622400 constd 2 1 ; 0x1
36622401 ite 2 16622400 36622400 36620005 ; 0x102B0(~24): addi t0,zero,1
36622800 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36622801 add 2 202 36622800
36622802 ite 2 16622800 36622801 36609202 ; 0x102B4(~24): addi sp,sp,-16
36623200 slice 4 202 31 3
36623201 ite 2 16623200 202 36622001 ; for checking address validity
36623202 write 5 20000000 36623200 205
36623203 ite 5 16623200 36623202 36622003 ; 0x102B8(~24): sd t0,0(sp)
36623600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36623601 add 2 208 36623600
36623602 slice 4 36623601 31 3
36623603 ite 2 16623600 36623601 36623201 ; for checking address validity
36623604 read 2 20000000 36623602
36623605 ite 2 16623600 36623604 36622401 ; 0x102BC(~24): ld t0,-16(s0)
36624000 slice 4 205 31 3
36624001 ite 2 16624000 205 36623603 ; for checking address validity
36624002 read 2 20000000 36624000
36624003 ite 2 16624000 36624002 36623605 ; 0x102C0(~24): ld t0,0(t0)
36624400 constd 2 8 ; 0x8
36624401 add 2 202 36624400
36624402 slice 4 36624401 31 3
36624403 ite 2 16624400 36624401 36624001 ; for checking address validity
36624404 write 5 20000000 36624402 205
36624405 ite 5 16624400 36624404 36623203 ; 0x102C4(~24): sd t0,8(sp)
36624800 constd 2 66252 ; 0x102CC
36624801 ite 2 16624800 36624800 36608803 ; 0x102C8(~24): jal ra,-98
36625200 ite 2 16625200 210 36624003 ; 0x102CC(~24): addi t0,a0,0
36625600 ite 2 16625600 200 36619600 ; 0x102D0(~24): addi a0,zero,0
36626000 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36626001 add 2 208 36626000
36626002 slice 4 36626001 31 3
36626003 ite 2 16626000 36626001 36624403 ; for checking address validity
36626004 write 5 20000000 36626002 205
36626005 ite 5 16626000 36626004 36624405 ; 0x102D4(~24): sd t0,-8(s0)
36626400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36626401 add 2 208 36626400
36626402 slice 4 36626401 31 3
36626403 ite 2 16626400 36626401 36626003 ; for checking address validity
36626404 read 2 20000000 36626402
36626405 ite 2 16626400 36626404 36625200 ; 0x102D8(~26): ld t0,-8(s0)
36626800 constd 2 4 ; 0x4
36626801 ite 2 16626800 36626800 36621601 ; 0x102DC(~26): addi t1,zero,4
36627200 sub 2 206 205
36627201 ite 2 16627200 36627200 36626405 ; 0x102E0(~26): sub t0,t1,t0
36627600 constd 2 1 ; 0x1
36627601 ite 2 16627600 36627600 36626801 ; 0x102E4(~26): addi t1,zero,1
36628000 ult 1 205 206
36628001 uext 2 36628000 63
36628002 ite 2 16628000 36628001 36627201 ; 0x102E8(~26): sltu t0,t0,t1
36628400 eq 1 205 200 ; 0x102EC(~26): beq t0,zero,5
36628401 not 1 36628400
36628800 constd 2 1 ; 0x1
36628801 ite 2 16628800 36628800 36628002 ; 0x102F0(~28): addi t0,zero,1
36629200 ite 2 16629200 205 36625600 ; 0x102F4(~28): addi a0,t0,0
36630400 ite 2 16630400 200 36628801 ; 0x10300(~30): addi t0,zero,0
36630800 ite 2 16630800 205 36629200 ; 0x10304(~30): addi a0,t0,0
36631600 ite 2 16631600 208 36622802 ; 0x1030C(~31): addi sp,s0,0
36632000 slice 4 202 31 3
36632001 ite 2 16632000 202 36626403 ; for checking address validity
36632002 read 2 20000000 36632000
36632003 ite 2 16632000 36632002 36608003 ; 0x10310(~31): ld s0,0(sp)
36632400 constd 2 8 ; 0x8
36632401 add 2 202 36632400
36632402 ite 2 16632400 36632401 36631600 ; 0x10314(~31): addi sp,sp,8
36632800 slice 4 202 31 3
36632801 ite 2 16632800 202 36632001 ; for checking address validity
36632802 read 2 20000000 36632800
36632803 ite 2 16632800 36632802 36624801 ; 0x10318(~31): ld ra,0(sp)
36633200 constd 2 8 ; 0x8
36633201 add 2 202 36633200
36633202 ite 2 16633200 36633201 36632402 ; 0x1031C(~31): addi sp,sp,8

; syscalls

40000000 constd 2 93 ; SYSCALL_EXIT
40000001 constd 2 63 ; SYSCALL_READ
40000002 constd 2 64 ; SYSCALL_WRITE
40000003 constd 2 56 ; SYSCALL_OPENAT
40000004 constd 2 214 ; SYSCALL_BRK

40000010 eq 1 217 40000000 ; $a7 == SYSCALL_EXIT
40000011 eq 1 217 40000001 ; $a7 == SYSCALL_READ
40000012 eq 1 217 40000002 ; $a7 == SYSCALL_WRITE
40000013 eq 1 217 40000003 ; $a7 == SYSCALL_OPENAT
40000014 eq 1 217 40000004 ; $a7 == SYSCALL_BRK

41000000 and 1 36566800 40000010 ; exit ecall is active
41000001 ite 1 60 40000010 41000000 ; stay in kernel mode indefinitely if exit ecall is active

42000000 and 1 36566800 40000011 ; read ecall is active
42000001 ite 2 42000000 211 36632801 ; $a1 is start address of buffer for checking address validity
42000002 ite 1 42000000 11 41000001 ; go into kernel mode if read ecall is active
42000003 ite 2 42000000 20 36630800 ; set $a0 = 0 bytes if read ecall is active
42000004 sub 2 212 210 ; $a2 - $a0
42000005 ugte 1 42000004 28 ; $a2 - $a0 >= 8 bytes
42000006 ite 2 42000005 28 42000004 ; read 8 bytes if $a2 - $a0 >= 8 bytes, or else $a2 - $a0 bytes
42000007 eq 1 42000006 22 ; increment == 2
42000008 ite 2 42000007 92 91 ; unsigned-extended 2-byte input if increment == 2, or else unsigned-extended 1-byte input
42000009 eq 1 42000006 23 ; increment == 3
42000010 ite 2 42000009 93 42000008 ; unsigned-extended 3-byte input if increment == 3
42000011 eq 1 42000006 24 ; increment == 4
42000012 ite 2 42000011 94 42000010 ; unsigned-extended 4-byte input if increment == 4
42000013 eq 1 42000006 25 ; increment == 5
42000014 ite 2 42000013 95 42000012 ; unsigned-extended 5-byte input if increment == 5
42000015 eq 1 42000006 26 ; increment == 6
42000016 ite 2 42000015 96 42000014 ; unsigned-extended 6-byte input if increment == 6
42000017 eq 1 42000006 27 ; increment == 7
42000018 ite 2 42000017 97 42000016 ; unsigned-extended 7-byte input if increment == 7
42000019 eq 1 42000006 28 ; increment == 8
42000020 ite 2 42000019 98 42000018 ; 8-byte input if increment == 8
42000021 add 2 211 210 ; $a1 + $a0
42000022 slice 4 42000021 31 3
42000023 write 5 20000000 42000022 42000020 ; memory[$a1 + $a0] = input
42000024 ult 1 210 212 ; $a0 < $a2
42000025 and 1 40000011 42000024 ; $a7 == SYSCALL_READ and $a0 < $a2
42000026 and 1 60 42000025 ; read ecall is in kernel mode and not done yet
42000027 ugt 1 42000006 20 ; increment > 0
42000028 and 1 42000026 42000027 ; read ecall is in kernel mode and not done yet and increment > 0
42000029 ite 5 42000028 42000023 36626005 ; read input into memory[$a1 + $a0]
42000030 add 2 210 42000006 ; $a0 + increment
42000031 ite 2 42000026 42000030 42000003 ; set $a0 = $a0 + increment if read ecall is in kernel mode and not done yet
42000032 ite 1 42000026 11 42000002 ; stay in kernel mode if read ecall is in kernel mode and not done yet

43000000 and 1 36566800 40000012 ; write ecall is active
43000001 ite 2 43000000 211 42000001 ; $a1 is start address of buffer for checking address validity
43000002 ite 2 43000000 212 42000031 ; set $a0 = $a2 if write ecall is active

44000000 and 1 36566800 40000013 ; openat ecall is active
44000001 ite 2 44000000 211 43000001 ; $a1 is start address of buffer for checking address validity
44000002 state 2 fd-bump-pointer
44000003 init 2 44000002 21 ; initial fd-bump-pointer is 1 (file descriptor bump pointer)
44000004 inc 2 44000002
44000005 ite 2 44000000 44000004 44000002 ; fd-bump-pointer + 1 if openat ecall is active
44000006 next 2 44000002 44000005 ; increment fd-bump-pointer if openat ecall is active
44000007 ite 2 44000000 44000004 43000002 ; set $a0 = fd-bump-pointer + 1 if openat ecall is active

45000000 and 1 36566800 40000014 ; brk ecall is active
45000001 state 2 brk-bump-pointer
45000002 init 2 45000001 33 ; current program break
45000003 ulte 1 45000001 210 ; brk <= $a0
45000004 ult 1 210 202 ; $a0 < $sp
45000005 and 1 45000003 45000004 ; brk <= $a0 < $sp
45000006 and 2 210 27 ; reset all but 3 LSBs of $a0
45000007 eq 1 45000006 20 ; 3 LSBs of $a0 == 0 ($a0 is word-aligned)
45000008 and 1 45000005 45000007 ; brk <= $a0 < $sp and $a0 is word-aligned ($a0 is valid)
45000009 and 1 45000000 45000008 ; brk ecall is active and $a0 is valid
45000010 ite 2 45000009 210 45000001 ; brk = $a0 if brk ecall is active and $a0 is valid
45000011 next 2 45000001 45000010 ; set brk = $a0 if brk ecall is active and $a0 is valid
45000012 not 1 45000008 ; $a0 is invalid
45000013 and 1 45000000 45000012 ; brk ecall is active and $a0 is invalid
45000014 ite 2 45000013 45000001 44000007 ; set $a0 = brk if brk ecall is active and $a0 is invalid

46000000 next 1 60 42000032 ; updating kernel-mode flag

; control flow

56561600 not 2 21 ; jalr 66336[0x10320](~31)
56561601 and 2 201 56561600
56561602 eq 1 56561601 36561200
56561603 and 1 16633600 56561602
56561604 next 1 16561600 56561603 ; ->65616[0x10050](~1)
; 65616[0x10050](~1)
56562000 next 1 16562000 16561600 ; ->65620[0x10054](~1)
; 65620[0x10054](~1)
56562400 next 1 16562400 16562000 ; ->65624[0x10058](~1)
; 65624[0x10058](~1)
56562800 next 1 16562800 16562400 ; ->65628[0x1005C](~1)
; 65628[0x1005C](~1)
56563200 next 1 16563200 16562800 ; ->65632[0x10060](~1)
; 65632[0x10060](~1)
56563600 next 1 16563600 16563200 ; ->65636[0x10064](~1)
56564000 state 1 kernel-mode-pc-flag-65636[0x10064](~1)
56564001 init 1 56564000 10 ; ecall is initially inactive
56564002 ite 1 56564000 60 16563600 ; activate ecall and keep active while in kernel mode
56564003 next 1 56564000 56564002 ; keep ecall active while in kernel mode
56564004 and 1 56564000 62 ; ecall is active but not in kernel mode anymore
56566800 next 1 16566800 10 ; ->65668[0x10084](~1)
56567200 state 1 kernel-mode-pc-flag-65668[0x10084](~1)
56567201 init 1 56567200 10 ; ecall is initially inactive
56567202 ite 1 56567200 60 16566800 ; activate ecall and keep active while in kernel mode
56567203 next 1 56567200 56567202 ; keep ecall active while in kernel mode
56567204 and 1 56567200 62 ; ecall is active but not in kernel mode anymore
56567205 next 1 16567200 56567204 ; ->65672[0x10088](~1)
; jal 66248[0x102C8](~24)
; jal 66032[0x101F0](~6)
56585600 ite 1 16603200 11 16624800
; jal 65980[0x101BC](~4)
56585601 ite 1 16598000 11 56585600
; jal 65964[0x101AC](~4)
56585602 ite 1 16596400 11 56585601
56585603 next 1 16585600 56585602 ; ->65856[0x10140](~2)
; 65856[0x10140](~2)
56586000 next 1 16586000 16585600 ; ->65860[0x10144](~2)
; 65860[0x10144](~2)
56586400 next 1 16586400 16586000 ; ->65864[0x10148](~2)
; 65864[0x10148](~2)
56586800 next 1 16586800 16586400 ; ->65868[0x1014C](~2)
; 65868[0x1014C](~2)
56587200 next 1 16587200 16586800 ; ->65872[0x10150](~2)
; 65872[0x10150](~2)
56587600 next 1 16587600 16587200 ; ->65876[0x10154](~2)
; 65876[0x10154](~2)
56588000 next 1 16588000 16587600 ; ->65880[0x10158](~2)
; 65880[0x10158](~2)
56588400 next 1 16588400 16588000 ; ->65884[0x1015C](~2)
; 65884[0x1015C](~2)
56588800 next 1 16588800 16588400 ; ->65888[0x10160](~2)
; 65888[0x10160](~2)
56589200 next 1 16589200 16588800 ; ->65892[0x10164](~2)
56589600 and 1 16589200 36589201 ; beq 65892[0x10164](~2)
56589601 next 1 16589600 56589600 ; ->65896[0x10168](~3)
; 65896[0x10168](~3)
56590000 next 1 16590000 16589600 ; ->65900[0x1016C](~3)
; 65900[0x1016C](~3)
56590400 next 1 16590400 16590000 ; ->65904[0x10170](~3)
; 65904[0x10170](~3)
56590800 next 1 16590800 16590400 ; ->65908[0x10174](~3)
; 65908[0x10174](~3)
56591200 next 1 16591200 16590800 ; ->65912[0x10178](~3)
56591600 and 1 16591200 36591201 ; beq 65912[0x10178](~3)
56591601 next 1 16591600 56591600 ; ->65916[0x1017C](~4)
; 65916[0x1017C](~4)
56592000 next 1 16592000 16591600 ; ->65920[0x10180](~4)
; 65920[0x10180](~4)
56592400 next 1 16592400 16592000 ; ->65924[0x10184](~4)
; 65924[0x10184](~4)
56592800 next 1 16592800 16592400 ; ->65928[0x10188](~4)
; 65928[0x10188](~4)
56593200 next 1 16593200 16592800 ; ->65932[0x1018C](~4)
; 65932[0x1018C](~4)
56593600 next 1 16593600 16593200 ; ->65936[0x10190](~4)
; 65936[0x10190](~4)
56594000 next 1 16594000 16593600 ; ->65940[0x10194](~4)
; 65940[0x10194](~4)
56594400 next 1 16594400 16594000 ; ->65944[0x10198](~4)
; 65944[0x10198](~4)
56594800 next 1 16594800 16594400 ; ->65948[0x1019C](~4)
; 65948[0x1019C](~4)
56595200 next 1 16595200 16594800 ; ->65952[0x101A0](~4)
; 65952[0x101A0](~4)
56595600 next 1 16595600 16595200 ; ->65956[0x101A4](~4)
; 65956[0x101A4](~4)
56596000 next 1 16596000 16595600 ; ->65960[0x101A8](~4)
; 65960[0x101A8](~4)
56596400 next 1 16596400 16596000 ; ->65964[0x101AC](~4)
56596800 not 2 21 ; jalr 66096[0x10230](~9)
56596801 and 2 201 56596800
56596802 eq 1 56596801 36596400
56596803 and 1 16609600 56596802
56596804 next 1 16596800 56596803 ; ->65968[0x101B0](~4)
; 65968[0x101B0](~4)
56597200 next 1 16597200 16596800 ; ->65972[0x101B4](~4)
; 65972[0x101B4](~4)
56597600 next 1 16597600 16597200 ; ->65976[0x101B8](~4)
; 65976[0x101B8](~4)
56598000 next 1 16598000 16597600 ; ->65980[0x101BC](~4)
56598400 not 2 21 ; jalr 66096[0x10230](~9)
56598401 and 2 201 56598400
56598402 eq 1 56598401 36598000
56598403 and 1 16609600 56598402
56598404 next 1 16598400 56598403 ; ->65984[0x101C0](~4)
; 65984[0x101C0](~4)
56598800 next 1 16598800 16598400 ; ->65988[0x101C4](~4)
; 65988[0x101C4](~4)
56599200 next 1 16599200 16598800 ; ->65992[0x101C8](~4)
; 65992[0x101C8](~4)
56599600 next 1 16599600 16599200 ; ->65996[0x101CC](~4)
56600400 and 1 16591200 36591200 ; beq 65912[0x10178](~3)
56600401 next 1 16600400 56600400 ; ->66004[0x101D4](~6)
; 66004[0x101D4](~6)
56600800 next 1 16600800 16600400 ; ->66008[0x101D8](~6)
; 66008[0x101D8](~6)
56601200 next 1 16601200 16600800 ; ->66012[0x101DC](~6)
; 66012[0x101DC](~6)
56601600 next 1 16601600 16601200 ; ->66016[0x101E0](~6)
; 66016[0x101E0](~6)
56602000 next 1 16602000 16601600 ; ->66020[0x101E4](~6)
; 66020[0x101E4](~6)
56602400 next 1 16602400 16602000 ; ->66024[0x101E8](~6)
; 66024[0x101E8](~6)
56602800 next 1 16602800 16602400 ; ->66028[0x101EC](~6)
; 66028[0x101EC](~6)
56603200 next 1 16603200 16602800 ; ->66032[0x101F0](~6)
56603600 not 2 21 ; jalr 66096[0x10230](~9)
56603601 and 2 201 56603600
56603602 eq 1 56603601 36603200
56603603 and 1 16609600 56603602
56603604 next 1 16603600 56603603 ; ->66036[0x101F4](~6)
; 66036[0x101F4](~6)
56604000 next 1 16604000 16603600 ; ->66040[0x101F8](~6)
; 66040[0x101F8](~6)
56604400 next 1 16604400 16604000 ; ->66044[0x101FC](~6)
; 66044[0x101FC](~6)
56604800 next 1 16604800 16604400 ; ->66048[0x10200](~6)
56605600 and 1 16589200 36589200 ; beq 65892[0x10164](~2)
56605601 next 1 16605600 56605600 ; ->66056[0x10208](~8)
; 66056[0x10208](~8)
56606000 next 1 16606000 16605600 ; ->66060[0x1020C](~8)
; 66060[0x1020C](~8)
56606400 next 1 16606400 16606000 ; ->66064[0x10210](~8)
; 66064[0x10210](~8)
56606800 next 1 16606800 16606400 ; ->66068[0x10214](~8)
; 66068[0x10214](~8)
56607200 next 1 16607200 16606800 ; ->66072[0x10218](~8)
; jal 66072[0x10218](~8)
; jal 66048[0x10200](~6)
56607600 ite 1 16604800 11 16607200
; jal 65996[0x101CC](~4)
56607601 ite 1 16599600 11 56607600
56607602 next 1 16607600 56607601 ; ->66076[0x1021C](~9)
; 66076[0x1021C](~9)
56608000 next 1 16608000 16607600 ; ->66080[0x10220](~9)
; 66080[0x10220](~9)
56608400 next 1 16608400 16608000 ; ->66084[0x10224](~9)
; 66084[0x10224](~9)
56608800 next 1 16608800 16608400 ; ->66088[0x10228](~9)
; 66088[0x10228](~9)
56609200 next 1 16609200 16608800 ; ->66092[0x1022C](~9)
; 66092[0x1022C](~9)
56609600 next 1 16609600 16609200 ; ->66096[0x10230](~9)
56619600 not 2 21 ; jalr 65672[0x10088](~1)
56619601 and 2 201 56619600
56619602 eq 1 56619601 36619200
56619603 and 1 16567200 56619602
56619604 next 1 16619600 56619603 ; ->66196[0x10294](~19)
; 66196[0x10294](~19)
56620000 next 1 16620000 16619600 ; ->66200[0x10298](~21)
; 66200[0x10298](~21)
56620400 next 1 16620400 16620000 ; ->66204[0x1029C](~21)
; 66204[0x1029C](~21)
56620800 next 1 16620800 16620400 ; ->66208[0x102A0](~21)
; 66208[0x102A0](~21)
56621200 next 1 16621200 16620800 ; ->66212[0x102A4](~21)
; 66212[0x102A4](~21)
56621600 next 1 16621600 16621200 ; ->66216[0x102A8](~21)
; 66216[0x102A8](~21)
56622000 next 1 16622000 16621600 ; ->66220[0x102AC](~21)
; 66220[0x102AC](~21)
56622400 next 1 16622400 16622000 ; ->66224[0x102B0](~24)
; 66224[0x102B0](~24)
56622800 next 1 16622800 16622400 ; ->66228[0x102B4](~24)
; 66228[0x102B4](~24)
56623200 next 1 16623200 16622800 ; ->66232[0x102B8](~24)
; 66232[0x102B8](~24)
56623600 next 1 16623600 16623200 ; ->66236[0x102BC](~24)
; 66236[0x102BC](~24)
56624000 next 1 16624000 16623600 ; ->66240[0x102C0](~24)
; 66240[0x102C0](~24)
56624400 next 1 16624400 16624000 ; ->66244[0x102C4](~24)
; 66244[0x102C4](~24)
56624800 next 1 16624800 16624400 ; ->66248[0x102C8](~24)
56625200 not 2 21 ; jalr 66096[0x10230](~9)
56625201 and 2 201 56625200
56625202 eq 1 56625201 36624800
56625203 and 1 16609600 56625202
56625204 next 1 16625200 56625203 ; ->66252[0x102CC](~24)
; 66252[0x102CC](~24)
56625600 next 1 16625600 16625200 ; ->66256[0x102D0](~24)
; 66256[0x102D0](~24)
56626000 next 1 16626000 16625600 ; ->66260[0x102D4](~24)
; 66260[0x102D4](~24)
56626400 next 1 16626400 16626000 ; ->66264[0x102D8](~26)
; 66264[0x102D8](~26)
56626800 next 1 16626800 16626400 ; ->66268[0x102DC](~26)
; 66268[0x102DC](~26)
56627200 next 1 16627200 16626800 ; ->66272[0x102E0](~26)
; 66272[0x102E0](~26)
56627600 next 1 16627600 16627200 ; ->66276[0x102E4](~26)
; 66276[0x102E4](~26)
56628000 next 1 16628000 16627600 ; ->66280[0x102E8](~26)
; 66280[0x102E8](~26)
56628400 next 1 16628400 16628000 ; ->66284[0x102EC](~26)
56628800 and 1 16628400 36628401 ; beq 66284[0x102EC](~26)
56628801 next 1 16628800 56628800 ; ->66288[0x102F0](~28)
; 66288[0x102F0](~28)
56629200 next 1 16629200 16628800 ; ->66292[0x102F4](~28)
; 66292[0x102F4](~28)
56629600 next 1 16629600 16629200 ; ->66296[0x102F8](~28)
56630400 and 1 16628400 36628400 ; beq 66284[0x102EC](~26)
56630401 next 1 16630400 56630400 ; ->66304[0x10300](~30)
; 66304[0x10300](~30)
56630800 next 1 16630800 16630400 ; ->66308[0x10304](~30)
; 66308[0x10304](~30)
56631200 next 1 16631200 16630800 ; ->66312[0x10308](~30)
; jal 66312[0x10308](~30)
; jal 66296[0x102F8](~28)
56631600 ite 1 16629600 11 16631200
56631601 next 1 16631600 56631600 ; ->66316[0x1030C](~31)
; 66316[0x1030C](~31)
56632000 next 1 16632000 16631600 ; ->66320[0x10310](~31)
; 66320[0x10310](~31)
56632400 next 1 16632400 16632000 ; ->66324[0x10314](~31)
; 66324[0x10314](~31)
56632800 next 1 16632800 16632400 ; ->66328[0x10318](~31)
; 66328[0x10318](~31)
56633200 next 1 16633200 16632800 ; ->66332[0x1031C](~31)
; 66332[0x1031C](~31)
56633600 next 1 16633600 16633200 ; ->66336[0x10320](~31)

; updating registers

60000001 next 2 201 36632803 ra ; register $1
60000002 next 2 202 36633202 sp ; register $2
60000003 next 2 203 203 gp ; register $3
60000004 next 2 204 204 tp ; register $4
60000005 next 2 205 36630400 t0 ; register $5
60000006 next 2 206 36627601 t1 ; register $6
60000007 next 2 207 36621201 t2 ; register $7
60000008 next 2 208 36632003 s0 ; register $8
60000009 next 2 209 209 s1 ; register $9
60000010 next 2 210 45000014 a0 ; register $10
60000011 next 2 211 211 a1 ; register $11
60000012 next 2 212 212 a2 ; register $12
60000013 next 2 213 213 a3 ; register $13
60000014 next 2 214 214 a4 ; register $14
60000015 next 2 215 215 a5 ; register $15
60000016 next 2 216 216 a6 ; register $16
60000017 next 2 217 36563201 a7 ; register $17
60000018 next 2 218 218 s2 ; register $18
60000019 next 2 219 219 s3 ; register $19
60000020 next 2 220 220 s4 ; register $20
60000021 next 2 221 221 s5 ; register $21
60000022 next 2 222 222 s6 ; register $22
60000023 next 2 223 223 s7 ; register $23
60000024 next 2 224 224 s8 ; register $24
60000025 next 2 225 225 s9 ; register $25
60000026 next 2 226 226 s10 ; register $26
60000027 next 2 227 227 s11 ; register $27
60000028 next 2 228 228 t3 ; register $28
60000029 next 2 229 229 t4 ; register $29
60000030 next 2 230 230 t5 ; register $30
60000031 next 2 231 231 t6 ; register $31

; updating 29-bit physical memory

70000000 next 5 20000000 42000029 physical-memory

; checking syscall id

80000000 not 1 40000010 ; $a7 != SYSCALL_EXIT
80000001 not 1 40000011 ; $a7 != SYSCALL_READ
80000002 not 1 40000012 ; $a7 != SYSCALL_WRITE
80000003 not 1 40000013 ; $a7 != SYSCALL_OPENAT
80000004 not 1 40000014 ; $a7 != SYSCALL_BRK
80000005 and 1 80000000 80000001 ; ... and $a7 != SYSCALL_READ
80000006 and 1 80000005 80000002 ; ... and $a7 != SYSCALL_WRITE
80000007 and 1 80000006 80000003 ; ... and $a7 != SYSCALL_OPENAT
80000008 and 1 80000007 80000004 ; ... and $a7 != SYSCALL_BRK

80000009 and 1 36566800 80000008 ; ecall is active for invalid syscall id
80000010 bad 80000009 b0 ; invalid syscall id

; checking exit code

80000011 neq 1 210 20 ; $a0 != zero exit code
80000012 and 1 41000000 80000011 ; exit ecall is active with non-zero exit code
80000013 bad 80000012 b1 ; non-zero exit code

; checking division and remainder by zero

80000014 eq 1 21 20
80000015 bad 80000014 b2 ; division by zero

80000016 eq 1 21 20
80000017 bad 80000016 b3 ; remainder by zero

; checking address validity

; is start address of memory access word-aligned?

80000018 and 2 44000001 27 ; reset all but 3 LSBs of address
80000019 neq 1 80000018 20 ; 3 LSBs of address != 0 (address is not word-aligned)
80000020 bad 80000019 b4 ; word-unaligned memory access

; checking segmentation faults

; is start address of memory access in a valid segment?

80000021 ult 1 44000001 30 ; address < start of data segment
80000022 bad 80000021 b5 ; memory access below data segment
80000023 ugte 1 44000001 31 ; address >= end of data segment
80000024 ult 1 44000001 32 ; address < start of heap segment
80000025 and 1 80000023 80000024
80000026 bad 80000025 b6 ; memory access in between data and heap segments
80000027 ugte 1 44000001 45000001 ; address >= current end of heap segment
80000028 ult 1 44000001 202 ; address < current start of stack segment
80000029 and 1 80000027 80000028
80000030 bad 80000029 b7 ; memory access in between current heap and stack segments
80000031 ugte 1 44000001 34 ; address >= allowed end of heap segment
80000032 ult 1 44000001 45000001 ; address < current end of heap segment
80000033 and 1 80000031 80000032
80000034 bad 80000033 b8 ; memory access in between allowed and current end of heap segment
80000035 ugte 1 44000001 202 ; address >= current start of stack segment
80000036 ult 1 44000001 35 ; address < allowed start of stack segment
80000037 and 1 80000035 80000036
80000038 bad 80000037 b9 ; memory access in between current and allowed start of stack segment
80000039 ugt 1 44000001 50 ; address > highest address in 32-bit virtual address space (4GB)
80000040 bad 80000039 b10 ; memory access above stack segment

; end of BTOR2 examples/symbolic/recursive-ackermann-1-35.btor2
