; selfie.cs.uni-salzburg.at

; BTOR2 examples/symbolic/memory-access-fail-1-35.btor2 generated by ./beator
; with --linear-address-space
; with --heap-allowance 8
; with --stack-allowance 32

; RISC-V code obtained from examples/symbolic/memory-access-fail-1-35.c and invoked as: examples/symbolic/memory-access-fail-1-35.c
; with --constant-propagation

1 sort bitvec 1 ; Boolean
2 sort bitvec 64 ; 64-bit machine word

4 sort bitvec 29 ; 29-bit linear address
5 sort array 4 2 ; 29-bit physical memory

; 176B total memory, 8B data, 16B heap (8B,8B), 152B stack (120B,32B)

10 zero 1
11 one 1

20 zero 2
21 one 2
22 constd 2 2
23 constd 2 3
24 constd 2 4
25 constd 2 5
26 constd 2 6
27 constd 2 7
28 constd 2 8

; start of data segment in 64-bit virtual memory
30 constd 2 69632 ; 0x11000
; end of data segment in 64-bit virtual memory
31 constd 2 69640 ; 0x11008

; start of heap segment in 64-bit virtual memory (initial program break)
32 constd 2 73728 ; 0x12000
; current end of heap segment in 64-bit virtual memory (current program break)
33 constd 2 73736 ; 0x12008

; allowed end of heap segment in 64-bit virtual memory (with 8B allowance)
34 constd 2 73744 ; 0x12010
; allowed start of stack segment in 64-bit virtual memory (with 32B allowance)
35 constd 2 4294967144 ; 0xFFFFFF68

; start of data segment in 29-bit linear memory
40 constd 4 8704 ; 0x2200
; end of data segment in 29-bit linear memory
41 constd 4 8705 ; 0x2201

; start of heap segment in 29-bit linear memory (initial program break)
42 constd 4 9216 ; 0x2400
; current end of heap segment in 29-bit linear memory (current program break)
43 constd 4 9217 ; 0x2401

; allowed end of heap segment in 29-bit linear memory (with 8B allowance)
44 constd 4 9218 ; 0x2402
; allowed start of stack segment in 29-bit linear memory (with 32B allowance)
45 constd 4 536870893 ; 0x1FFFFFED

; highest address in 32-bit virtual address space (4GB)

50 constd 2 4294967288 ; 0xFFFFFFF8

; kernel-mode flag

60 state 1 kernel-mode
61 init 1 60 10 kernel-mode ; initial value is false
62 not 1 60

; unsigned-extended inputs for byte-wise reading

71 sort bitvec 8 ; 1 byte
72 sort bitvec 16 ; 2 bytes
73 sort bitvec 24 ; 3 bytes
74 sort bitvec 32 ; 4 bytes
75 sort bitvec 40 ; 5 bytes
76 sort bitvec 48 ; 6 bytes
77 sort bitvec 56 ; 7 bytes

81 input 71 1-byte-input
82 input 72 2-byte-input
83 input 73 3-byte-input
84 input 74 4-byte-input
85 input 75 5-byte-input
86 input 76 6-byte-input
87 input 77 7-byte-input

91 uext 2 81 56 ; uext-1-byte-input
92 uext 2 82 48 ; uext-2-byte-input
93 uext 2 83 40 ; uext-3-byte-input
94 uext 2 84 32 ; uext-4-byte-input
95 uext 2 85 24 ; uext-5-byte-input
96 uext 2 86 16 ; uext-6-byte-input
97 uext 2 87 8 ; uext-7-byte-input
98 input 2 8-byte-input

; 32 64-bit general-purpose registers

; non-zero initial register values

101 constd 2 65896 ; 0x10168 for ra
102 constd 2 4294967176 ; 0xFFFFFF88 for sp
103 constd 2 69640 ; 0x11008 for gp
105 constd 2 69624 ; 0x10FF8 for t0
106 constd 2 69624 ; 0x10FF8 for t1
107 constd 2 8 ; 0x8 for t2
108 constd 2 4294967192 ; 0xFFFFFF98 for s0
116 constd 2 105553135288320 ; 0x600001224000 for a6
117 constd 2 214 ; 0xD6 for a7

; registers

200 zero 2 zero ; register $0 is always 0
201 state 2 ra ; register $1
202 state 2 sp ; register $2
203 state 2 gp ; register $3
204 state 2 tp ; register $4
205 state 2 t0 ; register $5
206 state 2 t1 ; register $6
207 state 2 t2 ; register $7
208 state 2 s0 ; register $8
209 state 2 s1 ; register $9
210 state 2 a0 ; register $10
211 state 2 a1 ; register $11
212 state 2 a2 ; register $12
213 state 2 a3 ; register $13
214 state 2 a4 ; register $14
215 state 2 a5 ; register $15
216 state 2 a6 ; register $16
217 state 2 a7 ; register $17
218 state 2 s2 ; register $18
219 state 2 s3 ; register $19
220 state 2 s4 ; register $20
221 state 2 s5 ; register $21
222 state 2 s6 ; register $22
223 state 2 s7 ; register $23
224 state 2 s8 ; register $24
225 state 2 s9 ; register $25
226 state 2 s10 ; register $26
227 state 2 s11 ; register $27
228 state 2 t3 ; register $28
229 state 2 t4 ; register $29
230 state 2 t5 ; register $30
231 state 2 t6 ; register $31

; initializing registers

301 init 2 201 101 ra ; initial value is 65896
302 init 2 202 102 sp ; initial value is 4294967176
303 init 2 203 103 gp ; initial value is 69640
304 init 2 204 20 tp ; initial value is 0
305 init 2 205 105 t0 ; initial value is 69624
306 init 2 206 106 t1 ; initial value is 69624
307 init 2 207 107 t2 ; initial value is 8
308 init 2 208 108 s0 ; initial value is 4294967192
309 init 2 209 20 s1 ; initial value is 0
310 init 2 210 20 a0 ; initial value is 0
311 init 2 211 20 a1 ; initial value is 0
312 init 2 212 20 a2 ; initial value is 0
313 init 2 213 20 a3 ; initial value is 0
314 init 2 214 20 a4 ; initial value is 0
315 init 2 215 20 a5 ; initial value is 0
316 init 2 216 116 a6 ; initial value is 105553135288320
317 init 2 217 117 a7 ; initial value is 214
318 init 2 218 20 s2 ; initial value is 0
319 init 2 219 20 s3 ; initial value is 0
320 init 2 220 20 s4 ; initial value is 0
321 init 2 221 20 s5 ; initial value is 0
322 init 2 222 20 s6 ; initial value is 0
323 init 2 223 20 s7 ; initial value is 0
324 init 2 224 20 s8 ; initial value is 0
325 init 2 225 20 s9 ; initial value is 0
326 init 2 226 20 s10 ; initial value is 0
327 init 2 227 20 s11 ; initial value is 0
328 init 2 228 20 t3 ; initial value is 0
329 init 2 229 20 t4 ; initial value is 0
330 init 2 230 20 t5 ; initial value is 0
331 init 2 231 20 t6 ; initial value is 0

; 64-bit program counter encoded in Boolean flags

; 16553600 unreachable state at 10000
; 16554000 unreachable state at 10004
; 16554400 unreachable state at 10008
; 16554800 unreachable state at 1000C
; 16555200 unreachable state at 10010
; 16555600 unreachable state at 10014
; 16556000 unreachable state at 10018
; 16556400 unreachable state at 1001C
; 16556800 unreachable state at 10020
; 16557200 unreachable state at 10024
; 16557600 unreachable state at 10028
; 16558000 unreachable state at 1002C
; 16558400 unreachable state at 10030
; 16558800 unreachable state at 10034
; 16559200 unreachable state at 10038
; 16559600 unreachable state at 1003C
; 16560000 unreachable state at 10040
; 16560400 unreachable state at 10044
; 16560800 unreachable state at 10048
; 16561200 unreachable state at 1004C
16561600 state 1 pc=0x10050
16561601 init 1 16561600 10
16562000 state 1 pc=0x10054
16562001 init 1 16562000 10
16562400 state 1 pc=0x10058
16562401 init 1 16562400 10
16562800 state 1 pc=0x1005C
16562801 init 1 16562800 10
16563200 state 1 pc=0x10060
16563201 init 1 16563200 10
16563600 state 1 pc=0x10064
16563601 init 1 16563600 10
16564000 state 1 pc=0x10068
16564001 init 1 16564000 10
16564400 state 1 pc=0x1006C
16564401 init 1 16564400 10
16564800 state 1 pc=0x10070
16564801 init 1 16564800 10
16565200 state 1 pc=0x10074
16565201 init 1 16565200 10
16565600 state 1 pc=0x10078
16565601 init 1 16565600 10
16566000 state 1 pc=0x1007C
16566001 init 1 16566000 10
16566400 state 1 pc=0x10080
16566401 init 1 16566400 10
16566800 state 1 pc=0x10084
16566801 init 1 16566800 10
16567200 state 1 pc=0x10088
16567201 init 1 16567200 10
16567600 state 1 pc=0x1008C
16567601 init 1 16567600 10
16568000 state 1 pc=0x10090
16568001 init 1 16568000 10
16568400 state 1 pc=0x10094
16568401 init 1 16568400 10
16568800 state 1 pc=0x10098
16568801 init 1 16568800 10
16569200 state 1 pc=0x1009C
16569201 init 1 16569200 10
16569600 state 1 pc=0x100A0
16569601 init 1 16569600 10
16570000 state 1 pc=0x100A4
16570001 init 1 16570000 10
16570400 state 1 pc=0x100A8
16570401 init 1 16570400 10
16570800 state 1 pc=0x100AC
16570801 init 1 16570800 10
16571200 state 1 pc=0x100B0
16571201 init 1 16571200 10
16571600 state 1 pc=0x100B4
16571601 init 1 16571600 10
16572000 state 1 pc=0x100B8
16572001 init 1 16572000 10
16572400 state 1 pc=0x100BC
16572401 init 1 16572400 10
16572800 state 1 pc=0x100C0
16572801 init 1 16572800 10
16573200 state 1 pc=0x100C4
16573201 init 1 16573200 10
16573600 state 1 pc=0x100C8
16573601 init 1 16573600 10
16574000 state 1 pc=0x100CC
16574001 init 1 16574000 10
16574400 state 1 pc=0x100D0
16574401 init 1 16574400 10
16574800 state 1 pc=0x100D4
16574801 init 1 16574800 10
; 16575200 unreachable state at 100D8
; 16575600 unreachable state at 100DC
; 16576000 unreachable state at 100E0
; 16576400 unreachable state at 100E4
; 16576800 unreachable state at 100E8
; 16577200 unreachable state at 100EC
; 16577600 unreachable state at 100F0
; 16578000 unreachable state at 100F4
; 16578400 unreachable state at 100F8
; 16578800 unreachable state at 100FC
; 16579200 unreachable state at 10100
; 16579600 unreachable state at 10104
; 16580000 unreachable state at 10108
; 16580400 unreachable state at 1010C
; 16580800 unreachable state at 10110
; 16581200 unreachable state at 10114
; 16581600 unreachable state at 10118
; 16582000 unreachable state at 1011C
; 16582400 unreachable state at 10120
; 16582800 unreachable state at 10124
; 16583200 unreachable state at 10128
; 16583600 unreachable state at 1012C
; 16584000 unreachable state at 10130
; 16584400 unreachable state at 10134
; 16584800 unreachable state at 10138
; 16585200 unreachable state at 1013C
; 16585600 unreachable state at 10140
; 16586000 unreachable state at 10144
; 16586400 unreachable state at 10148
; 16586800 unreachable state at 1014C
; 16587200 unreachable state at 10150
; 16587600 unreachable state at 10154
; 16588000 unreachable state at 10158
; 16588400 unreachable state at 1015C
; 16588800 unreachable state at 10160
; 16589200 unreachable state at 10164
; 16589600 unreachable state at 10168
; 16590000 unreachable state at 1016C
; 16590400 unreachable state at 10170
; 16590800 unreachable state at 10174
; 16591200 unreachable state at 10178
; 16591600 unreachable state at 1017C
; 16592000 unreachable state at 10180
; 16592400 unreachable state at 10184
; 16592800 unreachable state at 10188
; 16593200 unreachable state at 1018C
; 16593600 unreachable state at 10190
; 16594000 unreachable state at 10194
; 16594400 unreachable state at 10198
; 16594800 unreachable state at 1019C
; 16595200 unreachable state at 101A0
; 16595600 unreachable state at 101A4
; 16596000 unreachable state at 101A8
; 16596400 unreachable state at 101AC
; 16596800 unreachable state at 101B0
; 16597200 unreachable state at 101B4
; 16597600 unreachable state at 101B8
; 16598000 unreachable state at 101BC
; 16598400 unreachable state at 101C0
16598800 state 1 pc=0x101C4
16598801 init 1 16598800 11 ; initial program counter
16599200 state 1 pc=0x101C8
16599201 init 1 16599200 10
16599600 state 1 pc=0x101CC
16599601 init 1 16599600 10
16600000 state 1 pc=0x101D0
16600001 init 1 16600000 10
16600400 state 1 pc=0x101D4
16600401 init 1 16600400 10
16600800 state 1 pc=0x101D8
16600801 init 1 16600800 10
16601200 state 1 pc=0x101DC
16601201 init 1 16601200 10
16601600 state 1 pc=0x101E0
16601601 init 1 16601600 10
16602000 state 1 pc=0x101E4
16602001 init 1 16602000 10
16602400 state 1 pc=0x101E8
16602401 init 1 16602400 10
16602800 state 1 pc=0x101EC
16602801 init 1 16602800 10
16603200 state 1 pc=0x101F0
16603201 init 1 16603200 10
16603600 state 1 pc=0x101F4
16603601 init 1 16603600 10
16604000 state 1 pc=0x101F8
16604001 init 1 16604000 10
16604400 state 1 pc=0x101FC
16604401 init 1 16604400 10
16604800 state 1 pc=0x10200
16604801 init 1 16604800 10
16605200 state 1 pc=0x10204
16605201 init 1 16605200 10
16605600 state 1 pc=0x10208
16605601 init 1 16605600 10
16606000 state 1 pc=0x1020C
16606001 init 1 16606000 10
16606400 state 1 pc=0x10210
16606401 init 1 16606400 10
16606800 state 1 pc=0x10214
16606801 init 1 16606800 10
16607200 state 1 pc=0x10218
16607201 init 1 16607200 10
16607600 state 1 pc=0x1021C
16607601 init 1 16607600 10
16608000 state 1 pc=0x10220
16608001 init 1 16608000 10
16608400 state 1 pc=0x10224
16608401 init 1 16608400 10
16608800 state 1 pc=0x10228
16608801 init 1 16608800 10
16609200 state 1 pc=0x1022C
16609201 init 1 16609200 10
16609600 state 1 pc=0x10230
16609601 init 1 16609600 10
16610000 state 1 pc=0x10234
16610001 init 1 16610000 10
16610400 state 1 pc=0x10238
16610401 init 1 16610400 10
16610800 state 1 pc=0x1023C
16610801 init 1 16610800 10
16611200 state 1 pc=0x10240
16611201 init 1 16611200 10
16611600 state 1 pc=0x10244
16611601 init 1 16611600 10
16612000 state 1 pc=0x10248
16612001 init 1 16612000 10
16612400 state 1 pc=0x1024C
16612401 init 1 16612400 10
16612800 state 1 pc=0x10250
16612801 init 1 16612800 10
16613200 state 1 pc=0x10254
16613201 init 1 16613200 10
16613600 state 1 pc=0x10258
16613601 init 1 16613600 10
16614000 state 1 pc=0x1025C
16614001 init 1 16614000 10
16614400 state 1 pc=0x10260
16614401 init 1 16614400 10
16614800 state 1 pc=0x10264
16614801 init 1 16614800 10
16615200 state 1 pc=0x10268
16615201 init 1 16615200 10
16615600 state 1 pc=0x1026C
16615601 init 1 16615600 10
16616000 state 1 pc=0x10270
16616001 init 1 16616000 10
16616400 state 1 pc=0x10274
16616401 init 1 16616400 10
16616800 state 1 pc=0x10278
16616801 init 1 16616800 10
16617200 state 1 pc=0x1027C
16617201 init 1 16617200 10
16617600 state 1 pc=0x10280
16617601 init 1 16617600 10
16618000 state 1 pc=0x10284
16618001 init 1 16618000 10
16618400 state 1 pc=0x10288
16618401 init 1 16618400 10
16618800 state 1 pc=0x1028C
16618801 init 1 16618800 10
16619200 state 1 pc=0x10290
16619201 init 1 16619200 10
16619600 state 1 pc=0x10294
16619601 init 1 16619600 10
16620000 state 1 pc=0x10298
16620001 init 1 16620000 10
16620400 state 1 pc=0x1029C
16620401 init 1 16620400 10
16620800 state 1 pc=0x102A0
16620801 init 1 16620800 10
16621200 state 1 pc=0x102A4
16621201 init 1 16621200 10
16621600 state 1 pc=0x102A8
16621601 init 1 16621600 10
16622000 state 1 pc=0x102AC
16622001 init 1 16622000 10
16622400 state 1 pc=0x102B0
16622401 init 1 16622400 10
16622800 state 1 pc=0x102B4
16622801 init 1 16622800 10
16623200 state 1 pc=0x102B8
16623201 init 1 16623200 10
16623600 state 1 pc=0x102BC
16623601 init 1 16623600 10
16624000 state 1 pc=0x102C0
16624001 init 1 16624000 10
16624400 state 1 pc=0x102C4
16624401 init 1 16624400 10
16624800 state 1 pc=0x102C8
16624801 init 1 16624800 10
16625200 state 1 pc=0x102CC
16625201 init 1 16625200 10
16625600 state 1 pc=0x102D0
16625601 init 1 16625600 10
16626000 state 1 pc=0x102D4
16626001 init 1 16626000 10
16626400 state 1 pc=0x102D8
16626401 init 1 16626400 10
16626800 state 1 pc=0x102DC
16626801 init 1 16626800 10
16627200 state 1 pc=0x102E0
16627201 init 1 16627200 10
16627600 state 1 pc=0x102E4
16627601 init 1 16627600 10
16628000 state 1 pc=0x102E8
16628001 init 1 16628000 10
16628400 state 1 pc=0x102EC
16628401 init 1 16628400 10
16628800 state 1 pc=0x102F0
16628801 init 1 16628800 10
16629200 state 1 pc=0x102F4
16629201 init 1 16629200 10
16629600 state 1 pc=0x102F8
16629601 init 1 16629600 10
16630000 state 1 pc=0x102FC
16630001 init 1 16630000 10
16630400 state 1 pc=0x10300
16630401 init 1 16630400 10
16630800 state 1 pc=0x10304
16630801 init 1 16630800 10
16631200 state 1 pc=0x10308
16631201 init 1 16631200 10
16631600 state 1 pc=0x1030C
16631601 init 1 16631600 10
16632000 state 1 pc=0x10310
16632001 init 1 16632000 10
16632400 state 1 pc=0x10314
16632401 init 1 16632400 10
16632800 state 1 pc=0x10318
16632801 init 1 16632800 10
16633200 state 1 pc=0x1031C
16633201 init 1 16633200 10
16633600 state 1 pc=0x10320
16633601 init 1 16633600 10
16634000 state 1 pc=0x10324
16634001 init 1 16634000 10
16634400 state 1 pc=0x10328
16634401 init 1 16634400 10
16634800 state 1 pc=0x1032C
16634801 init 1 16634800 10
16635200 state 1 pc=0x10330
16635201 init 1 16635200 10
16635600 state 1 pc=0x10334
16635601 init 1 16635600 10
16636000 state 1 pc=0x10338
16636001 init 1 16636000 10
16636400 state 1 pc=0x1033C
16636401 init 1 16636400 10
16636800 state 1 pc=0x10340
16636801 init 1 16636800 10
16637200 state 1 pc=0x10344
16637201 init 1 16637200 10
16637600 state 1 pc=0x10348
16637601 init 1 16637600 10
16638000 state 1 pc=0x1034C
16638001 init 1 16638000 10
16638400 state 1 pc=0x10350
16638401 init 1 16638400 10
16638800 state 1 pc=0x10354
16638801 init 1 16638800 10
16639200 state 1 pc=0x10358
16639201 init 1 16639200 10
16639600 state 1 pc=0x1035C
16639601 init 1 16639600 10
16640000 state 1 pc=0x10360
16640001 init 1 16640000 10
16640400 state 1 pc=0x10364
16640401 init 1 16640400 10
16640800 state 1 pc=0x10368
16640801 init 1 16640800 10
16641200 state 1 pc=0x1036C
16641201 init 1 16641200 10
16641600 state 1 pc=0x10370
16641601 init 1 16641600 10
16642000 state 1 pc=0x10374
16642001 init 1 16642000 10
16642400 state 1 pc=0x10378
16642401 init 1 16642400 10
16642800 state 1 pc=0x1037C
16642801 init 1 16642800 10
16643200 state 1 pc=0x10380
16643201 init 1 16643200 10
16643600 state 1 pc=0x10384
16643601 init 1 16643600 10
16644000 state 1 pc=0x10388
16644001 init 1 16644000 10
16644400 state 1 pc=0x1038C
16644401 init 1 16644400 10
16644800 state 1 pc=0x10390
16644801 init 1 16644800 10
16645200 state 1 pc=0x10394
16645201 init 1 16645200 10
16645600 state 1 pc=0x10398
16645601 init 1 16645600 10
16646000 state 1 pc=0x1039C
16646001 init 1 16646000 10
16646400 state 1 pc=0x103A0
16646401 init 1 16646400 10
16646800 state 1 pc=0x103A4
16646801 init 1 16646800 10
16647200 state 1 pc=0x103A8
16647201 init 1 16647200 10
16647600 state 1 pc=0x103AC
16647601 init 1 16647600 10
16648000 state 1 pc=0x103B0
16648001 init 1 16648000 10
16648400 state 1 pc=0x103B4
16648401 init 1 16648400 10
16648800 state 1 pc=0x103B8
16648801 init 1 16648800 10
16649200 state 1 pc=0x103BC
16649201 init 1 16649200 10
16649600 state 1 pc=0x103C0
16649601 init 1 16649600 10
16650000 state 1 pc=0x103C4
16650001 init 1 16650000 10
16650400 state 1 pc=0x103C8
16650401 init 1 16650400 10
16650800 state 1 pc=0x103CC
16650801 init 1 16650800 10
16651200 state 1 pc=0x103D0
16651201 init 1 16651200 10
16651600 state 1 pc=0x103D4
16651601 init 1 16651600 10
16652000 state 1 pc=0x103D8
16652001 init 1 16652000 10
16652400 state 1 pc=0x103DC
16652401 init 1 16652400 10
16652800 state 1 pc=0x103E0
16652801 init 1 16652800 10
16653200 state 1 pc=0x103E4
16653201 init 1 16653200 10
16653600 state 1 pc=0x103E8
16653601 init 1 16653600 10
16654000 state 1 pc=0x103EC
16654001 init 1 16654000 10
16654400 state 1 pc=0x103F0
16654401 init 1 16654400 10
16654800 state 1 pc=0x103F4
16654801 init 1 16654800 10
16655200 state 1 pc=0x103F8
16655201 init 1 16655200 10
16655600 state 1 pc=0x103FC
16655601 init 1 16655600 10
16656000 state 1 pc=0x10400
16656001 init 1 16656000 10
16656400 state 1 pc=0x10404
16656401 init 1 16656400 10
16656800 state 1 pc=0x10408
16656801 init 1 16656800 10
16657200 state 1 pc=0x1040C
16657201 init 1 16657200 10
16657600 state 1 pc=0x10410
16657601 init 1 16657600 10
16658000 state 1 pc=0x10414
16658001 init 1 16658000 10
16658400 state 1 pc=0x10418
16658401 init 1 16658400 10
16658800 state 1 pc=0x1041C
16658801 init 1 16658800 10
16659200 state 1 pc=0x10420
16659201 init 1 16659200 10
16659600 state 1 pc=0x10424
16659601 init 1 16659600 10
16660000 state 1 pc=0x10428
16660001 init 1 16660000 10
16660400 state 1 pc=0x1042C
16660401 init 1 16660400 10
16660800 state 1 pc=0x10430
16660801 init 1 16660800 10
16661200 state 1 pc=0x10434
16661201 init 1 16661200 10
16661600 state 1 pc=0x10438
16661601 init 1 16661600 10
16662000 state 1 pc=0x1043C
16662001 init 1 16662000 10
16662400 state 1 pc=0x10440
16662401 init 1 16662400 10
16662800 state 1 pc=0x10444
16662801 init 1 16662800 10
16663200 state 1 pc=0x10448
16663201 init 1 16663200 10
16663600 state 1 pc=0x1044C
16663601 init 1 16663600 10
16664000 state 1 pc=0x10450
16664001 init 1 16664000 10
16664400 state 1 pc=0x10454
16664401 init 1 16664400 10
16664800 state 1 pc=0x10458
16664801 init 1 16664800 10
16665200 state 1 pc=0x1045C
16665201 init 1 16665200 10
16665600 state 1 pc=0x10460
16665601 init 1 16665600 10
16666000 state 1 pc=0x10464
16666001 init 1 16666000 10
16666400 state 1 pc=0x10468
16666401 init 1 16666400 10
16666800 state 1 pc=0x1046C
16666801 init 1 16666800 10
16667200 state 1 pc=0x10470
16667201 init 1 16667200 10
16667600 state 1 pc=0x10474
16667601 init 1 16667600 10
16668000 state 1 pc=0x10478
16668001 init 1 16668000 10
16668400 state 1 pc=0x1047C
16668401 init 1 16668400 10
16668800 state 1 pc=0x10480
16668801 init 1 16668800 10
16669200 state 1 pc=0x10484
16669201 init 1 16669200 10
16669600 state 1 pc=0x10488
16669601 init 1 16669600 10
16670000 state 1 pc=0x1048C
16670001 init 1 16670000 10
16670400 state 1 pc=0x10490
16670401 init 1 16670400 10
16670800 state 1 pc=0x10494
16670801 init 1 16670800 10
16671200 state 1 pc=0x10498
16671201 init 1 16671200 10
16671600 state 1 pc=0x1049C
16671601 init 1 16671600 10
16672000 state 1 pc=0x104A0
16672001 init 1 16672000 10
16672400 state 1 pc=0x104A4
16672401 init 1 16672400 10
16672800 state 1 pc=0x104A8
16672801 init 1 16672800 10
16673200 state 1 pc=0x104AC
16673201 init 1 16673200 10
16673600 state 1 pc=0x104B0
16673601 init 1 16673600 10
16674000 state 1 pc=0x104B4
16674001 init 1 16674000 10
16674400 state 1 pc=0x104B8
16674401 init 1 16674400 10
16674800 state 1 pc=0x104BC
16674801 init 1 16674800 10
16675200 state 1 pc=0x104C0
16675201 init 1 16675200 10
16675600 state 1 pc=0x104C4
16675601 init 1 16675600 10
16676000 state 1 pc=0x104C8
16676001 init 1 16676000 10
16676400 state 1 pc=0x104CC
16676401 init 1 16676400 10
16676800 state 1 pc=0x104D0
16676801 init 1 16676800 10
16677200 state 1 pc=0x104D4
16677201 init 1 16677200 10
16677600 state 1 pc=0x104D8
16677601 init 1 16677600 10
16678000 state 1 pc=0x104DC
16678001 init 1 16678000 10
16678400 state 1 pc=0x104E0
16678401 init 1 16678400 10
16678800 state 1 pc=0x104E4
16678801 init 1 16678800 10
16679200 state 1 pc=0x104E8
16679201 init 1 16679200 10
16679600 state 1 pc=0x104EC
16679601 init 1 16679600 10
16680000 state 1 pc=0x104F0
16680001 init 1 16680000 10
16680400 state 1 pc=0x104F4
16680401 init 1 16680400 10
16680800 state 1 pc=0x104F8
16680801 init 1 16680800 10
16681200 state 1 pc=0x104FC
16681201 init 1 16681200 10
16681600 state 1 pc=0x10500
16681601 init 1 16681600 10
16682000 state 1 pc=0x10504
16682001 init 1 16682000 10
16682400 state 1 pc=0x10508
16682401 init 1 16682400 10
16682800 state 1 pc=0x1050C
16682801 init 1 16682800 10
16683200 state 1 pc=0x10510
16683201 init 1 16683200 10
16683600 state 1 pc=0x10514
16683601 init 1 16683600 10
16684000 state 1 pc=0x10518
16684001 init 1 16684000 10
16684400 state 1 pc=0x1051C
16684401 init 1 16684400 10
16684800 state 1 pc=0x10520
16684801 init 1 16684800 10
16685200 state 1 pc=0x10524
16685201 init 1 16685200 10
16685600 state 1 pc=0x10528
16685601 init 1 16685600 10
; 16686000 unreachable state at 1052C

16963200 state 5 memory-dump

; data segment

16963201 constd 4 8704 ; 0x2200 paddr, 0x11000 vaddr
16963202 constd 2 73736 ; 0x12008 word
16963203 write 5 16963200 16963201 16963202

; heap segment

17372800 constd 4 9216 ; 0x2400 paddr, 0x12000 vaddr
17372801 write 5 16963203 17372800 20
17373600 constd 4 9217 ; 0x2401 paddr, 0x12008 vaddr
17373601 write 5 17372801 17373600 20

; stack segment

17374400 constd 4 536870893 ; 0x1FFFFFED paddr, 0xFFFFFF68 vaddr
17374401 write 5 17373601 17374400 20
17375200 constd 4 536870894 ; 0x1FFFFFEE paddr, 0xFFFFFF70 vaddr
17375201 write 5 17374401 17375200 20
17376000 constd 4 536870895 ; 0x1FFFFFEF paddr, 0xFFFFFF78 vaddr
17376001 write 5 17375201 17376000 20
17376800 constd 4 536870896 ; 0x1FFFFFF0 paddr, 0xFFFFFF80 vaddr
17376801 constd 2 8 ; 0x8 word
17376802 write 5 17376001 17376800 17376801
17377600 constd 4 536870897 ; 0x1FFFFFF1 paddr, 0xFFFFFF88 vaddr
17377601 constd 2 69624 ; 0x10FF8 word
17377602 write 5 17376802 17377600 17377601
17378400 constd 4 536870898 ; 0x1FFFFFF2 paddr, 0xFFFFFF90 vaddr
17378401 constd 2 73728 ; 0x12000 word
17378402 write 5 17377602 17378400 17378401
17379200 constd 4 536870899 ; 0x1FFFFFF3 paddr, 0xFFFFFF98 vaddr
17379201 write 5 17378402 17379200 20
17380000 constd 4 536870900 ; 0x1FFFFFF4 paddr, 0xFFFFFFA0 vaddr
17380001 constd 2 65616 ; 0x10050 word
17380002 write 5 17379201 17380000 17380001
17380800 constd 4 536870901 ; 0x1FFFFFF5 paddr, 0xFFFFFFA8 vaddr
17380801 constd 2 1 ; 0x1 word
17380802 write 5 17380002 17380800 17380801
17381600 constd 4 536870902 ; 0x1FFFFFF6 paddr, 0xFFFFFFB0 vaddr
17381601 constd 2 4294967224 ; 0xFFFFFFB8 word
17381602 write 5 17380802 17381600 17381601
17382400 constd 4 536870903 ; 0x1FFFFFF7 paddr, 0xFFFFFFB8 vaddr
17382401 constd 2 4294967248 ; 0xFFFFFFD0 word
17382402 write 5 17381602 17382400 17382401
17383200 constd 4 536870904 ; 0x1FFFFFF8 paddr, 0xFFFFFFC0 vaddr
17383201 write 5 17382402 17383200 20
17384000 constd 4 536870905 ; 0x1FFFFFF9 paddr, 0xFFFFFFC8 vaddr
17384001 write 5 17383201 17384000 20
17384800 constd 4 536870906 ; 0x1FFFFFFA paddr, 0xFFFFFFD0 vaddr
17384801 constd 2 8315171517136730213 ; 0x73656C706D617865 word
17384802 write 5 17384001 17384800 17384801
17385600 constd 4 536870907 ; 0x1FFFFFFB paddr, 0xFFFFFFD8 vaddr
17385601 constd 2 7596569140001338159 ; 0x696C6F626D79732F word
17385602 write 5 17384802 17385600 17385601
17386400 constd 4 536870908 ; 0x1FFFFFFC paddr, 0xFFFFFFE0 vaddr
17386401 constd 2 8751179541578067811 ; 0x79726F6D656D2F63 word
17386402 write 5 17385602 17386400 17386401
17387200 constd 4 536870909 ; 0x1FFFFFFD paddr, 0xFFFFFFE8 vaddr
17387201 constd 2 3275088233324831021 ; 0x2D7373656363612D word
17387202 write 5 17386402 17387200 17387201
17388000 constd 4 536870910 ; 0x1FFFFFFE paddr, 0xFFFFFFF0 vaddr
17388001 constd 2 3687657741048439142 ; 0x332D312D6C696166 word
17388002 write 5 17387202 17388000 17388001
17388800 constd 4 536870911 ; 0x1FFFFFFF paddr, 0xFFFFFFF8 vaddr
17388801 constd 2 13510992162139701 ; 0x30002D00632E35 word
17388802 write 5 17388002 17388800 17388801

; 29-bit physical memory

20000000 state 5 physical-memory ; data, heap, stack segments
20000001 init 5 20000000 17388802 ; loading data, heap, stack segments into memory

; data flow

36561200 constd 2 65616 ; 0x10050
36561600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36561601 add 2 202 36561600
36561602 ite 2 16561600 36561601 202 ; 0x10050(~1): addi sp,sp,-8
36562000 slice 4 202 31 3
36562001 ite 2 16562000 202 30 ; for checking address validity
36562002 write 5 20000000 36562000 210
36562003 ite 5 16562000 36562002 20000000 ; 0x10054(~1): sd a0,0(sp)
36562400 slice 4 202 31 3
36562401 ite 2 16562400 202 36562001 ; for checking address validity
36562402 read 2 20000000 36562400
36562403 ite 2 16562400 36562402 210 ; 0x10058(~1): ld a0,0(sp)
36562800 constd 2 8 ; 0x8
36562801 add 2 202 36562800
36562802 ite 2 16562800 36562801 36561602 ; 0x1005C(~1): addi sp,sp,8
36563200 constd 2 93 ; 0x5D
36563201 ite 2 16563200 36563200 217 ; 0x10060(~1): addi a7,zero,93
36563600 ite 1 16563600 11 10 ; 0x10064(~1): ecall
36564000 slice 4 202 31 3
36564001 ite 2 16564000 202 36562401 ; for checking address validity
36564002 read 2 20000000 36564000
36564003 ite 2 16564000 36564002 36562403 ; 0x10068(~1): ld a0,0(sp)
36564400 constd 2 8 ; 0x8
36564401 add 2 202 36564400
36564402 ite 2 16564400 36564401 36562802 ; 0x1006C(~1): addi sp,sp,8
36564800 slice 4 202 31 3
36564801 ite 2 16564800 202 36564001 ; for checking address validity
36564802 read 2 20000000 36564800
36564803 ite 2 16564800 36564802 211 ; 0x10070(~1): ld a1,0(sp)
36565200 constd 2 8 ; 0x8
36565201 add 2 202 36565200
36565202 ite 2 16565200 36565201 36564402 ; 0x10074(~1): addi sp,sp,8
36565600 slice 4 202 31 3
36565601 ite 2 16565600 202 36564801 ; for checking address validity
36565602 read 2 20000000 36565600
36565603 ite 2 16565600 36565602 212 ; 0x10078(~1): ld a2,0(sp)
36566000 constd 2 8 ; 0x8
36566001 add 2 202 36566000
36566002 ite 2 16566000 36566001 36565202 ; 0x1007C(~1): addi sp,sp,8
36566400 constd 2 63 ; 0x3F
36566401 ite 2 16566400 36566400 36563201 ; 0x10080(~1): addi a7,zero,63
36566800 ite 1 16566800 11 36563600 ; 0x10084(~1): ecall
36567600 slice 4 202 31 3
36567601 ite 2 16567600 202 36565601 ; for checking address validity
36567602 read 2 20000000 36567600
36567603 ite 2 16567600 36567602 36564003 ; 0x1008C(~1): ld a0,0(sp)
36568000 constd 2 8 ; 0x8
36568001 add 2 202 36568000
36568002 ite 2 16568000 36568001 36566002 ; 0x10090(~1): addi sp,sp,8
36568400 slice 4 202 31 3
36568401 ite 2 16568400 202 36567601 ; for checking address validity
36568402 read 2 20000000 36568400
36568403 ite 2 16568400 36568402 36564803 ; 0x10094(~1): ld a1,0(sp)
36568800 constd 2 8 ; 0x8
36568801 add 2 202 36568800
36568802 ite 2 16568800 36568801 36568002 ; 0x10098(~1): addi sp,sp,8
36569200 slice 4 202 31 3
36569201 ite 2 16569200 202 36568401 ; for checking address validity
36569202 read 2 20000000 36569200
36569203 ite 2 16569200 36569202 36565603 ; 0x1009C(~1): ld a2,0(sp)
36569600 constd 2 8 ; 0x8
36569601 add 2 202 36569600
36569602 ite 2 16569600 36569601 36568802 ; 0x100A0(~1): addi sp,sp,8
36570000 constd 2 64 ; 0x40
36570001 ite 2 16570000 36570000 36566401 ; 0x100A4(~1): addi a7,zero,64
36570400 ite 1 16570400 11 36566800 ; 0x100A8(~1): ecall
36571200 slice 4 202 31 3
36571201 ite 2 16571200 202 36569201 ; for checking address validity
36571202 read 2 20000000 36571200
36571203 ite 2 16571200 36571202 36568403 ; 0x100B0(~1): ld a1,0(sp)
36571600 constd 2 8 ; 0x8
36571601 add 2 202 36571600
36571602 ite 2 16571600 36571601 36569602 ; 0x100B4(~1): addi sp,sp,8
36572000 slice 4 202 31 3
36572001 ite 2 16572000 202 36571201 ; for checking address validity
36572002 read 2 20000000 36572000
36572003 ite 2 16572000 36572002 36569203 ; 0x100B8(~1): ld a2,0(sp)
36572400 constd 2 8 ; 0x8
36572401 add 2 202 36572400
36572402 ite 2 16572400 36572401 36571602 ; 0x100BC(~1): addi sp,sp,8
36572800 slice 4 202 31 3
36572801 ite 2 16572800 202 36572001 ; for checking address validity
36572802 read 2 20000000 36572800
36572803 ite 2 16572800 36572802 213 ; 0x100C0(~1): ld a3,0(sp)
36573200 constd 2 8 ; 0x8
36573201 add 2 202 36573200
36573202 ite 2 16573200 36573201 36572402 ; 0x100C4(~1): addi sp,sp,8
36573600 constd 2 -100 ; 0xFFFFFFFFFFFFFF9C
36573601 ite 2 16573600 36573600 36567603 ; 0x100C8(~1): addi a0,zero,-100
36574000 constd 2 56 ; 0x38
36574001 ite 2 16574000 36574000 36570001 ; 0x100CC(~1): addi a7,zero,56
36574400 ite 1 16574400 11 36570400 ; 0x100D0(~1): ecall
36589200 constd 2 65896 ; 0x10168
36598800 slice 4 206 31 3
36598801 ite 2 16598800 206 36572801 ; for checking address validity
36598802 read 2 20000000 36598800
36598803 ite 2 16598800 36598802 206 ; 0x101C4(~13): ld t1,0(t1)
36599200 slice 4 205 31 3
36599201 ite 2 16599200 205 36598801 ; for checking address validity
36599202 write 5 20000000 36599200 206
36599203 ite 5 16599200 36599202 36562003 ; 0x101C8(~13): sd t1,0(t0)
36599600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36599601 add 2 208 36599600
36599602 slice 4 36599601 31 3
36599603 ite 2 16599600 36599601 36599201 ; for checking address validity
36599604 read 2 20000000 36599602
36599605 ite 2 16599600 36599604 205 ; 0x101CC(~14): ld t0,-16(s0)
36600000 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36600001 add 2 202 36600000
36600002 ite 2 16600000 36600001 36573202 ; 0x101D0(~14): addi sp,sp,-24
36600400 slice 4 202 31 3
36600401 ite 2 16600400 202 36599603 ; for checking address validity
36600402 write 5 20000000 36600400 205
36600403 ite 5 16600400 36600402 36599203 ; 0x101D4(~14): sd t0,0(sp)
36600800 constd 2 32768 ; 0x8 << 12
36600801 ite 2 16600800 36600800 36599605 ; 0x101D8(~14): lui t0,0x8
36601200 ite 2 16601200 205 36600801 ; 0x101DC(~14): addi t0,t0,0
36601600 constd 2 8 ; 0x8
36601601 add 2 202 36601600
36601602 slice 4 36601601 31 3
36601603 ite 2 16601600 36601601 36600401 ; for checking address validity
36601604 write 5 20000000 36601602 205
36601605 ite 5 16601600 36601604 36600403 ; 0x101E0(~14): sd t0,8(sp)
36602000 ite 2 16602000 200 36601200 ; 0x101E4(~14): addi t0,zero,0
36602400 constd 2 16 ; 0x10
36602401 add 2 202 36602400
36602402 slice 4 36602401 31 3
36602403 ite 2 16602400 36602401 36601603 ; for checking address validity
36602404 write 5 20000000 36602402 205
36602405 ite 5 16602400 36602404 36601605 ; 0x101E8(~14): sd t0,16(sp)
36602800 constd 2 66032 ; 0x101F0
36602801 ite 2 16602800 36602800 201 ; 0x101EC(~14): jal ra,-79
36603200 ite 2 16603200 200 36573601 ; 0x101F0(~14): addi a0,zero,0
36603600 ite 2 16603600 200 36602000 ; 0x101F4(~15): addi t0,zero,0
36604000 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36604001 add 2 202 36604000
36604002 ite 2 16604000 36604001 36600002 ; 0x101F8(~15): addi sp,sp,-24
36604400 slice 4 202 31 3
36604401 ite 2 16604400 202 36602403 ; for checking address validity
36604402 write 5 20000000 36604400 205
36604403 ite 5 16604400 36604402 36602405 ; 0x101FC(~15): sd t0,0(sp)
36604800 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36604801 add 2 208 36604800
36604802 slice 4 36604801 31 3
36604803 ite 2 16604800 36604801 36604401 ; for checking address validity
36604804 read 2 20000000 36604802
36604805 ite 2 16604800 36604804 36603600 ; 0x10200(~15): ld t0,-16(s0)
36605200 constd 2 8 ; 0x8
36605201 add 2 202 36605200
36605202 slice 4 36605201 31 3
36605203 ite 2 16605200 36605201 36604803 ; for checking address validity
36605204 write 5 20000000 36605202 205
36605205 ite 5 16605200 36605204 36604403 ; 0x10204(~15): sd t0,8(sp)
36605600 constd 2 1 ; 0x1
36605601 ite 2 16605600 36605600 36604805 ; 0x10208(~15): addi t0,zero,1
36606000 constd 2 16 ; 0x10
36606001 add 2 202 36606000
36606002 slice 4 36606001 31 3
36606003 ite 2 16606000 36606001 36605203 ; for checking address validity
36606004 write 5 20000000 36606002 205
36606005 ite 5 16606000 36606004 36605205 ; 0x1020C(~15): sd t0,16(sp)
36606400 constd 2 66068 ; 0x10214
36606401 ite 2 16606400 36606400 36602801 ; 0x10210(~15): jal ra,-106
36606800 ite 2 16606800 200 36603200 ; 0x10214(~15): addi a0,zero,0
36607200 constd 2 1 ; 0x1
36607201 ite 2 16607200 36607200 36605601 ; 0x10218(~16): addi t0,zero,1
36607600 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36607601 add 2 202 36607600
36607602 ite 2 16607600 36607601 36604002 ; 0x1021C(~16): addi sp,sp,-24
36608000 slice 4 202 31 3
36608001 ite 2 16608000 202 36606003 ; for checking address validity
36608002 write 5 20000000 36608000 205
36608003 ite 5 16608000 36608002 36606005 ; 0x10220(~16): sd t0,0(sp)
36608400 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36608401 add 2 208 36608400
36608402 slice 4 36608401 31 3
36608403 ite 2 16608400 36608401 36608001 ; for checking address validity
36608404 read 2 20000000 36608402
36608405 ite 2 16608400 36608404 36607201 ; 0x10224(~16): ld t0,-16(s0)
36608800 constd 2 8 ; 0x8
36608801 add 2 202 36608800
36608802 slice 4 36608801 31 3
36608803 ite 2 16608800 36608801 36608403 ; for checking address validity
36608804 write 5 20000000 36608802 205
36608805 ite 5 16608800 36608804 36608003 ; 0x10228(~16): sd t0,8(sp)
36609200 constd 2 1 ; 0x1
36609201 ite 2 16609200 36609200 36608405 ; 0x1022C(~16): addi t0,zero,1
36609600 constd 2 16 ; 0x10
36609601 add 2 202 36609600
36609602 slice 4 36609601 31 3
36609603 ite 2 16609600 36609601 36608803 ; for checking address validity
36609604 write 5 20000000 36609602 205
36609605 ite 5 16609600 36609604 36608805 ; 0x10230(~16): sd t0,16(sp)
36610000 constd 2 66104 ; 0x10238
36610001 ite 2 16610000 36610000 36606401 ; 0x10234(~16): jal ra,-106
36610400 ite 2 16610400 200 36606800 ; 0x10238(~16): addi a0,zero,0
36610800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36610801 add 2 208 36610800
36610802 slice 4 36610801 31 3
36610803 ite 2 16610800 36610801 36609603 ; for checking address validity
36610804 read 2 20000000 36610802
36610805 ite 2 16610800 36610804 36609201 ; 0x1023C(~20): ld t0,-8(s0)
36611200 constd 2 4 ; 0x4
36611201 ite 2 16611200 36611200 36598803 ; 0x10240(~20): addi t1,zero,4
36611600 constd 2 1024 ; 0x400
36611601 ite 2 16611600 36611600 207 ; 0x10244(~20): addi t2,zero,1024
36612000 mul 2 206 207
36612001 ite 2 16612000 36612000 36611201 ; 0x10248(~20): mul t1,t1,t2
36612400 constd 2 1024 ; 0x400
36612401 ite 2 16612400 36612400 36611601 ; 0x1024C(~20): addi t2,zero,1024
36612800 mul 2 206 207
36612801 ite 2 16612800 36612800 36612001 ; 0x10250(~20): mul t1,t1,t2
36613200 constd 2 1024 ; 0x400
36613201 ite 2 16613200 36613200 36612401 ; 0x10254(~20): addi t2,zero,1024
36613600 mul 2 206 207
36613601 ite 2 16613600 36613600 36612801 ; 0x10258(~20): mul t1,t1,t2
36614000 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36614001 add 2 208 36614000
36614002 slice 4 36614001 31 3
36614003 ite 2 16614000 36614001 36610803 ; for checking address validity
36614004 read 2 20000000 36614002
36614005 ite 2 16614000 36614004 36613201 ; 0x1025C(~20): ld t2,-8(s0)
36614400 sub 2 206 207
36614401 ite 2 16614400 36614400 36613601 ; 0x10260(~20): sub t1,t1,t2
36614800 constd 2 8 ; 0x8
36614801 ite 2 16614800 36614800 36614005 ; 0x10264(~20): addi t2,zero,8
36615200 ite 2 16615200 207 21 ; record t2 for checking division by zero
36615201 udiv 2 206 207
36615202 ite 2 16615200 36615201 36614401 ; 0x10268(~20): divu t1,t1,t2
36615600 constd 2 8 ; 0x8
36615601 ite 2 16615600 36615600 36614801 ; 0x1026C(~20): addi t2,zero,8
36616000 mul 2 206 207
36616001 ite 2 16616000 36616000 36615202 ; 0x10270(~20): mul t1,t1,t2
36616400 add 2 205 206
36616401 ite 2 16616400 36616400 36610805 ; 0x10274(~20): add t0,t0,t1
36616800 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36616801 add 2 208 36616800
36616802 slice 4 36616801 31 3
36616803 ite 2 16616800 36616801 36614003 ; for checking address validity
36616804 write 5 20000000 36616802 205
36616805 ite 5 16616800 36616804 36609605 ; 0x10278(~20): sd t0,-16(s0)
36617200 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36617201 add 2 208 36617200
36617202 slice 4 36617201 31 3
36617203 ite 2 16617200 36617201 36616803 ; for checking address validity
36617204 read 2 20000000 36617202
36617205 ite 2 16617200 36617204 36616401 ; 0x1027C(~22): ld t0,-16(s0)
36617600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36617601 add 2 208 36617600
36617602 slice 4 36617601 31 3
36617603 ite 2 16617600 36617601 36617203 ; for checking address validity
36617604 read 2 20000000 36617602
36617605 ite 2 16617600 36617604 36616001 ; 0x10280(~22): ld t1,-16(s0)
36618000 slice 4 206 31 3
36618001 ite 2 16618000 206 36617603 ; for checking address validity
36618002 read 2 20000000 36618000
36618003 ite 2 16618000 36618002 36617605 ; 0x10284(~22): ld t1,0(t1)
36618400 slice 4 205 31 3
36618401 ite 2 16618400 205 36618001 ; for checking address validity
36618402 write 5 20000000 36618400 206
36618403 ite 5 16618400 36618402 36616805 ; 0x10288(~22): sd t1,0(t0)
36618800 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36618801 add 2 208 36618800
36618802 slice 4 36618801 31 3
36618803 ite 2 16618800 36618801 36618401 ; for checking address validity
36618804 read 2 20000000 36618802
36618805 ite 2 16618800 36618804 36617205 ; 0x1028C(~23): ld t0,-16(s0)
36619200 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36619201 add 2 202 36619200
36619202 ite 2 16619200 36619201 36607602 ; 0x10290(~23): addi sp,sp,-24
36619600 slice 4 202 31 3
36619601 ite 2 16619600 202 36618803 ; for checking address validity
36619602 write 5 20000000 36619600 205
36619603 ite 5 16619600 36619602 36618403 ; 0x10294(~23): sd t0,0(sp)
36620000 constd 2 32768 ; 0x8 << 12
36620001 ite 2 16620000 36620000 36618805 ; 0x10298(~23): lui t0,0x8
36620400 ite 2 16620400 205 36620001 ; 0x1029C(~23): addi t0,t0,0
36620800 constd 2 8 ; 0x8
36620801 add 2 202 36620800
36620802 slice 4 36620801 31 3
36620803 ite 2 16620800 36620801 36619601 ; for checking address validity
36620804 write 5 20000000 36620802 205
36620805 ite 5 16620800 36620804 36619603 ; 0x102A0(~23): sd t0,8(sp)
36621200 ite 2 16621200 200 36620400 ; 0x102A4(~23): addi t0,zero,0
36621600 constd 2 16 ; 0x10
36621601 add 2 202 36621600
36621602 slice 4 36621601 31 3
36621603 ite 2 16621600 36621601 36620803 ; for checking address validity
36621604 write 5 20000000 36621602 205
36621605 ite 5 16621600 36621604 36620805 ; 0x102A8(~23): sd t0,16(sp)
36622000 constd 2 66224 ; 0x102B0
36622001 ite 2 16622000 36622000 36610001 ; 0x102AC(~23): jal ra,-127
36622400 ite 2 16622400 200 36610400 ; 0x102B0(~23): addi a0,zero,0
36622800 ite 2 16622800 200 36621200 ; 0x102B4(~24): addi t0,zero,0
36623200 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36623201 add 2 202 36623200
36623202 ite 2 16623200 36623201 36619202 ; 0x102B8(~24): addi sp,sp,-24
36623600 slice 4 202 31 3
36623601 ite 2 16623600 202 36621603 ; for checking address validity
36623602 write 5 20000000 36623600 205
36623603 ite 5 16623600 36623602 36621605 ; 0x102BC(~24): sd t0,0(sp)
36624000 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36624001 add 2 208 36624000
36624002 slice 4 36624001 31 3
36624003 ite 2 16624000 36624001 36623601 ; for checking address validity
36624004 read 2 20000000 36624002
36624005 ite 2 16624000 36624004 36622800 ; 0x102C0(~24): ld t0,-16(s0)
36624400 constd 2 8 ; 0x8
36624401 add 2 202 36624400
36624402 slice 4 36624401 31 3
36624403 ite 2 16624400 36624401 36624003 ; for checking address validity
36624404 write 5 20000000 36624402 205
36624405 ite 5 16624400 36624404 36623603 ; 0x102C4(~24): sd t0,8(sp)
36624800 constd 2 1 ; 0x1
36624801 ite 2 16624800 36624800 36624005 ; 0x102C8(~24): addi t0,zero,1
36625200 constd 2 16 ; 0x10
36625201 add 2 202 36625200
36625202 slice 4 36625201 31 3
36625203 ite 2 16625200 36625201 36624403 ; for checking address validity
36625204 write 5 20000000 36625202 205
36625205 ite 5 16625200 36625204 36624405 ; 0x102CC(~24): sd t0,16(sp)
36625600 constd 2 66260 ; 0x102D4
36625601 ite 2 16625600 36625600 36622001 ; 0x102D0(~24): jal ra,-154
36626000 ite 2 16626000 200 36622400 ; 0x102D4(~24): addi a0,zero,0
36626400 constd 2 1 ; 0x1
36626401 ite 2 16626400 36626400 36624801 ; 0x102D8(~25): addi t0,zero,1
36626800 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36626801 add 2 202 36626800
36626802 ite 2 16626800 36626801 36623202 ; 0x102DC(~25): addi sp,sp,-24
36627200 slice 4 202 31 3
36627201 ite 2 16627200 202 36625203 ; for checking address validity
36627202 write 5 20000000 36627200 205
36627203 ite 5 16627200 36627202 36625205 ; 0x102E0(~25): sd t0,0(sp)
36627600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36627601 add 2 208 36627600
36627602 slice 4 36627601 31 3
36627603 ite 2 16627600 36627601 36627201 ; for checking address validity
36627604 read 2 20000000 36627602
36627605 ite 2 16627600 36627604 36626401 ; 0x102E4(~25): ld t0,-16(s0)
36628000 constd 2 8 ; 0x8
36628001 add 2 202 36628000
36628002 slice 4 36628001 31 3
36628003 ite 2 16628000 36628001 36627603 ; for checking address validity
36628004 write 5 20000000 36628002 205
36628005 ite 5 16628000 36628004 36627203 ; 0x102E8(~25): sd t0,8(sp)
36628400 constd 2 1 ; 0x1
36628401 ite 2 16628400 36628400 36627605 ; 0x102EC(~25): addi t0,zero,1
36628800 constd 2 16 ; 0x10
36628801 add 2 202 36628800
36628802 slice 4 36628801 31 3
36628803 ite 2 16628800 36628801 36628003 ; for checking address validity
36628804 write 5 20000000 36628802 205
36628805 ite 5 16628800 36628804 36628005 ; 0x102F0(~25): sd t0,16(sp)
36629200 constd 2 66296 ; 0x102F8
36629201 ite 2 16629200 36629200 36625601 ; 0x102F4(~25): jal ra,-154
36629600 ite 2 16629600 200 36626000 ; 0x102F8(~25): addi a0,zero,0
36630000 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36630001 add 2 208 36630000
36630002 slice 4 36630001 31 3
36630003 ite 2 16630000 36630001 36628803 ; for checking address validity
36630004 read 2 20000000 36630002
36630005 ite 2 16630000 36630004 36628401 ; 0x102FC(~29): ld t0,-8(s0)
36630400 constd 2 1 ; 0x1
36630401 ite 2 16630400 36630400 36618003 ; 0x10300(~29): addi t1,zero,1
36630800 add 2 205 206
36630801 ite 2 16630800 36630800 36630005 ; 0x10304(~29): add t0,t0,t1
36631200 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36631201 add 2 208 36631200
36631202 slice 4 36631201 31 3
36631203 ite 2 16631200 36631201 36630003 ; for checking address validity
36631204 write 5 20000000 36631202 205
36631205 ite 5 16631200 36631204 36628805 ; 0x10308(~29): sd t0,-16(s0)
36631600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36631601 add 2 208 36631600
36631602 slice 4 36631601 31 3
36631603 ite 2 16631600 36631601 36631203 ; for checking address validity
36631604 read 2 20000000 36631602
36631605 ite 2 16631600 36631604 36630801 ; 0x1030C(~31): ld t0,-16(s0)
36632000 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36632001 add 2 208 36632000
36632002 slice 4 36632001 31 3
36632003 ite 2 16632000 36632001 36631603 ; for checking address validity
36632004 read 2 20000000 36632002
36632005 ite 2 16632000 36632004 36630401 ; 0x10310(~31): ld t1,-16(s0)
36632400 slice 4 206 31 3
36632401 ite 2 16632400 206 36632003 ; for checking address validity
36632402 read 2 20000000 36632400
36632403 ite 2 16632400 36632402 36632005 ; 0x10314(~31): ld t1,0(t1)
36632800 slice 4 205 31 3
36632801 ite 2 16632800 205 36632401 ; for checking address validity
36632802 write 5 20000000 36632800 206
36632803 ite 5 16632800 36632802 36631205 ; 0x10318(~31): sd t1,0(t0)
36633200 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36633201 add 2 208 36633200
36633202 slice 4 36633201 31 3
36633203 ite 2 16633200 36633201 36632801 ; for checking address validity
36633204 read 2 20000000 36633202
36633205 ite 2 16633200 36633204 36631605 ; 0x1031C(~32): ld t0,-16(s0)
36633600 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36633601 add 2 202 36633600
36633602 ite 2 16633600 36633601 36626802 ; 0x10320(~32): addi sp,sp,-24
36634000 slice 4 202 31 3
36634001 ite 2 16634000 202 36633203 ; for checking address validity
36634002 write 5 20000000 36634000 205
36634003 ite 5 16634000 36634002 36632803 ; 0x10324(~32): sd t0,0(sp)
36634400 constd 2 32768 ; 0x8 << 12
36634401 ite 2 16634400 36634400 36633205 ; 0x10328(~32): lui t0,0x8
36634800 ite 2 16634800 205 36634401 ; 0x1032C(~32): addi t0,t0,0
36635200 constd 2 8 ; 0x8
36635201 add 2 202 36635200
36635202 slice 4 36635201 31 3
36635203 ite 2 16635200 36635201 36634001 ; for checking address validity
36635204 write 5 20000000 36635202 205
36635205 ite 5 16635200 36635204 36634003 ; 0x10330(~32): sd t0,8(sp)
36635600 ite 2 16635600 200 36634800 ; 0x10334(~32): addi t0,zero,0
36636000 constd 2 16 ; 0x10
36636001 add 2 202 36636000
36636002 slice 4 36636001 31 3
36636003 ite 2 16636000 36636001 36635203 ; for checking address validity
36636004 write 5 20000000 36636002 205
36636005 ite 5 16636000 36636004 36635205 ; 0x10338(~32): sd t0,16(sp)
36636400 constd 2 66368 ; 0x10340
36636401 ite 2 16636400 36636400 36629201 ; 0x1033C(~32): jal ra,-163
36636800 ite 2 16636800 200 36629600 ; 0x10340(~32): addi a0,zero,0
36637200 ite 2 16637200 200 36635600 ; 0x10344(~33): addi t0,zero,0
36637600 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36637601 add 2 202 36637600
36637602 ite 2 16637600 36637601 36633602 ; 0x10348(~33): addi sp,sp,-24
36638000 slice 4 202 31 3
36638001 ite 2 16638000 202 36636003 ; for checking address validity
36638002 write 5 20000000 36638000 205
36638003 ite 5 16638000 36638002 36636005 ; 0x1034C(~33): sd t0,0(sp)
36638400 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36638401 add 2 208 36638400
36638402 slice 4 36638401 31 3
36638403 ite 2 16638400 36638401 36638001 ; for checking address validity
36638404 read 2 20000000 36638402
36638405 ite 2 16638400 36638404 36637200 ; 0x10350(~33): ld t0,-16(s0)
36638800 constd 2 8 ; 0x8
36638801 add 2 202 36638800
36638802 slice 4 36638801 31 3
36638803 ite 2 16638800 36638801 36638403 ; for checking address validity
36638804 write 5 20000000 36638802 205
36638805 ite 5 16638800 36638804 36638003 ; 0x10354(~33): sd t0,8(sp)
36639200 constd 2 1 ; 0x1
36639201 ite 2 16639200 36639200 36638405 ; 0x10358(~33): addi t0,zero,1
36639600 constd 2 16 ; 0x10
36639601 add 2 202 36639600
36639602 slice 4 36639601 31 3
36639603 ite 2 16639600 36639601 36638803 ; for checking address validity
36639604 write 5 20000000 36639602 205
36639605 ite 5 16639600 36639604 36638805 ; 0x1035C(~33): sd t0,16(sp)
36640000 constd 2 66404 ; 0x10364
36640001 ite 2 16640000 36640000 36636401 ; 0x10360(~33): jal ra,-190
36640400 ite 2 16640400 200 36636800 ; 0x10364(~33): addi a0,zero,0
36640800 constd 2 1 ; 0x1
36640801 ite 2 16640800 36640800 36639201 ; 0x10368(~34): addi t0,zero,1
36641200 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36641201 add 2 202 36641200
36641202 ite 2 16641200 36641201 36637602 ; 0x1036C(~34): addi sp,sp,-24
36641600 slice 4 202 31 3
36641601 ite 2 16641600 202 36639603 ; for checking address validity
36641602 write 5 20000000 36641600 205
36641603 ite 5 16641600 36641602 36639605 ; 0x10370(~34): sd t0,0(sp)
36642000 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36642001 add 2 208 36642000
36642002 slice 4 36642001 31 3
36642003 ite 2 16642000 36642001 36641601 ; for checking address validity
36642004 read 2 20000000 36642002
36642005 ite 2 16642000 36642004 36640801 ; 0x10374(~34): ld t0,-16(s0)
36642400 constd 2 8 ; 0x8
36642401 add 2 202 36642400
36642402 slice 4 36642401 31 3
36642403 ite 2 16642400 36642401 36642003 ; for checking address validity
36642404 write 5 20000000 36642402 205
36642405 ite 5 16642400 36642404 36641603 ; 0x10378(~34): sd t0,8(sp)
36642800 constd 2 1 ; 0x1
36642801 ite 2 16642800 36642800 36642005 ; 0x1037C(~34): addi t0,zero,1
36643200 constd 2 16 ; 0x10
36643201 add 2 202 36643200
36643202 slice 4 36643201 31 3
36643203 ite 2 16643200 36643201 36642403 ; for checking address validity
36643204 write 5 20000000 36643202 205
36643205 ite 5 16643200 36643204 36642405 ; 0x10380(~34): sd t0,16(sp)
36643600 constd 2 66440 ; 0x10388
36643601 ite 2 16643600 36643600 36640001 ; 0x10384(~34): jal ra,-190
36644000 ite 2 16644000 200 36640400 ; 0x10388(~34): addi a0,zero,0
36644400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36644401 add 2 208 36644400
36644402 slice 4 36644401 31 3
36644403 ite 2 16644400 36644401 36643203 ; for checking address validity
36644404 read 2 20000000 36644402
36644405 ite 2 16644400 36644404 36642801 ; 0x1038C(~38): ld t0,-8(s0)
36644800 constd 2 1 ; 0x1
36644801 ite 2 16644800 36644800 36632403 ; 0x10390(~38): addi t1,zero,1
36645200 constd 2 8 ; 0x8
36645201 ite 2 16645200 36645200 36615601 ; 0x10394(~38): addi t2,zero,8
36645600 mul 2 206 207
36645601 ite 2 16645600 36645600 36644801 ; 0x10398(~38): mul t1,t1,t2
36646000 add 2 205 206
36646001 ite 2 16646000 36646000 36644405 ; 0x1039C(~38): add t0,t0,t1
36646400 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36646401 add 2 208 36646400
36646402 slice 4 36646401 31 3
36646403 ite 2 16646400 36646401 36644403 ; for checking address validity
36646404 write 5 20000000 36646402 205
36646405 ite 5 16646400 36646404 36643205 ; 0x103A0(~38): sd t0,-16(s0)
36646800 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36646801 add 2 208 36646800
36646802 slice 4 36646801 31 3
36646803 ite 2 16646800 36646801 36646403 ; for checking address validity
36646804 read 2 20000000 36646802
36646805 ite 2 16646800 36646804 36646001 ; 0x103A4(~40): ld t0,-16(s0)
36647200 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36647201 add 2 208 36647200
36647202 slice 4 36647201 31 3
36647203 ite 2 16647200 36647201 36646803 ; for checking address validity
36647204 read 2 20000000 36647202
36647205 ite 2 16647200 36647204 36645601 ; 0x103A8(~40): ld t1,-16(s0)
36647600 slice 4 206 31 3
36647601 ite 2 16647600 206 36647203 ; for checking address validity
36647602 read 2 20000000 36647600
36647603 ite 2 16647600 36647602 36647205 ; 0x103AC(~40): ld t1,0(t1)
36648000 slice 4 205 31 3
36648001 ite 2 16648000 205 36647601 ; for checking address validity
36648002 write 5 20000000 36648000 206
36648003 ite 5 16648000 36648002 36646405 ; 0x103B0(~40): sd t1,0(t0)
36648400 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36648401 add 2 208 36648400
36648402 slice 4 36648401 31 3
36648403 ite 2 16648400 36648401 36648001 ; for checking address validity
36648404 read 2 20000000 36648402
36648405 ite 2 16648400 36648404 36646805 ; 0x103B4(~41): ld t0,-16(s0)
36648800 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36648801 add 2 202 36648800
36648802 ite 2 16648800 36648801 36641202 ; 0x103B8(~41): addi sp,sp,-24
36649200 slice 4 202 31 3
36649201 ite 2 16649200 202 36648403 ; for checking address validity
36649202 write 5 20000000 36649200 205
36649203 ite 5 16649200 36649202 36648003 ; 0x103BC(~41): sd t0,0(sp)
36649600 constd 2 32768 ; 0x8 << 12
36649601 ite 2 16649600 36649600 36648405 ; 0x103C0(~41): lui t0,0x8
36650000 ite 2 16650000 205 36649601 ; 0x103C4(~41): addi t0,t0,0
36650400 constd 2 8 ; 0x8
36650401 add 2 202 36650400
36650402 slice 4 36650401 31 3
36650403 ite 2 16650400 36650401 36649201 ; for checking address validity
36650404 write 5 20000000 36650402 205
36650405 ite 5 16650400 36650404 36649203 ; 0x103C8(~41): sd t0,8(sp)
36650800 ite 2 16650800 200 36650000 ; 0x103CC(~41): addi t0,zero,0
36651200 constd 2 16 ; 0x10
36651201 add 2 202 36651200
36651202 slice 4 36651201 31 3
36651203 ite 2 16651200 36651201 36650403 ; for checking address validity
36651204 write 5 20000000 36651202 205
36651205 ite 5 16651200 36651204 36650405 ; 0x103D0(~41): sd t0,16(sp)
36651600 constd 2 66520 ; 0x103D8
36651601 ite 2 16651600 36651600 36643601 ; 0x103D4(~41): jal ra,-201
36652000 ite 2 16652000 200 36644000 ; 0x103D8(~41): addi a0,zero,0
36652400 ite 2 16652400 200 36650800 ; 0x103DC(~42): addi t0,zero,0
36652800 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36652801 add 2 202 36652800
36652802 ite 2 16652800 36652801 36648802 ; 0x103E0(~42): addi sp,sp,-24
36653200 slice 4 202 31 3
36653201 ite 2 16653200 202 36651203 ; for checking address validity
36653202 write 5 20000000 36653200 205
36653203 ite 5 16653200 36653202 36651205 ; 0x103E4(~42): sd t0,0(sp)
36653600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36653601 add 2 208 36653600
36653602 slice 4 36653601 31 3
36653603 ite 2 16653600 36653601 36653201 ; for checking address validity
36653604 read 2 20000000 36653602
36653605 ite 2 16653600 36653604 36652400 ; 0x103E8(~42): ld t0,-16(s0)
36654000 constd 2 8 ; 0x8
36654001 add 2 202 36654000
36654002 slice 4 36654001 31 3
36654003 ite 2 16654000 36654001 36653603 ; for checking address validity
36654004 write 5 20000000 36654002 205
36654005 ite 5 16654000 36654004 36653203 ; 0x103EC(~42): sd t0,8(sp)
36654400 constd 2 1 ; 0x1
36654401 ite 2 16654400 36654400 36653605 ; 0x103F0(~42): addi t0,zero,1
36654800 constd 2 16 ; 0x10
36654801 add 2 202 36654800
36654802 slice 4 36654801 31 3
36654803 ite 2 16654800 36654801 36654003 ; for checking address validity
36654804 write 5 20000000 36654802 205
36654805 ite 5 16654800 36654804 36654005 ; 0x103F4(~42): sd t0,16(sp)
36655200 constd 2 66556 ; 0x103FC
36655201 ite 2 16655200 36655200 36651601 ; 0x103F8(~42): jal ra,-228
36655600 ite 2 16655600 200 36652000 ; 0x103FC(~42): addi a0,zero,0
36656000 constd 2 1 ; 0x1
36656001 ite 2 16656000 36656000 36654401 ; 0x10400(~43): addi t0,zero,1
36656400 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36656401 add 2 202 36656400
36656402 ite 2 16656400 36656401 36652802 ; 0x10404(~43): addi sp,sp,-24
36656800 slice 4 202 31 3
36656801 ite 2 16656800 202 36654803 ; for checking address validity
36656802 write 5 20000000 36656800 205
36656803 ite 5 16656800 36656802 36654805 ; 0x10408(~43): sd t0,0(sp)
36657200 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36657201 add 2 208 36657200
36657202 slice 4 36657201 31 3
36657203 ite 2 16657200 36657201 36656801 ; for checking address validity
36657204 read 2 20000000 36657202
36657205 ite 2 16657200 36657204 36656001 ; 0x1040C(~43): ld t0,-16(s0)
36657600 constd 2 8 ; 0x8
36657601 add 2 202 36657600
36657602 slice 4 36657601 31 3
36657603 ite 2 16657600 36657601 36657203 ; for checking address validity
36657604 write 5 20000000 36657602 205
36657605 ite 5 16657600 36657604 36656803 ; 0x10410(~43): sd t0,8(sp)
36658000 constd 2 1 ; 0x1
36658001 ite 2 16658000 36658000 36657205 ; 0x10414(~43): addi t0,zero,1
36658400 constd 2 16 ; 0x10
36658401 add 2 202 36658400
36658402 slice 4 36658401 31 3
36658403 ite 2 16658400 36658401 36657603 ; for checking address validity
36658404 write 5 20000000 36658402 205
36658405 ite 5 16658400 36658404 36657605 ; 0x10418(~43): sd t0,16(sp)
36658800 constd 2 66592 ; 0x10420
36658801 ite 2 16658800 36658800 36655201 ; 0x1041C(~43): jal ra,-228
36659200 ite 2 16659200 200 36655600 ; 0x10420(~43): addi a0,zero,0
36659600 ite 2 16659600 200 36658001 ; 0x10424(~46): addi t0,zero,0
36660000 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36660001 add 2 202 36660000
36660002 ite 2 16660000 36660001 36656402 ; 0x10428(~46): addi sp,sp,-24
36660400 slice 4 202 31 3
36660401 ite 2 16660400 202 36658403 ; for checking address validity
36660402 write 5 20000000 36660400 205
36660403 ite 5 16660400 36660402 36658405 ; 0x1042C(~46): sd t0,0(sp)
36660800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36660801 add 2 208 36660800
36660802 slice 4 36660801 31 3
36660803 ite 2 16660800 36660801 36660401 ; for checking address validity
36660804 read 2 20000000 36660802
36660805 ite 2 16660800 36660804 36659600 ; 0x10430(~46): ld t0,-8(s0)
36661200 constd 2 8 ; 0x8
36661201 add 2 202 36661200
36661202 slice 4 36661201 31 3
36661203 ite 2 16661200 36661201 36660803 ; for checking address validity
36661204 write 5 20000000 36661202 205
36661205 ite 5 16661200 36661204 36660403 ; 0x10434(~46): sd t0,8(sp)
36661600 constd 2 9 ; 0x9
36661601 ite 2 16661600 36661600 36660805 ; 0x10438(~46): addi t0,zero,9
36662000 constd 2 16 ; 0x10
36662001 add 2 202 36662000
36662002 slice 4 36662001 31 3
36662003 ite 2 16662000 36662001 36661203 ; for checking address validity
36662004 write 5 20000000 36662002 205
36662005 ite 5 16662000 36662004 36661205 ; 0x1043C(~46): sd t0,16(sp)
36662400 constd 2 66628 ; 0x10444
36662401 ite 2 16662400 36662400 36658801 ; 0x10440(~46): jal ra,-246
36662800 ite 2 16662800 200 36659200 ; 0x10444(~46): addi a0,zero,0
36663200 constd 2 1 ; 0x1
36663201 ite 2 16663200 36663200 36661601 ; 0x10448(~47): addi t0,zero,1
36663600 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36663601 add 2 202 36663600
36663602 ite 2 16663600 36663601 36660002 ; 0x1044C(~47): addi sp,sp,-24
36664000 slice 4 202 31 3
36664001 ite 2 16664000 202 36662003 ; for checking address validity
36664002 write 5 20000000 36664000 205
36664003 ite 5 16664000 36664002 36662005 ; 0x10450(~47): sd t0,0(sp)
36664400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36664401 add 2 208 36664400
36664402 slice 4 36664401 31 3
36664403 ite 2 16664400 36664401 36664001 ; for checking address validity
36664404 read 2 20000000 36664402
36664405 ite 2 16664400 36664404 36663201 ; 0x10454(~47): ld t0,-8(s0)
36664800 constd 2 8 ; 0x8
36664801 add 2 202 36664800
36664802 slice 4 36664801 31 3
36664803 ite 2 16664800 36664801 36664403 ; for checking address validity
36664804 write 5 20000000 36664802 205
36664805 ite 5 16664800 36664804 36664003 ; 0x10458(~47): sd t0,8(sp)
36665200 constd 2 9 ; 0x9
36665201 ite 2 16665200 36665200 36664405 ; 0x1045C(~47): addi t0,zero,9
36665600 constd 2 16 ; 0x10
36665601 add 2 202 36665600
36665602 slice 4 36665601 31 3
36665603 ite 2 16665600 36665601 36664803 ; for checking address validity
36665604 write 5 20000000 36665602 205
36665605 ite 5 16665600 36665604 36664805 ; 0x10460(~47): sd t0,16(sp)
36666000 constd 2 66664 ; 0x10468
36666001 ite 2 16666000 36666000 36662401 ; 0x10464(~47): jal ra,-246
36666400 ite 2 16666400 200 36662800 ; 0x10468(~47): addi a0,zero,0
36666800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36666801 add 2 208 36666800
36666802 slice 4 36666801 31 3
36666803 ite 2 16666800 36666801 36665603 ; for checking address validity
36666804 read 2 20000000 36666802
36666805 ite 2 16666800 36666804 36665201 ; 0x1046C(~51): ld t0,-8(s0)
36667200 constd 2 1 ; 0x1
36667201 ite 2 16667200 36667200 36647603 ; 0x10470(~51): addi t1,zero,1
36667600 sub 2 200 206
36667601 ite 2 16667600 36667600 36667201 ; 0x10474(~51): sub t1,zero,t1
36668000 constd 2 8 ; 0x8
36668001 ite 2 16668000 36668000 36645201 ; 0x10478(~51): addi t2,zero,8
36668400 mul 2 206 207
36668401 ite 2 16668400 36668400 36667601 ; 0x1047C(~51): mul t1,t1,t2
36668800 add 2 205 206
36668801 ite 2 16668800 36668800 36666805 ; 0x10480(~51): add t0,t0,t1
36669200 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36669201 add 2 208 36669200
36669202 slice 4 36669201 31 3
36669203 ite 2 16669200 36669201 36666803 ; for checking address validity
36669204 write 5 20000000 36669202 205
36669205 ite 5 16669200 36669204 36665605 ; 0x10484(~51): sd t0,-16(s0)
36669600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36669601 add 2 208 36669600
36669602 slice 4 36669601 31 3
36669603 ite 2 16669600 36669601 36669203 ; for checking address validity
36669604 read 2 20000000 36669602
36669605 ite 2 16669600 36669604 36668801 ; 0x10488(~53): ld t0,-16(s0)
36670000 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36670001 add 2 208 36670000
36670002 slice 4 36670001 31 3
36670003 ite 2 16670000 36670001 36669603 ; for checking address validity
36670004 read 2 20000000 36670002
36670005 ite 2 16670000 36670004 36668401 ; 0x1048C(~53): ld t1,-16(s0)
36670400 slice 4 206 31 3
36670401 ite 2 16670400 206 36670003 ; for checking address validity
36670402 read 2 20000000 36670400
36670403 ite 2 16670400 36670402 36670005 ; 0x10490(~53): ld t1,0(t1)
36670800 slice 4 205 31 3
36670801 ite 2 16670800 205 36670401 ; for checking address validity
36670802 write 5 20000000 36670800 206
36670803 ite 5 16670800 36670802 36669205 ; 0x10494(~53): sd t1,0(t0)
36671200 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36671201 add 2 208 36671200
36671202 slice 4 36671201 31 3
36671203 ite 2 16671200 36671201 36670801 ; for checking address validity
36671204 read 2 20000000 36671202
36671205 ite 2 16671200 36671204 36669605 ; 0x10498(~54): ld t0,-16(s0)
36671600 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36671601 add 2 202 36671600
36671602 ite 2 16671600 36671601 36663602 ; 0x1049C(~54): addi sp,sp,-24
36672000 slice 4 202 31 3
36672001 ite 2 16672000 202 36671203 ; for checking address validity
36672002 write 5 20000000 36672000 205
36672003 ite 5 16672000 36672002 36670803 ; 0x104A0(~54): sd t0,0(sp)
36672400 constd 2 32768 ; 0x8 << 12
36672401 ite 2 16672400 36672400 36671205 ; 0x104A4(~54): lui t0,0x8
36672800 ite 2 16672800 205 36672401 ; 0x104A8(~54): addi t0,t0,0
36673200 constd 2 8 ; 0x8
36673201 add 2 202 36673200
36673202 slice 4 36673201 31 3
36673203 ite 2 16673200 36673201 36672001 ; for checking address validity
36673204 write 5 20000000 36673202 205
36673205 ite 5 16673200 36673204 36672003 ; 0x104AC(~54): sd t0,8(sp)
36673600 ite 2 16673600 200 36672800 ; 0x104B0(~54): addi t0,zero,0
36674000 constd 2 16 ; 0x10
36674001 add 2 202 36674000
36674002 slice 4 36674001 31 3
36674003 ite 2 16674000 36674001 36673203 ; for checking address validity
36674004 write 5 20000000 36674002 205
36674005 ite 5 16674000 36674004 36673205 ; 0x104B4(~54): sd t0,16(sp)
36674400 constd 2 66748 ; 0x104BC
36674401 ite 2 16674400 36674400 36666001 ; 0x104B8(~54): jal ra,-258
36674800 ite 2 16674800 200 36666400 ; 0x104BC(~54): addi a0,zero,0
36675200 ite 2 16675200 200 36673600 ; 0x104C0(~55): addi t0,zero,0
36675600 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36675601 add 2 202 36675600
36675602 ite 2 16675600 36675601 36671602 ; 0x104C4(~55): addi sp,sp,-24
36676000 slice 4 202 31 3
36676001 ite 2 16676000 202 36674003 ; for checking address validity
36676002 write 5 20000000 36676000 205
36676003 ite 5 16676000 36676002 36674005 ; 0x104C8(~55): sd t0,0(sp)
36676400 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36676401 add 2 208 36676400
36676402 slice 4 36676401 31 3
36676403 ite 2 16676400 36676401 36676001 ; for checking address validity
36676404 read 2 20000000 36676402
36676405 ite 2 16676400 36676404 36675200 ; 0x104CC(~55): ld t0,-16(s0)
36676800 constd 2 8 ; 0x8
36676801 add 2 202 36676800
36676802 slice 4 36676801 31 3
36676803 ite 2 16676800 36676801 36676403 ; for checking address validity
36676804 write 5 20000000 36676802 205
36676805 ite 5 16676800 36676804 36676003 ; 0x104D0(~55): sd t0,8(sp)
36677200 constd 2 1 ; 0x1
36677201 ite 2 16677200 36677200 36676405 ; 0x104D4(~55): addi t0,zero,1
36677600 constd 2 16 ; 0x10
36677601 add 2 202 36677600
36677602 slice 4 36677601 31 3
36677603 ite 2 16677600 36677601 36676803 ; for checking address validity
36677604 write 5 20000000 36677602 205
36677605 ite 5 16677600 36677604 36676805 ; 0x104D8(~55): sd t0,16(sp)
36678000 constd 2 66784 ; 0x104E0
36678001 ite 2 16678000 36678000 36674401 ; 0x104DC(~55): jal ra,-285
36678400 ite 2 16678400 200 36674800 ; 0x104E0(~55): addi a0,zero,0
36678800 constd 2 1 ; 0x1
36678801 ite 2 16678800 36678800 36677201 ; 0x104E4(~56): addi t0,zero,1
36679200 constd 2 -24 ; 0xFFFFFFFFFFFFFFE8
36679201 add 2 202 36679200
36679202 ite 2 16679200 36679201 36675602 ; 0x104E8(~56): addi sp,sp,-24
36679600 slice 4 202 31 3
36679601 ite 2 16679600 202 36677603 ; for checking address validity
36679602 write 5 20000000 36679600 205
36679603 ite 5 16679600 36679602 36677605 ; 0x104EC(~56): sd t0,0(sp)
36680000 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36680001 add 2 208 36680000
36680002 slice 4 36680001 31 3
36680003 ite 2 16680000 36680001 36679601 ; for checking address validity
36680004 read 2 20000000 36680002
36680005 ite 2 16680000 36680004 36678801 ; 0x104F0(~56): ld t0,-16(s0)
36680400 constd 2 8 ; 0x8
36680401 add 2 202 36680400
36680402 slice 4 36680401 31 3
36680403 ite 2 16680400 36680401 36680003 ; for checking address validity
36680404 write 5 20000000 36680402 205
36680405 ite 5 16680400 36680404 36679603 ; 0x104F4(~56): sd t0,8(sp)
36680800 constd 2 1 ; 0x1
36680801 ite 2 16680800 36680800 36680005 ; 0x104F8(~56): addi t0,zero,1
36681200 constd 2 16 ; 0x10
36681201 add 2 202 36681200
36681202 slice 4 36681201 31 3
36681203 ite 2 16681200 36681201 36680403 ; for checking address validity
36681204 write 5 20000000 36681202 205
36681205 ite 5 16681200 36681204 36680405 ; 0x104FC(~56): sd t0,16(sp)
36681600 constd 2 66820 ; 0x10504
36681601 ite 2 16681600 36681600 36678001 ; 0x10500(~56): jal ra,-285
36682000 ite 2 16682000 200 36678400 ; 0x10504(~56): addi a0,zero,0
36682400 ite 2 16682400 200 36680801 ; 0x10508(~58): addi t0,zero,0
36682800 ite 2 16682800 205 36682000 ; 0x1050C(~58): addi a0,t0,0
36683600 ite 2 16683600 208 36679202 ; 0x10514(~59): addi sp,s0,0
36684000 slice 4 202 31 3
36684001 ite 2 16684000 202 36681203 ; for checking address validity
36684002 read 2 20000000 36684000
36684003 ite 2 16684000 36684002 208 ; 0x10518(~59): ld s0,0(sp)
36684400 constd 2 8 ; 0x8
36684401 add 2 202 36684400
36684402 ite 2 16684400 36684401 36683600 ; 0x1051C(~59): addi sp,sp,8
36684800 slice 4 202 31 3
36684801 ite 2 16684800 202 36684001 ; for checking address validity
36684802 read 2 20000000 36684800
36684803 ite 2 16684800 36684802 36681601 ; 0x10520(~59): ld ra,0(sp)
36685200 constd 2 8 ; 0x8
36685201 add 2 202 36685200
36685202 ite 2 16685200 36685201 36684402 ; 0x10524(~59): addi sp,sp,8

; syscalls

40000000 constd 2 93 ; SYSCALL_EXIT
40000001 constd 2 63 ; SYSCALL_READ
40000002 constd 2 64 ; SYSCALL_WRITE
40000003 constd 2 56 ; SYSCALL_OPENAT
40000004 constd 2 214 ; SYSCALL_BRK

40000010 eq 1 217 40000000 ; $a7 == SYSCALL_EXIT
40000011 eq 1 217 40000001 ; $a7 == SYSCALL_READ
40000012 eq 1 217 40000002 ; $a7 == SYSCALL_WRITE
40000013 eq 1 217 40000003 ; $a7 == SYSCALL_OPENAT
40000014 eq 1 217 40000004 ; $a7 == SYSCALL_BRK

41000000 and 1 36574400 40000010 ; exit ecall is active
41000001 ite 1 60 40000010 41000000 ; stay in kernel mode indefinitely if exit ecall is active

42000000 and 1 36574400 40000011 ; read ecall is active
42000001 ite 2 42000000 211 36684801 ; $a1 is start address of buffer for checking address validity
42000002 ite 1 42000000 11 41000001 ; go into kernel mode if read ecall is active
42000003 ite 2 42000000 20 36682800 ; set $a0 = 0 bytes if read ecall is active
42000004 sub 2 212 210 ; $a2 - $a0
42000005 ugte 1 42000004 28 ; $a2 - $a0 >= 8 bytes
42000006 ite 2 42000005 28 42000004 ; read 8 bytes if $a2 - $a0 >= 8 bytes, or else $a2 - $a0 bytes
42000007 eq 1 42000006 22 ; increment == 2
42000008 ite 2 42000007 92 91 ; unsigned-extended 2-byte input if increment == 2, or else unsigned-extended 1-byte input
42000009 eq 1 42000006 23 ; increment == 3
42000010 ite 2 42000009 93 42000008 ; unsigned-extended 3-byte input if increment == 3
42000011 eq 1 42000006 24 ; increment == 4
42000012 ite 2 42000011 94 42000010 ; unsigned-extended 4-byte input if increment == 4
42000013 eq 1 42000006 25 ; increment == 5
42000014 ite 2 42000013 95 42000012 ; unsigned-extended 5-byte input if increment == 5
42000015 eq 1 42000006 26 ; increment == 6
42000016 ite 2 42000015 96 42000014 ; unsigned-extended 6-byte input if increment == 6
42000017 eq 1 42000006 27 ; increment == 7
42000018 ite 2 42000017 97 42000016 ; unsigned-extended 7-byte input if increment == 7
42000019 eq 1 42000006 28 ; increment == 8
42000020 ite 2 42000019 98 42000018 ; 8-byte input if increment == 8
42000021 add 2 211 210 ; $a1 + $a0
42000022 slice 4 42000021 31 3
42000023 write 5 20000000 42000022 42000020 ; memory[$a1 + $a0] = input
42000024 ult 1 210 212 ; $a0 < $a2
42000025 and 1 40000011 42000024 ; $a7 == SYSCALL_READ and $a0 < $a2
42000026 and 1 60 42000025 ; read ecall is in kernel mode and not done yet
42000027 ugt 1 42000006 20 ; increment > 0
42000028 and 1 42000026 42000027 ; read ecall is in kernel mode and not done yet and increment > 0
42000029 ite 5 42000028 42000023 36681205 ; read input into memory[$a1 + $a0]
42000030 add 2 210 42000006 ; $a0 + increment
42000031 ite 2 42000026 42000030 42000003 ; set $a0 = $a0 + increment if read ecall is in kernel mode and not done yet
42000032 ite 1 42000026 11 42000002 ; stay in kernel mode if read ecall is in kernel mode and not done yet

43000000 and 1 36574400 40000012 ; write ecall is active
43000001 ite 2 43000000 211 42000001 ; $a1 is start address of buffer for checking address validity
43000002 ite 2 43000000 212 42000031 ; set $a0 = $a2 if write ecall is active

44000000 and 1 36574400 40000013 ; openat ecall is active
44000001 ite 2 44000000 211 43000001 ; $a1 is start address of buffer for checking address validity
44000002 state 2 fd-bump-pointer
44000003 init 2 44000002 21 ; initial fd-bump-pointer is 1 (file descriptor bump pointer)
44000004 inc 2 44000002
44000005 ite 2 44000000 44000004 44000002 ; fd-bump-pointer + 1 if openat ecall is active
44000006 next 2 44000002 44000005 ; increment fd-bump-pointer if openat ecall is active
44000007 ite 2 44000000 44000004 43000002 ; set $a0 = fd-bump-pointer + 1 if openat ecall is active

45000000 and 1 36574400 40000014 ; brk ecall is active
45000001 state 2 brk-bump-pointer
45000002 init 2 45000001 33 ; current program break
45000003 ulte 1 45000001 210 ; brk <= $a0
45000004 ult 1 210 202 ; $a0 < $sp
45000005 and 1 45000003 45000004 ; brk <= $a0 < $sp
45000006 and 2 210 27 ; reset all but 3 LSBs of $a0
45000007 eq 1 45000006 20 ; 3 LSBs of $a0 == 0 ($a0 is word-aligned)
45000008 and 1 45000005 45000007 ; brk <= $a0 < $sp and $a0 is word-aligned ($a0 is valid)
45000009 and 1 45000000 45000008 ; brk ecall is active and $a0 is valid
45000010 ite 2 45000009 210 45000001 ; brk = $a0 if brk ecall is active and $a0 is valid
45000011 next 2 45000001 45000010 ; set brk = $a0 if brk ecall is active and $a0 is valid
45000012 not 1 45000008 ; $a0 is invalid
45000013 and 1 45000000 45000012 ; brk ecall is active and $a0 is invalid
45000014 ite 2 45000013 45000001 44000007 ; set $a0 = brk if brk ecall is active and $a0 is invalid

46000000 next 1 60 42000032 ; updating kernel-mode flag

; control flow

56561600 not 2 21 ; jalr 66856[0x10528](~59)
56561601 and 2 201 56561600
56561602 eq 1 56561601 36561200
56561603 and 1 16685600 56561602
56561604 next 1 16561600 56561603 ; ->65616[0x10050](~1)
; 65616[0x10050](~1)
56562000 next 1 16562000 16561600 ; ->65620[0x10054](~1)
; 65620[0x10054](~1)
56562400 next 1 16562400 16562000 ; ->65624[0x10058](~1)
; 65624[0x10058](~1)
56562800 next 1 16562800 16562400 ; ->65628[0x1005C](~1)
; 65628[0x1005C](~1)
56563200 next 1 16563200 16562800 ; ->65632[0x10060](~1)
; 65632[0x10060](~1)
56563600 next 1 16563600 16563200 ; ->65636[0x10064](~1)
; jal 66780[0x104DC](~55)
; jal 66624[0x10440](~46)
56564000 ite 1 16662400 11 16678000
; jal 66552[0x103F8](~42)
56564001 ite 1 16655200 11 56564000
; jal 66400[0x10360](~33)
56564002 ite 1 16640000 11 56564001
; jal 66256[0x102D0](~24)
56564003 ite 1 16625600 11 56564002
; jal 66064[0x10210](~15)
56564004 ite 1 16606400 11 56564003
56564005 state 1 kernel-mode-pc-flag-65636[0x10064](~1)
56564006 init 1 56564005 10 ; ecall is initially inactive
56564007 ite 1 56564005 60 16563600 ; activate ecall and keep active while in kernel mode
56564008 next 1 56564005 56564007 ; keep ecall active while in kernel mode
56564009 and 1 56564005 62 ; ecall is active but not in kernel mode anymore
56564010 ite 1 56564009 11 56564004
56564011 next 1 16564000 56564010 ; ->65640[0x10068](~1)
; 65640[0x10068](~1)
56564400 next 1 16564400 16564000 ; ->65644[0x1006C](~1)
; 65644[0x1006C](~1)
56564800 next 1 16564800 16564400 ; ->65648[0x10070](~1)
; 65648[0x10070](~1)
56565200 next 1 16565200 16564800 ; ->65652[0x10074](~1)
; 65652[0x10074](~1)
56565600 next 1 16565600 16565200 ; ->65656[0x10078](~1)
; 65656[0x10078](~1)
56566000 next 1 16566000 16565600 ; ->65660[0x1007C](~1)
; 65660[0x1007C](~1)
56566400 next 1 16566400 16566000 ; ->65664[0x10080](~1)
; 65664[0x10080](~1)
56566800 next 1 16566800 16566400 ; ->65668[0x10084](~1)
56567200 state 1 kernel-mode-pc-flag-65668[0x10084](~1)
56567201 init 1 56567200 10 ; ecall is initially inactive
56567202 ite 1 56567200 60 16566800 ; activate ecall and keep active while in kernel mode
56567203 next 1 56567200 56567202 ; keep ecall active while in kernel mode
56567204 and 1 56567200 62 ; ecall is active but not in kernel mode anymore
56567205 next 1 16567200 56567204 ; ->65672[0x10088](~1)
; jal 66816[0x10500](~56)
; jal 66660[0x10464](~47)
56567600 ite 1 16666000 11 16681600
; jal 66588[0x1041C](~43)
56567601 ite 1 16658800 11 56567600
; jal 66436[0x10384](~34)
56567602 ite 1 16643600 11 56567601
; jal 66292[0x102F4](~25)
56567603 ite 1 16629200 11 56567602
; jal 66100[0x10234](~16)
56567604 ite 1 16610000 11 56567603
56567605 next 1 16567600 56567604 ; ->65676[0x1008C](~1)
; 65676[0x1008C](~1)
56568000 next 1 16568000 16567600 ; ->65680[0x10090](~1)
; 65680[0x10090](~1)
56568400 next 1 16568400 16568000 ; ->65684[0x10094](~1)
; 65684[0x10094](~1)
56568800 next 1 16568800 16568400 ; ->65688[0x10098](~1)
; 65688[0x10098](~1)
56569200 next 1 16569200 16568800 ; ->65692[0x1009C](~1)
; 65692[0x1009C](~1)
56569600 next 1 16569600 16569200 ; ->65696[0x100A0](~1)
; 65696[0x100A0](~1)
56570000 next 1 16570000 16569600 ; ->65700[0x100A4](~1)
; 65700[0x100A4](~1)
56570400 next 1 16570400 16570000 ; ->65704[0x100A8](~1)
56570800 state 1 kernel-mode-pc-flag-65704[0x100A8](~1)
56570801 init 1 56570800 10 ; ecall is initially inactive
56570802 ite 1 56570800 60 16570400 ; activate ecall and keep active while in kernel mode
56570803 next 1 56570800 56570802 ; keep ecall active while in kernel mode
56570804 and 1 56570800 62 ; ecall is active but not in kernel mode anymore
56570805 next 1 16570800 56570804 ; ->65708[0x100AC](~1)
; jal 66744[0x104B8](~54)
; jal 66516[0x103D4](~41)
56571200 ite 1 16651600 11 16674400
; jal 66364[0x1033C](~32)
56571201 ite 1 16636400 11 56571200
; jal 66220[0x102AC](~23)
56571202 ite 1 16622000 11 56571201
; jal 66028[0x101EC](~14)
56571203 ite 1 16602800 11 56571202
56571204 next 1 16571200 56571203 ; ->65712[0x100B0](~1)
; 65712[0x100B0](~1)
56571600 next 1 16571600 16571200 ; ->65716[0x100B4](~1)
; 65716[0x100B4](~1)
56572000 next 1 16572000 16571600 ; ->65720[0x100B8](~1)
; 65720[0x100B8](~1)
56572400 next 1 16572400 16572000 ; ->65724[0x100BC](~1)
; 65724[0x100BC](~1)
56572800 next 1 16572800 16572400 ; ->65728[0x100C0](~1)
; 65728[0x100C0](~1)
56573200 next 1 16573200 16572800 ; ->65732[0x100C4](~1)
; 65732[0x100C4](~1)
56573600 next 1 16573600 16573200 ; ->65736[0x100C8](~1)
; 65736[0x100C8](~1)
56574000 next 1 16574000 16573600 ; ->65740[0x100CC](~1)
; 65740[0x100CC](~1)
56574400 next 1 16574400 16574000 ; ->65744[0x100D0](~1)
56574800 state 1 kernel-mode-pc-flag-65744[0x100D0](~1)
56574801 init 1 56574800 10 ; ecall is initially inactive
56574802 ite 1 56574800 60 16574400 ; activate ecall and keep active while in kernel mode
56574803 next 1 56574800 56574802 ; keep ecall active while in kernel mode
56574804 and 1 56574800 62 ; ecall is active but not in kernel mode anymore
56574805 next 1 16574800 56574804 ; ->65748[0x100D4](~1)
56598800 next 1 16598800 10 ; ->65988[0x101C4](~13)
; 65988[0x101C4](~13)
56599200 next 1 16599200 16598800 ; ->65992[0x101C8](~13)
; 65992[0x101C8](~13)
56599600 next 1 16599600 16599200 ; ->65996[0x101CC](~14)
; 65996[0x101CC](~14)
56600000 next 1 16600000 16599600 ; ->66000[0x101D0](~14)
; 66000[0x101D0](~14)
56600400 next 1 16600400 16600000 ; ->66004[0x101D4](~14)
; 66004[0x101D4](~14)
56600800 next 1 16600800 16600400 ; ->66008[0x101D8](~14)
; 66008[0x101D8](~14)
56601200 next 1 16601200 16600800 ; ->66012[0x101DC](~14)
; 66012[0x101DC](~14)
56601600 next 1 16601600 16601200 ; ->66016[0x101E0](~14)
; 66016[0x101E0](~14)
56602000 next 1 16602000 16601600 ; ->66020[0x101E4](~14)
; 66020[0x101E4](~14)
56602400 next 1 16602400 16602000 ; ->66024[0x101E8](~14)
; 66024[0x101E8](~14)
56602800 next 1 16602800 16602400 ; ->66028[0x101EC](~14)
56603200 not 2 21 ; jalr 65748[0x100D4](~1)
56603201 and 2 201 56603200
56603202 eq 1 56603201 36602800
56603203 and 1 16574800 56603202
56603204 next 1 16603200 56603203 ; ->66032[0x101F0](~14)
; 66032[0x101F0](~14)
56603600 next 1 16603600 16603200 ; ->66036[0x101F4](~15)
; 66036[0x101F4](~15)
56604000 next 1 16604000 16603600 ; ->66040[0x101F8](~15)
; 66040[0x101F8](~15)
56604400 next 1 16604400 16604000 ; ->66044[0x101FC](~15)
; 66044[0x101FC](~15)
56604800 next 1 16604800 16604400 ; ->66048[0x10200](~15)
; 66048[0x10200](~15)
56605200 next 1 16605200 16604800 ; ->66052[0x10204](~15)
; 66052[0x10204](~15)
56605600 next 1 16605600 16605200 ; ->66056[0x10208](~15)
; 66056[0x10208](~15)
56606000 next 1 16606000 16605600 ; ->66060[0x1020C](~15)
; 66060[0x1020C](~15)
56606400 next 1 16606400 16606000 ; ->66064[0x10210](~15)
56606800 not 2 21 ; jalr 65672[0x10088](~1)
56606801 and 2 201 56606800
56606802 eq 1 56606801 36606400
56606803 and 1 16567200 56606802
56606804 next 1 16606800 56606803 ; ->66068[0x10214](~15)
; 66068[0x10214](~15)
56607200 next 1 16607200 16606800 ; ->66072[0x10218](~16)
; 66072[0x10218](~16)
56607600 next 1 16607600 16607200 ; ->66076[0x1021C](~16)
; 66076[0x1021C](~16)
56608000 next 1 16608000 16607600 ; ->66080[0x10220](~16)
; 66080[0x10220](~16)
56608400 next 1 16608400 16608000 ; ->66084[0x10224](~16)
; 66084[0x10224](~16)
56608800 next 1 16608800 16608400 ; ->66088[0x10228](~16)
; 66088[0x10228](~16)
56609200 next 1 16609200 16608800 ; ->66092[0x1022C](~16)
; 66092[0x1022C](~16)
56609600 next 1 16609600 16609200 ; ->66096[0x10230](~16)
; 66096[0x10230](~16)
56610000 next 1 16610000 16609600 ; ->66100[0x10234](~16)
56610400 not 2 21 ; jalr 65708[0x100AC](~1)
56610401 and 2 201 56610400
56610402 eq 1 56610401 36610000
56610403 and 1 16570800 56610402
56610404 next 1 16610400 56610403 ; ->66104[0x10238](~16)
; 66104[0x10238](~16)
56610800 next 1 16610800 16610400 ; ->66108[0x1023C](~20)
; 66108[0x1023C](~20)
56611200 next 1 16611200 16610800 ; ->66112[0x10240](~20)
; 66112[0x10240](~20)
56611600 next 1 16611600 16611200 ; ->66116[0x10244](~20)
; 66116[0x10244](~20)
56612000 next 1 16612000 16611600 ; ->66120[0x10248](~20)
; 66120[0x10248](~20)
56612400 next 1 16612400 16612000 ; ->66124[0x1024C](~20)
; 66124[0x1024C](~20)
56612800 next 1 16612800 16612400 ; ->66128[0x10250](~20)
; 66128[0x10250](~20)
56613200 next 1 16613200 16612800 ; ->66132[0x10254](~20)
; 66132[0x10254](~20)
56613600 next 1 16613600 16613200 ; ->66136[0x10258](~20)
; 66136[0x10258](~20)
56614000 next 1 16614000 16613600 ; ->66140[0x1025C](~20)
; 66140[0x1025C](~20)
56614400 next 1 16614400 16614000 ; ->66144[0x10260](~20)
; 66144[0x10260](~20)
56614800 next 1 16614800 16614400 ; ->66148[0x10264](~20)
; 66148[0x10264](~20)
56615200 next 1 16615200 16614800 ; ->66152[0x10268](~20)
; 66152[0x10268](~20)
56615600 next 1 16615600 16615200 ; ->66156[0x1026C](~20)
; 66156[0x1026C](~20)
56616000 next 1 16616000 16615600 ; ->66160[0x10270](~20)
; 66160[0x10270](~20)
56616400 next 1 16616400 16616000 ; ->66164[0x10274](~20)
; 66164[0x10274](~20)
56616800 next 1 16616800 16616400 ; ->66168[0x10278](~20)
; 66168[0x10278](~20)
56617200 next 1 16617200 16616800 ; ->66172[0x1027C](~22)
; 66172[0x1027C](~22)
56617600 next 1 16617600 16617200 ; ->66176[0x10280](~22)
; 66176[0x10280](~22)
56618000 next 1 16618000 16617600 ; ->66180[0x10284](~22)
; 66180[0x10284](~22)
56618400 next 1 16618400 16618000 ; ->66184[0x10288](~22)
; 66184[0x10288](~22)
56618800 next 1 16618800 16618400 ; ->66188[0x1028C](~23)
; 66188[0x1028C](~23)
56619200 next 1 16619200 16618800 ; ->66192[0x10290](~23)
; 66192[0x10290](~23)
56619600 next 1 16619600 16619200 ; ->66196[0x10294](~23)
; 66196[0x10294](~23)
56620000 next 1 16620000 16619600 ; ->66200[0x10298](~23)
; 66200[0x10298](~23)
56620400 next 1 16620400 16620000 ; ->66204[0x1029C](~23)
; 66204[0x1029C](~23)
56620800 next 1 16620800 16620400 ; ->66208[0x102A0](~23)
; 66208[0x102A0](~23)
56621200 next 1 16621200 16620800 ; ->66212[0x102A4](~23)
; 66212[0x102A4](~23)
56621600 next 1 16621600 16621200 ; ->66216[0x102A8](~23)
; 66216[0x102A8](~23)
56622000 next 1 16622000 16621600 ; ->66220[0x102AC](~23)
56622400 not 2 21 ; jalr 65748[0x100D4](~1)
56622401 and 2 201 56622400
56622402 eq 1 56622401 36622000
56622403 and 1 16574800 56622402
56622404 next 1 16622400 56622403 ; ->66224[0x102B0](~23)
; 66224[0x102B0](~23)
56622800 next 1 16622800 16622400 ; ->66228[0x102B4](~24)
; 66228[0x102B4](~24)
56623200 next 1 16623200 16622800 ; ->66232[0x102B8](~24)
; 66232[0x102B8](~24)
56623600 next 1 16623600 16623200 ; ->66236[0x102BC](~24)
; 66236[0x102BC](~24)
56624000 next 1 16624000 16623600 ; ->66240[0x102C0](~24)
; 66240[0x102C0](~24)
56624400 next 1 16624400 16624000 ; ->66244[0x102C4](~24)
; 66244[0x102C4](~24)
56624800 next 1 16624800 16624400 ; ->66248[0x102C8](~24)
; 66248[0x102C8](~24)
56625200 next 1 16625200 16624800 ; ->66252[0x102CC](~24)
; 66252[0x102CC](~24)
56625600 next 1 16625600 16625200 ; ->66256[0x102D0](~24)
56626000 not 2 21 ; jalr 65672[0x10088](~1)
56626001 and 2 201 56626000
56626002 eq 1 56626001 36625600
56626003 and 1 16567200 56626002
56626004 next 1 16626000 56626003 ; ->66260[0x102D4](~24)
; 66260[0x102D4](~24)
56626400 next 1 16626400 16626000 ; ->66264[0x102D8](~25)
; 66264[0x102D8](~25)
56626800 next 1 16626800 16626400 ; ->66268[0x102DC](~25)
; 66268[0x102DC](~25)
56627200 next 1 16627200 16626800 ; ->66272[0x102E0](~25)
; 66272[0x102E0](~25)
56627600 next 1 16627600 16627200 ; ->66276[0x102E4](~25)
; 66276[0x102E4](~25)
56628000 next 1 16628000 16627600 ; ->66280[0x102E8](~25)
; 66280[0x102E8](~25)
56628400 next 1 16628400 16628000 ; ->66284[0x102EC](~25)
; 66284[0x102EC](~25)
56628800 next 1 16628800 16628400 ; ->66288[0x102F0](~25)
; 66288[0x102F0](~25)
56629200 next 1 16629200 16628800 ; ->66292[0x102F4](~25)
56629600 not 2 21 ; jalr 65708[0x100AC](~1)
56629601 and 2 201 56629600
56629602 eq 1 56629601 36629200
56629603 and 1 16570800 56629602
56629604 next 1 16629600 56629603 ; ->66296[0x102F8](~25)
; 66296[0x102F8](~25)
56630000 next 1 16630000 16629600 ; ->66300[0x102FC](~29)
; 66300[0x102FC](~29)
56630400 next 1 16630400 16630000 ; ->66304[0x10300](~29)
; 66304[0x10300](~29)
56630800 next 1 16630800 16630400 ; ->66308[0x10304](~29)
; 66308[0x10304](~29)
56631200 next 1 16631200 16630800 ; ->66312[0x10308](~29)
; 66312[0x10308](~29)
56631600 next 1 16631600 16631200 ; ->66316[0x1030C](~31)
; 66316[0x1030C](~31)
56632000 next 1 16632000 16631600 ; ->66320[0x10310](~31)
; 66320[0x10310](~31)
56632400 next 1 16632400 16632000 ; ->66324[0x10314](~31)
; 66324[0x10314](~31)
56632800 next 1 16632800 16632400 ; ->66328[0x10318](~31)
; 66328[0x10318](~31)
56633200 next 1 16633200 16632800 ; ->66332[0x1031C](~32)
; 66332[0x1031C](~32)
56633600 next 1 16633600 16633200 ; ->66336[0x10320](~32)
; 66336[0x10320](~32)
56634000 next 1 16634000 16633600 ; ->66340[0x10324](~32)
; 66340[0x10324](~32)
56634400 next 1 16634400 16634000 ; ->66344[0x10328](~32)
; 66344[0x10328](~32)
56634800 next 1 16634800 16634400 ; ->66348[0x1032C](~32)
; 66348[0x1032C](~32)
56635200 next 1 16635200 16634800 ; ->66352[0x10330](~32)
; 66352[0x10330](~32)
56635600 next 1 16635600 16635200 ; ->66356[0x10334](~32)
; 66356[0x10334](~32)
56636000 next 1 16636000 16635600 ; ->66360[0x10338](~32)
; 66360[0x10338](~32)
56636400 next 1 16636400 16636000 ; ->66364[0x1033C](~32)
56636800 not 2 21 ; jalr 65748[0x100D4](~1)
56636801 and 2 201 56636800
56636802 eq 1 56636801 36636400
56636803 and 1 16574800 56636802
56636804 next 1 16636800 56636803 ; ->66368[0x10340](~32)
; 66368[0x10340](~32)
56637200 next 1 16637200 16636800 ; ->66372[0x10344](~33)
; 66372[0x10344](~33)
56637600 next 1 16637600 16637200 ; ->66376[0x10348](~33)
; 66376[0x10348](~33)
56638000 next 1 16638000 16637600 ; ->66380[0x1034C](~33)
; 66380[0x1034C](~33)
56638400 next 1 16638400 16638000 ; ->66384[0x10350](~33)
; 66384[0x10350](~33)
56638800 next 1 16638800 16638400 ; ->66388[0x10354](~33)
; 66388[0x10354](~33)
56639200 next 1 16639200 16638800 ; ->66392[0x10358](~33)
; 66392[0x10358](~33)
56639600 next 1 16639600 16639200 ; ->66396[0x1035C](~33)
; 66396[0x1035C](~33)
56640000 next 1 16640000 16639600 ; ->66400[0x10360](~33)
56640400 not 2 21 ; jalr 65672[0x10088](~1)
56640401 and 2 201 56640400
56640402 eq 1 56640401 36640000
56640403 and 1 16567200 56640402
56640404 next 1 16640400 56640403 ; ->66404[0x10364](~33)
; 66404[0x10364](~33)
56640800 next 1 16640800 16640400 ; ->66408[0x10368](~34)
; 66408[0x10368](~34)
56641200 next 1 16641200 16640800 ; ->66412[0x1036C](~34)
; 66412[0x1036C](~34)
56641600 next 1 16641600 16641200 ; ->66416[0x10370](~34)
; 66416[0x10370](~34)
56642000 next 1 16642000 16641600 ; ->66420[0x10374](~34)
; 66420[0x10374](~34)
56642400 next 1 16642400 16642000 ; ->66424[0x10378](~34)
; 66424[0x10378](~34)
56642800 next 1 16642800 16642400 ; ->66428[0x1037C](~34)
; 66428[0x1037C](~34)
56643200 next 1 16643200 16642800 ; ->66432[0x10380](~34)
; 66432[0x10380](~34)
56643600 next 1 16643600 16643200 ; ->66436[0x10384](~34)
56644000 not 2 21 ; jalr 65708[0x100AC](~1)
56644001 and 2 201 56644000
56644002 eq 1 56644001 36643600
56644003 and 1 16570800 56644002
56644004 next 1 16644000 56644003 ; ->66440[0x10388](~34)
; 66440[0x10388](~34)
56644400 next 1 16644400 16644000 ; ->66444[0x1038C](~38)
; 66444[0x1038C](~38)
56644800 next 1 16644800 16644400 ; ->66448[0x10390](~38)
; 66448[0x10390](~38)
56645200 next 1 16645200 16644800 ; ->66452[0x10394](~38)
; 66452[0x10394](~38)
56645600 next 1 16645600 16645200 ; ->66456[0x10398](~38)
; 66456[0x10398](~38)
56646000 next 1 16646000 16645600 ; ->66460[0x1039C](~38)
; 66460[0x1039C](~38)
56646400 next 1 16646400 16646000 ; ->66464[0x103A0](~38)
; 66464[0x103A0](~38)
56646800 next 1 16646800 16646400 ; ->66468[0x103A4](~40)
; 66468[0x103A4](~40)
56647200 next 1 16647200 16646800 ; ->66472[0x103A8](~40)
; 66472[0x103A8](~40)
56647600 next 1 16647600 16647200 ; ->66476[0x103AC](~40)
; 66476[0x103AC](~40)
56648000 next 1 16648000 16647600 ; ->66480[0x103B0](~40)
; 66480[0x103B0](~40)
56648400 next 1 16648400 16648000 ; ->66484[0x103B4](~41)
; 66484[0x103B4](~41)
56648800 next 1 16648800 16648400 ; ->66488[0x103B8](~41)
; 66488[0x103B8](~41)
56649200 next 1 16649200 16648800 ; ->66492[0x103BC](~41)
; 66492[0x103BC](~41)
56649600 next 1 16649600 16649200 ; ->66496[0x103C0](~41)
; 66496[0x103C0](~41)
56650000 next 1 16650000 16649600 ; ->66500[0x103C4](~41)
; 66500[0x103C4](~41)
56650400 next 1 16650400 16650000 ; ->66504[0x103C8](~41)
; 66504[0x103C8](~41)
56650800 next 1 16650800 16650400 ; ->66508[0x103CC](~41)
; 66508[0x103CC](~41)
56651200 next 1 16651200 16650800 ; ->66512[0x103D0](~41)
; 66512[0x103D0](~41)
56651600 next 1 16651600 16651200 ; ->66516[0x103D4](~41)
56652000 not 2 21 ; jalr 65748[0x100D4](~1)
56652001 and 2 201 56652000
56652002 eq 1 56652001 36651600
56652003 and 1 16574800 56652002
56652004 next 1 16652000 56652003 ; ->66520[0x103D8](~41)
; 66520[0x103D8](~41)
56652400 next 1 16652400 16652000 ; ->66524[0x103DC](~42)
; 66524[0x103DC](~42)
56652800 next 1 16652800 16652400 ; ->66528[0x103E0](~42)
; 66528[0x103E0](~42)
56653200 next 1 16653200 16652800 ; ->66532[0x103E4](~42)
; 66532[0x103E4](~42)
56653600 next 1 16653600 16653200 ; ->66536[0x103E8](~42)
; 66536[0x103E8](~42)
56654000 next 1 16654000 16653600 ; ->66540[0x103EC](~42)
; 66540[0x103EC](~42)
56654400 next 1 16654400 16654000 ; ->66544[0x103F0](~42)
; 66544[0x103F0](~42)
56654800 next 1 16654800 16654400 ; ->66548[0x103F4](~42)
; 66548[0x103F4](~42)
56655200 next 1 16655200 16654800 ; ->66552[0x103F8](~42)
56655600 not 2 21 ; jalr 65672[0x10088](~1)
56655601 and 2 201 56655600
56655602 eq 1 56655601 36655200
56655603 and 1 16567200 56655602
56655604 next 1 16655600 56655603 ; ->66556[0x103FC](~42)
; 66556[0x103FC](~42)
56656000 next 1 16656000 16655600 ; ->66560[0x10400](~43)
; 66560[0x10400](~43)
56656400 next 1 16656400 16656000 ; ->66564[0x10404](~43)
; 66564[0x10404](~43)
56656800 next 1 16656800 16656400 ; ->66568[0x10408](~43)
; 66568[0x10408](~43)
56657200 next 1 16657200 16656800 ; ->66572[0x1040C](~43)
; 66572[0x1040C](~43)
56657600 next 1 16657600 16657200 ; ->66576[0x10410](~43)
; 66576[0x10410](~43)
56658000 next 1 16658000 16657600 ; ->66580[0x10414](~43)
; 66580[0x10414](~43)
56658400 next 1 16658400 16658000 ; ->66584[0x10418](~43)
; 66584[0x10418](~43)
56658800 next 1 16658800 16658400 ; ->66588[0x1041C](~43)
56659200 not 2 21 ; jalr 65708[0x100AC](~1)
56659201 and 2 201 56659200
56659202 eq 1 56659201 36658800
56659203 and 1 16570800 56659202
56659204 next 1 16659200 56659203 ; ->66592[0x10420](~43)
; 66592[0x10420](~43)
56659600 next 1 16659600 16659200 ; ->66596[0x10424](~46)
; 66596[0x10424](~46)
56660000 next 1 16660000 16659600 ; ->66600[0x10428](~46)
; 66600[0x10428](~46)
56660400 next 1 16660400 16660000 ; ->66604[0x1042C](~46)
; 66604[0x1042C](~46)
56660800 next 1 16660800 16660400 ; ->66608[0x10430](~46)
; 66608[0x10430](~46)
56661200 next 1 16661200 16660800 ; ->66612[0x10434](~46)
; 66612[0x10434](~46)
56661600 next 1 16661600 16661200 ; ->66616[0x10438](~46)
; 66616[0x10438](~46)
56662000 next 1 16662000 16661600 ; ->66620[0x1043C](~46)
; 66620[0x1043C](~46)
56662400 next 1 16662400 16662000 ; ->66624[0x10440](~46)
56662800 not 2 21 ; jalr 65672[0x10088](~1)
56662801 and 2 201 56662800
56662802 eq 1 56662801 36662400
56662803 and 1 16567200 56662802
56662804 next 1 16662800 56662803 ; ->66628[0x10444](~46)
; 66628[0x10444](~46)
56663200 next 1 16663200 16662800 ; ->66632[0x10448](~47)
; 66632[0x10448](~47)
56663600 next 1 16663600 16663200 ; ->66636[0x1044C](~47)
; 66636[0x1044C](~47)
56664000 next 1 16664000 16663600 ; ->66640[0x10450](~47)
; 66640[0x10450](~47)
56664400 next 1 16664400 16664000 ; ->66644[0x10454](~47)
; 66644[0x10454](~47)
56664800 next 1 16664800 16664400 ; ->66648[0x10458](~47)
; 66648[0x10458](~47)
56665200 next 1 16665200 16664800 ; ->66652[0x1045C](~47)
; 66652[0x1045C](~47)
56665600 next 1 16665600 16665200 ; ->66656[0x10460](~47)
; 66656[0x10460](~47)
56666000 next 1 16666000 16665600 ; ->66660[0x10464](~47)
56666400 not 2 21 ; jalr 65708[0x100AC](~1)
56666401 and 2 201 56666400
56666402 eq 1 56666401 36666000
56666403 and 1 16570800 56666402
56666404 next 1 16666400 56666403 ; ->66664[0x10468](~47)
; 66664[0x10468](~47)
56666800 next 1 16666800 16666400 ; ->66668[0x1046C](~51)
; 66668[0x1046C](~51)
56667200 next 1 16667200 16666800 ; ->66672[0x10470](~51)
; 66672[0x10470](~51)
56667600 next 1 16667600 16667200 ; ->66676[0x10474](~51)
; 66676[0x10474](~51)
56668000 next 1 16668000 16667600 ; ->66680[0x10478](~51)
; 66680[0x10478](~51)
56668400 next 1 16668400 16668000 ; ->66684[0x1047C](~51)
; 66684[0x1047C](~51)
56668800 next 1 16668800 16668400 ; ->66688[0x10480](~51)
; 66688[0x10480](~51)
56669200 next 1 16669200 16668800 ; ->66692[0x10484](~51)
; 66692[0x10484](~51)
56669600 next 1 16669600 16669200 ; ->66696[0x10488](~53)
; 66696[0x10488](~53)
56670000 next 1 16670000 16669600 ; ->66700[0x1048C](~53)
; 66700[0x1048C](~53)
56670400 next 1 16670400 16670000 ; ->66704[0x10490](~53)
; 66704[0x10490](~53)
56670800 next 1 16670800 16670400 ; ->66708[0x10494](~53)
; 66708[0x10494](~53)
56671200 next 1 16671200 16670800 ; ->66712[0x10498](~54)
; 66712[0x10498](~54)
56671600 next 1 16671600 16671200 ; ->66716[0x1049C](~54)
; 66716[0x1049C](~54)
56672000 next 1 16672000 16671600 ; ->66720[0x104A0](~54)
; 66720[0x104A0](~54)
56672400 next 1 16672400 16672000 ; ->66724[0x104A4](~54)
; 66724[0x104A4](~54)
56672800 next 1 16672800 16672400 ; ->66728[0x104A8](~54)
; 66728[0x104A8](~54)
56673200 next 1 16673200 16672800 ; ->66732[0x104AC](~54)
; 66732[0x104AC](~54)
56673600 next 1 16673600 16673200 ; ->66736[0x104B0](~54)
; 66736[0x104B0](~54)
56674000 next 1 16674000 16673600 ; ->66740[0x104B4](~54)
; 66740[0x104B4](~54)
56674400 next 1 16674400 16674000 ; ->66744[0x104B8](~54)
56674800 not 2 21 ; jalr 65748[0x100D4](~1)
56674801 and 2 201 56674800
56674802 eq 1 56674801 36674400
56674803 and 1 16574800 56674802
56674804 next 1 16674800 56674803 ; ->66748[0x104BC](~54)
; 66748[0x104BC](~54)
56675200 next 1 16675200 16674800 ; ->66752[0x104C0](~55)
; 66752[0x104C0](~55)
56675600 next 1 16675600 16675200 ; ->66756[0x104C4](~55)
; 66756[0x104C4](~55)
56676000 next 1 16676000 16675600 ; ->66760[0x104C8](~55)
; 66760[0x104C8](~55)
56676400 next 1 16676400 16676000 ; ->66764[0x104CC](~55)
; 66764[0x104CC](~55)
56676800 next 1 16676800 16676400 ; ->66768[0x104D0](~55)
; 66768[0x104D0](~55)
56677200 next 1 16677200 16676800 ; ->66772[0x104D4](~55)
; 66772[0x104D4](~55)
56677600 next 1 16677600 16677200 ; ->66776[0x104D8](~55)
; 66776[0x104D8](~55)
56678000 next 1 16678000 16677600 ; ->66780[0x104DC](~55)
56678400 not 2 21 ; jalr 65672[0x10088](~1)
56678401 and 2 201 56678400
56678402 eq 1 56678401 36678000
56678403 and 1 16567200 56678402
56678404 next 1 16678400 56678403 ; ->66784[0x104E0](~55)
; 66784[0x104E0](~55)
56678800 next 1 16678800 16678400 ; ->66788[0x104E4](~56)
; 66788[0x104E4](~56)
56679200 next 1 16679200 16678800 ; ->66792[0x104E8](~56)
; 66792[0x104E8](~56)
56679600 next 1 16679600 16679200 ; ->66796[0x104EC](~56)
; 66796[0x104EC](~56)
56680000 next 1 16680000 16679600 ; ->66800[0x104F0](~56)
; 66800[0x104F0](~56)
56680400 next 1 16680400 16680000 ; ->66804[0x104F4](~56)
; 66804[0x104F4](~56)
56680800 next 1 16680800 16680400 ; ->66808[0x104F8](~56)
; 66808[0x104F8](~56)
56681200 next 1 16681200 16680800 ; ->66812[0x104FC](~56)
; 66812[0x104FC](~56)
56681600 next 1 16681600 16681200 ; ->66816[0x10500](~56)
56682000 not 2 21 ; jalr 65708[0x100AC](~1)
56682001 and 2 201 56682000
56682002 eq 1 56682001 36681600
56682003 and 1 16570800 56682002
56682004 next 1 16682000 56682003 ; ->66820[0x10504](~56)
; 66820[0x10504](~56)
56682400 next 1 16682400 16682000 ; ->66824[0x10508](~58)
; 66824[0x10508](~58)
56682800 next 1 16682800 16682400 ; ->66828[0x1050C](~58)
; 66828[0x1050C](~58)
56683200 next 1 16683200 16682800 ; ->66832[0x10510](~58)
; jal 66832[0x10510](~58)
56683600 next 1 16683600 16683200 ; ->66836[0x10514](~59)
; 66836[0x10514](~59)
56684000 next 1 16684000 16683600 ; ->66840[0x10518](~59)
; 66840[0x10518](~59)
56684400 next 1 16684400 16684000 ; ->66844[0x1051C](~59)
; 66844[0x1051C](~59)
56684800 next 1 16684800 16684400 ; ->66848[0x10520](~59)
; 66848[0x10520](~59)
56685200 next 1 16685200 16684800 ; ->66852[0x10524](~59)
; 66852[0x10524](~59)
56685600 next 1 16685600 16685200 ; ->66856[0x10528](~59)

; updating registers

60000001 next 2 201 36684803 ra ; register $1
60000002 next 2 202 36685202 sp ; register $2
60000003 next 2 203 203 gp ; register $3
60000004 next 2 204 204 tp ; register $4
60000005 next 2 205 36682400 t0 ; register $5
60000006 next 2 206 36670403 t1 ; register $6
60000007 next 2 207 36668001 t2 ; register $7
60000008 next 2 208 36684003 s0 ; register $8
60000009 next 2 209 209 s1 ; register $9
60000010 next 2 210 45000014 a0 ; register $10
60000011 next 2 211 36571203 a1 ; register $11
60000012 next 2 212 36572003 a2 ; register $12
60000013 next 2 213 36572803 a3 ; register $13
60000014 next 2 214 214 a4 ; register $14
60000015 next 2 215 215 a5 ; register $15
60000016 next 2 216 216 a6 ; register $16
60000017 next 2 217 36574001 a7 ; register $17
60000018 next 2 218 218 s2 ; register $18
60000019 next 2 219 219 s3 ; register $19
60000020 next 2 220 220 s4 ; register $20
60000021 next 2 221 221 s5 ; register $21
60000022 next 2 222 222 s6 ; register $22
60000023 next 2 223 223 s7 ; register $23
60000024 next 2 224 224 s8 ; register $24
60000025 next 2 225 225 s9 ; register $25
60000026 next 2 226 226 s10 ; register $26
60000027 next 2 227 227 s11 ; register $27
60000028 next 2 228 228 t3 ; register $28
60000029 next 2 229 229 t4 ; register $29
60000030 next 2 230 230 t5 ; register $30
60000031 next 2 231 231 t6 ; register $31

; updating 29-bit physical memory

70000000 next 5 20000000 42000029 physical-memory

; checking syscall id

80000000 not 1 40000010 ; $a7 != SYSCALL_EXIT
80000001 not 1 40000011 ; $a7 != SYSCALL_READ
80000002 not 1 40000012 ; $a7 != SYSCALL_WRITE
80000003 not 1 40000013 ; $a7 != SYSCALL_OPENAT
80000004 not 1 40000014 ; $a7 != SYSCALL_BRK
80000005 and 1 80000000 80000001 ; ... and $a7 != SYSCALL_READ
80000006 and 1 80000005 80000002 ; ... and $a7 != SYSCALL_WRITE
80000007 and 1 80000006 80000003 ; ... and $a7 != SYSCALL_OPENAT
80000008 and 1 80000007 80000004 ; ... and $a7 != SYSCALL_BRK

80000009 and 1 36574400 80000008 ; ecall is active for invalid syscall id
80000010 bad 80000009 b0 ; invalid syscall id

; checking exit code

80000011 neq 1 210 20 ; $a0 != zero exit code
80000012 and 1 41000000 80000011 ; exit ecall is active with non-zero exit code
80000013 bad 80000012 b1 ; non-zero exit code

; checking division and remainder by zero

80000014 eq 1 36615200 20
80000015 bad 80000014 b2 ; division by zero

80000016 eq 1 21 20
80000017 bad 80000016 b3 ; remainder by zero

; checking address validity

; is start address of memory access word-aligned?

80000018 and 2 44000001 27 ; reset all but 3 LSBs of address
80000019 neq 1 80000018 20 ; 3 LSBs of address != 0 (address is not word-aligned)
80000020 bad 80000019 b4 ; word-unaligned memory access

; checking segmentation faults

; is start address of memory access in a valid segment?

80000021 ult 1 44000001 30 ; address < start of data segment
80000022 bad 80000021 b5 ; memory access below data segment
80000023 ugte 1 44000001 31 ; address >= end of data segment
80000024 ult 1 44000001 32 ; address < start of heap segment
80000025 and 1 80000023 80000024
80000026 bad 80000025 b6 ; memory access in between data and heap segments
80000027 ugte 1 44000001 45000001 ; address >= current end of heap segment
80000028 ult 1 44000001 202 ; address < current start of stack segment
80000029 and 1 80000027 80000028
80000030 bad 80000029 b7 ; memory access in between current heap and stack segments
80000031 ugte 1 44000001 34 ; address >= allowed end of heap segment
80000032 ult 1 44000001 45000001 ; address < current end of heap segment
80000033 and 1 80000031 80000032
80000034 bad 80000033 b8 ; memory access in between allowed and current end of heap segment
80000035 ugte 1 44000001 202 ; address >= current start of stack segment
80000036 ult 1 44000001 35 ; address < allowed start of stack segment
80000037 and 1 80000035 80000036
80000038 bad 80000037 b9 ; memory access in between current and allowed start of stack segment
80000039 ugt 1 44000001 50 ; address > highest address in 32-bit virtual address space (4GB)
80000040 bad 80000039 b10 ; memory access above stack segment

; end of BTOR2 examples/symbolic/memory-access-fail-1-35.btor2
