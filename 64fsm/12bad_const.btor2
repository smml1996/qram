; selfie.cs.uni-salzburg.at

; BTOR2 s.btor2 generated by ./beator
; with --no-syscall-id-check
; with --no-exit-code-check
; with --no-division-by-zero-check
; with --no-address-alignment-check

; RISC-V code obtained from s.c and invoked as: s.c
; with --constant-propagation

1 sort bitvec 1 ; Boolean
2 sort bitvec 64 ; 64-bit machine word
3 sort array 2 2 ; 64-bit physical memory

; 96B total memory, 16B data, 8B heap (8B,0B), 72B stack (72B,0B)

10 zero 1
11 one 1

20 zero 2
21 one 2
22 constd 2 2
23 constd 2 3
24 constd 2 4
25 constd 2 5
26 constd 2 6
27 constd 2 7
28 constd 2 8

; start of data segment in 64-bit virtual memory
30 constd 2 69632 ; 0x11000
; end of data segment in 64-bit virtual memory
31 constd 2 69648 ; 0x11010

; start of heap segment in 64-bit virtual memory (initial program break)
32 constd 2 73728 ; 0x12000
; current end of heap segment in 64-bit virtual memory (current program break)
33 constd 2 73736 ; 0x12008

; highest address in 32-bit virtual address space (4GB)

50 constd 2 4294967288 ; 0xFFFFFFF8

; kernel-mode flag

60 state 1 kernel-mode
61 init 1 60 10 kernel-mode ; initial value is false
62 not 1 60

; unsigned-extended inputs for byte-wise reading

71 sort bitvec 8 ; 1 byte
72 sort bitvec 16 ; 2 bytes
73 sort bitvec 24 ; 3 bytes
74 sort bitvec 32 ; 4 bytes
75 sort bitvec 40 ; 5 bytes
76 sort bitvec 48 ; 6 bytes
77 sort bitvec 56 ; 7 bytes

81 input 71 1-byte-input
82 input 72 2-byte-input
83 input 73 3-byte-input
84 input 74 4-byte-input
85 input 75 5-byte-input
86 input 76 6-byte-input
87 input 77 7-byte-input

91 uext 2 81 56 ; uext-1-byte-input
92 uext 2 82 48 ; uext-2-byte-input
93 uext 2 83 40 ; uext-3-byte-input
94 uext 2 84 32 ; uext-4-byte-input
95 uext 2 85 24 ; uext-5-byte-input
96 uext 2 86 16 ; uext-6-byte-input
97 uext 2 87 8 ; uext-7-byte-input
98 input 2 8-byte-input

; 32 64-bit general-purpose registers

; non-zero initial register values

101 constd 2 65952 ; 0x101A0 for ra
102 constd 2 4294967224 ; 0xFFFFFFB8 for sp
103 constd 2 69648 ; 0x11010 for gp
105 constd 2 1 ; 0x1 for t0
108 constd 2 4294967232 ; 0xFFFFFFC0 for s0
111 constd 2 73728 ; 0x12000 for a1
112 constd 2 1 ; 0x1 for a2
116 constd 2 105553148395520 ; 0x600001EA4000 for a6
117 constd 2 63 ; 0x3F for a7

; registers

200 zero 2 zero ; register $0 is always 0
201 state 2 ra ; register $1
202 state 2 sp ; register $2
203 state 2 gp ; register $3
204 state 2 tp ; register $4
205 state 2 t0 ; register $5
206 state 2 t1 ; register $6
207 state 2 t2 ; register $7
208 state 2 s0 ; register $8
209 state 2 s1 ; register $9
210 state 2 a0 ; register $10
211 state 2 a1 ; register $11
212 state 2 a2 ; register $12
213 state 2 a3 ; register $13
214 state 2 a4 ; register $14
215 state 2 a5 ; register $15
216 state 2 a6 ; register $16
217 state 2 a7 ; register $17
218 state 2 s2 ; register $18
219 state 2 s3 ; register $19
220 state 2 s4 ; register $20
221 state 2 s5 ; register $21
222 state 2 s6 ; register $22
223 state 2 s7 ; register $23
224 state 2 s8 ; register $24
225 state 2 s9 ; register $25
226 state 2 s10 ; register $26
227 state 2 s11 ; register $27
228 state 2 t3 ; register $28
229 state 2 t4 ; register $29
230 state 2 t5 ; register $30
231 state 2 t6 ; register $31

; initializing registers

301 init 2 201 101 ra ; initial value is 65952
302 init 2 202 102 sp ; initial value is 4294967224
303 init 2 203 103 gp ; initial value is 69648
304 init 2 204 20 tp ; initial value is 0
305 init 2 205 105 t0 ; initial value is 1
306 init 2 206 20 t1 ; initial value is 0
307 init 2 207 20 t2 ; initial value is 0
308 init 2 208 108 s0 ; initial value is 4294967232
309 init 2 209 20 s1 ; initial value is 0
310 init 2 210 20 a0 ; initial value is 0
311 init 2 211 111 a1 ; initial value is 73728
312 init 2 212 112 a2 ; initial value is 1
313 init 2 213 20 a3 ; initial value is 0
314 init 2 214 20 a4 ; initial value is 0
315 init 2 215 20 a5 ; initial value is 0
316 init 2 216 116 a6 ; initial value is 105553148395520
317 init 2 217 117 a7 ; initial value is 63
318 init 2 218 20 s2 ; initial value is 0
319 init 2 219 20 s3 ; initial value is 0
320 init 2 220 20 s4 ; initial value is 0
321 init 2 221 20 s5 ; initial value is 0
322 init 2 222 20 s6 ; initial value is 0
323 init 2 223 20 s7 ; initial value is 0
324 init 2 224 20 s8 ; initial value is 0
325 init 2 225 20 s9 ; initial value is 0
326 init 2 226 20 s10 ; initial value is 0
327 init 2 227 20 s11 ; initial value is 0
328 init 2 228 20 t3 ; initial value is 0
329 init 2 229 20 t4 ; initial value is 0
330 init 2 230 20 t5 ; initial value is 0
331 init 2 231 20 t6 ; initial value is 0

; 64-bit program counter encoded in Boolean flags

; 16553600 unreachable state at 10000
; 16554000 unreachable state at 10004
; 16554400 unreachable state at 10008
; 16554800 unreachable state at 1000C
; 16555200 unreachable state at 10010
; 16555600 unreachable state at 10014
; 16556000 unreachable state at 10018
; 16556400 unreachable state at 1001C
; 16556800 unreachable state at 10020
; 16557200 unreachable state at 10024
; 16557600 unreachable state at 10028
; 16558000 unreachable state at 1002C
; 16558400 unreachable state at 10030
; 16558800 unreachable state at 10034
; 16559200 unreachable state at 10038
; 16559600 unreachable state at 1003C
; 16560000 unreachable state at 10040
; 16560400 unreachable state at 10044
; 16560800 unreachable state at 10048
; 16561200 unreachable state at 1004C
16561600 state 1 pc=0x10050
16561601 init 1 16561600 10
16562000 state 1 pc=0x10054
16562001 init 1 16562000 10
16562400 state 1 pc=0x10058
16562401 init 1 16562400 10
16562800 state 1 pc=0x1005C
16562801 init 1 16562800 10
16563200 state 1 pc=0x10060
16563201 init 1 16563200 10
16563600 state 1 pc=0x10064
16563601 init 1 16563600 10
; 16564000 unreachable state at 10068
; 16564400 unreachable state at 1006C
; 16564800 unreachable state at 10070
; 16565200 unreachable state at 10074
; 16565600 unreachable state at 10078
; 16566000 unreachable state at 1007C
; 16566400 unreachable state at 10080
16566800 state 1 pc=0x10084
16566801 init 1 16566800 11 ; initial program counter
16567200 state 1 pc=0x10088
16567201 init 1 16567200 10
; 16567600 unreachable state at 1008C
; 16568000 unreachable state at 10090
; 16568400 unreachable state at 10094
; 16568800 unreachable state at 10098
; 16569200 unreachable state at 1009C
; 16569600 unreachable state at 100A0
; 16570000 unreachable state at 100A4
; 16570400 unreachable state at 100A8
; 16570800 unreachable state at 100AC
; 16571200 unreachable state at 100B0
; 16571600 unreachable state at 100B4
; 16572000 unreachable state at 100B8
; 16572400 unreachable state at 100BC
; 16572800 unreachable state at 100C0
; 16573200 unreachable state at 100C4
; 16573600 unreachable state at 100C8
; 16574000 unreachable state at 100CC
; 16574400 unreachable state at 100D0
; 16574800 unreachable state at 100D4
; 16575200 unreachable state at 100D8
; 16575600 unreachable state at 100DC
; 16576000 unreachable state at 100E0
; 16576400 unreachable state at 100E4
; 16576800 unreachable state at 100E8
; 16577200 unreachable state at 100EC
; 16577600 unreachable state at 100F0
; 16578000 unreachable state at 100F4
; 16578400 unreachable state at 100F8
; 16578800 unreachable state at 100FC
; 16579200 unreachable state at 10100
; 16579600 unreachable state at 10104
; 16580000 unreachable state at 10108
; 16580400 unreachable state at 1010C
; 16580800 unreachable state at 10110
; 16581200 unreachable state at 10114
; 16581600 unreachable state at 10118
; 16582000 unreachable state at 1011C
; 16582400 unreachable state at 10120
; 16582800 unreachable state at 10124
; 16583200 unreachable state at 10128
; 16583600 unreachable state at 1012C
; 16584000 unreachable state at 10130
; 16584400 unreachable state at 10134
; 16584800 unreachable state at 10138
; 16585200 unreachable state at 1013C
; 16585600 unreachable state at 10140
; 16586000 unreachable state at 10144
; 16586400 unreachable state at 10148
; 16586800 unreachable state at 1014C
; 16587200 unreachable state at 10150
; 16587600 unreachable state at 10154
; 16588000 unreachable state at 10158
; 16588400 unreachable state at 1015C
; 16588800 unreachable state at 10160
; 16589200 unreachable state at 10164
; 16589600 unreachable state at 10168
; 16590000 unreachable state at 1016C
; 16590400 unreachable state at 10170
; 16590800 unreachable state at 10174
; 16591200 unreachable state at 10178
; 16591600 unreachable state at 1017C
; 16592000 unreachable state at 10180
; 16592400 unreachable state at 10184
; 16592800 unreachable state at 10188
; 16593200 unreachable state at 1018C
; 16593600 unreachable state at 10190
; 16594000 unreachable state at 10194
; 16594400 unreachable state at 10198
; 16594800 unreachable state at 1019C
16595200 state 1 pc=0x101A0
16595201 init 1 16595200 10
16595600 state 1 pc=0x101A4
16595601 init 1 16595600 10
16596000 state 1 pc=0x101A8
16596001 init 1 16596000 10
16596400 state 1 pc=0x101AC
16596401 init 1 16596400 10
16596800 state 1 pc=0x101B0
16596801 init 1 16596800 10
16597200 state 1 pc=0x101B4
16597201 init 1 16597200 10
16597600 state 1 pc=0x101B8
16597601 init 1 16597600 10
16598000 state 1 pc=0x101BC
16598001 init 1 16598000 10
16598400 state 1 pc=0x101C0
16598401 init 1 16598400 10
16598800 state 1 pc=0x101C4
16598801 init 1 16598800 10
16599200 state 1 pc=0x101C8
16599201 init 1 16599200 10
16599600 state 1 pc=0x101CC
16599601 init 1 16599600 10
16600000 state 1 pc=0x101D0
16600001 init 1 16600000 10
16600400 state 1 pc=0x101D4
16600401 init 1 16600400 10
16600800 state 1 pc=0x101D8
16600801 init 1 16600800 10
16601200 state 1 pc=0x101DC
16601201 init 1 16601200 10
16601600 state 1 pc=0x101E0
16601601 init 1 16601600 10
16602000 state 1 pc=0x101E4
16602001 init 1 16602000 10
16602400 state 1 pc=0x101E8
16602401 init 1 16602400 10
16602800 state 1 pc=0x101EC
16602801 init 1 16602800 10
16603200 state 1 pc=0x101F0
16603201 init 1 16603200 10
16603600 state 1 pc=0x101F4
16603601 init 1 16603600 10
16604000 state 1 pc=0x101F8
16604001 init 1 16604000 10
16604400 state 1 pc=0x101FC
16604401 init 1 16604400 10
16604800 state 1 pc=0x10200
16604801 init 1 16604800 10
16605200 state 1 pc=0x10204
16605201 init 1 16605200 10
16605600 state 1 pc=0x10208
16605601 init 1 16605600 10
16606000 state 1 pc=0x1020C
16606001 init 1 16606000 10
16606400 state 1 pc=0x10210
16606401 init 1 16606400 10
16606800 state 1 pc=0x10214
16606801 init 1 16606800 10
16607200 state 1 pc=0x10218
16607201 init 1 16607200 10
16607600 state 1 pc=0x1021C
16607601 init 1 16607600 10
16608000 state 1 pc=0x10220
16608001 init 1 16608000 10
16608400 state 1 pc=0x10224
16608401 init 1 16608400 10
16608800 state 1 pc=0x10228
16608801 init 1 16608800 10
16609200 state 1 pc=0x1022C
16609201 init 1 16609200 10
16609600 state 1 pc=0x10230
16609601 init 1 16609600 10
16610000 state 1 pc=0x10234
16610001 init 1 16610000 10

16963200 state 3 memory-dump

; data segment

16963201 constd 2 69632 ; 0x11000 paddr, 0x11000 vaddr
16963202 constd 2 73728 ; 0x12000 word
16963203 write 3 16963200 16963201 16963202
16964000 constd 2 69640 ; 0x11008 paddr, 0x11008 vaddr
16964001 constd 2 73736 ; 0x12008 word
16964002 write 3 16963203 16964000 16964001

; heap segment

17372800 constd 2 73728 ; 0x12000 paddr, 0x12000 vaddr
17372801 write 3 16964002 17372800 20

; stack segment

17373600 constd 2 4294967224 ; 0xFFFFFFB8 paddr, 0xFFFFFFB8 vaddr
17373601 write 3 17372801 17373600 20
17374400 constd 2 4294967232 ; 0xFFFFFFC0 paddr, 0xFFFFFFC0 vaddr
17374401 write 3 17373601 17374400 20
17375200 constd 2 4294967240 ; 0xFFFFFFC8 paddr, 0xFFFFFFC8 vaddr
17375201 constd 2 65616 ; 0x10050 word
17375202 write 3 17374401 17375200 17375201
17376000 constd 2 4294967248 ; 0xFFFFFFD0 paddr, 0xFFFFFFD0 vaddr
17376001 constd 2 1 ; 0x1 word
17376002 write 3 17375202 17376000 17376001
17376800 constd 2 4294967256 ; 0xFFFFFFD8 paddr, 0xFFFFFFD8 vaddr
17376801 constd 2 4294967264 ; 0xFFFFFFE0 word
17376802 write 3 17376002 17376800 17376801
17377600 constd 2 4294967264 ; 0xFFFFFFE0 paddr, 0xFFFFFFE0 vaddr
17377601 constd 2 4294967288 ; 0xFFFFFFF8 word
17377602 write 3 17376802 17377600 17377601
17378400 constd 2 4294967272 ; 0xFFFFFFE8 paddr, 0xFFFFFFE8 vaddr
17378401 write 3 17377602 17378400 20
17379200 constd 2 4294967280 ; 0xFFFFFFF0 paddr, 0xFFFFFFF0 vaddr
17379201 write 3 17378401 17379200 20
17380000 constd 2 4294967288 ; 0xFFFFFFF8 paddr, 0xFFFFFFF8 vaddr
17380001 constd 2 13510992162139763 ; 0x30002D00632E73 word
17380002 write 3 17379201 17380000 17380001

; 64-bit physical memory

20000000 state 3 physical-memory ; data, heap, stack segments
20000001 init 3 20000000 17380002 ; loading data, heap, stack segments into memory

; data flow

36561200 constd 2 65616 ; 0x10050
36561600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36561601 add 2 202 36561600
36561602 ite 2 16561600 36561601 202 ; 0x10050(~1): addi sp,sp,-8
36562000 ite 2 16562000 202 30 ; for checking address validity
36562001 write 3 20000000 202 210
36562002 ite 3 16562000 36562001 20000000 ; 0x10054(~1): sd a0,0(sp)
36562400 ite 2 16562400 202 36562000 ; for checking address validity
36562401 read 2 20000000 202
36562402 ite 2 16562400 36562401 210 ; 0x10058(~1): ld a0,0(sp)
36562800 constd 2 8 ; 0x8
36562801 add 2 202 36562800
36562802 ite 2 16562800 36562801 36561602 ; 0x1005C(~1): addi sp,sp,8
36563200 constd 2 93 ; 0x5D
36563201 ite 2 16563200 36563200 217 ; 0x10060(~1): addi a7,zero,93
36563600 ite 1 16563600 11 10 ; 0x10064(~1): ecall
36566800 ite 1 16566800 11 36563600 ; 0x10084(~1): ecall
36589200 constd 2 65896 ; 0x10168
36594800 constd 2 65952 ; 0x101A0
36595200 ite 2 16595200 200 36562402 ; 0x101A0(~8): addi a0,zero,0
36595600 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36595601 add 2 203 36595600
36595602 ite 2 16595600 36595601 36562400 ; for checking address validity
36595603 read 2 20000000 36595601
36595604 ite 2 16595600 36595603 205 ; 0x101A4(~10): ld t0,-16(gp)
36596000 ite 2 16596000 205 36595602 ; for checking address validity
36596001 read 2 20000000 205
36596002 ite 2 16596000 36596001 36595604 ; 0x101A8(~10): ld t0,0(t0)
36596400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36596401 add 2 208 36596400
36596402 ite 2 16596400 36596401 36596000 ; for checking address validity
36596403 write 3 20000000 36596401 205
36596404 ite 3 16596400 36596403 36562002 ; 0x101AC(~10): sd t0,-8(s0)
36596800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36596801 add 2 208 36596800
36596802 ite 2 16596800 36596801 36596402 ; for checking address validity
36596803 read 2 20000000 36596801
36596804 ite 2 16596800 36596803 36596002 ; 0x101B0(~12): ld t0,-8(s0)
36597200 constd 2 48 ; 0x30
36597201 ite 2 16597200 36597200 206 ; 0x101B4(~12): addi t1,zero,48
36597600 ult 1 206 205
36597601 uext 2 36597600 63
36597602 ite 2 16597600 36597601 36596804 ; 0x101B8(~12): sltu t0,t1,t0
36598000 eq 1 205 200 ; 0x101BC(~12): beq t0,zero,6
36598001 not 1 36598000
36598400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36598401 add 2 208 36598400
36598402 ite 2 16598400 36598401 36596802 ; for checking address validity
36598403 read 2 20000000 36598401
36598404 ite 2 16598400 36598403 36597602 ; 0x101C0(~13): ld t0,-8(s0)
36598800 constd 2 1 ; 0x1
36598801 ite 2 16598800 36598800 36597201 ; 0x101C4(~13): addi t1,zero,1
36599200 sub 2 205 206
36599201 ite 2 16599200 36599200 36598404 ; 0x101C8(~13): sub t0,t0,t1
36599600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36599601 add 2 208 36599600
36599602 ite 2 16599600 36599601 36598402 ; for checking address validity
36599603 write 3 20000000 36599601 205
36599604 ite 3 16599600 36599603 36596404 ; 0x101CC(~13): sd t0,-8(s0)
36600400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36600401 add 2 208 36600400
36600402 ite 2 16600400 36600401 36599602 ; for checking address validity
36600403 read 2 20000000 36600401
36600404 ite 2 16600400 36600403 36599201 ; 0x101D4(~15): ld t0,-8(s0)
36600800 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36600801 add 2 203 36600800
36600802 ite 2 16600800 36600801 36600402 ; for checking address validity
36600803 read 2 20000000 36600801
36600804 ite 2 16600800 36600803 36598801 ; 0x101D8(~15): ld t1,-16(gp)
36601200 ite 2 16601200 206 36600802 ; for checking address validity
36601201 read 2 20000000 206
36601202 ite 2 16601200 36601201 36600804 ; 0x101DC(~15): ld t1,0(t1)
36601600 constd 2 1 ; 0x1
36601601 ite 2 16601600 36601600 207 ; 0x101E0(~15): addi t2,zero,1
36602000 sub 2 206 207
36602001 ite 2 16602000 36602000 36601202 ; 0x101E4(~15): sub t1,t1,t2
36602400 sub 2 206 205
36602401 ite 2 16602400 36602400 36600404 ; 0x101E8(~15): sub t0,t1,t0
36602800 constd 2 1 ; 0x1
36602801 ite 2 16602800 36602800 36602001 ; 0x101EC(~15): addi t1,zero,1
36603200 ult 1 205 206
36603201 uext 2 36603200 63
36603202 ite 2 16603200 36603201 36602401 ; 0x101F0(~15): sltu t0,t0,t1
36603600 eq 1 205 200 ; 0x101F4(~15): beq t0,zero,8
36603601 not 1 36603600
36604000 constd 2 -16 ; 0xFFFFFFFFFFFFFFF0
36604001 add 2 203 36604000
36604002 ite 2 16604000 36604001 36601200 ; for checking address validity
36604003 read 2 20000000 36604001
36604004 ite 2 16604000 36604003 36603202 ; 0x101F8(~17): ld t0,-16(gp)
36604400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36604401 add 2 208 36604400
36604402 ite 2 16604400 36604401 36604002 ; for checking address validity
36604403 read 2 20000000 36604401
36604404 ite 2 16604400 36604403 36602801 ; 0x101FC(~17): ld t1,-8(s0)
36604800 constd 2 8 ; 0x8
36604801 ite 2 16604800 36604800 36601601 ; 0x10200(~17): addi t2,zero,8
36605200 mul 2 206 207
36605201 ite 2 16605200 36605200 36604404 ; 0x10204(~17): mul t1,t1,t2
36605600 add 2 205 206
36605601 ite 2 16605600 36605600 36604004 ; 0x10208(~17): add t0,t0,t1
36606000 ite 2 16606000 205 36604402 ; for checking address validity
36606001 read 2 20000000 205
36606002 ite 2 16606000 36606001 36605601 ; 0x1020C(~17): ld t0,0(t0)
36606400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36606401 add 2 208 36606400
36606402 ite 2 16606400 36606401 36606000 ; for checking address validity
36606403 write 3 20000000 36606401 205
36606404 ite 3 16606400 36606403 36599604 ; 0x10210(~17): sd t0,-8(s0)
36606800 ite 2 16606800 200 36606002 ; 0x10214(~18): addi t0,zero,0
36607200 ite 2 16607200 205 36595200 ; 0x10218(~18): addi a0,t0,0
36608000 ite 2 16608000 208 36562802 ; 0x10220(~19): addi sp,s0,0
36608400 ite 2 16608400 202 36606402 ; for checking address validity
36608401 read 2 20000000 202
36608402 ite 2 16608400 36608401 208 ; 0x10224(~19): ld s0,0(sp)
36608800 constd 2 8 ; 0x8
36608801 add 2 202 36608800
36608802 ite 2 16608800 36608801 36608000 ; 0x10228(~19): addi sp,sp,8
36609200 ite 2 16609200 202 36608400 ; for checking address validity
36609201 read 2 20000000 202
36609202 ite 2 16609200 36609201 201 ; 0x1022C(~19): ld ra,0(sp)
36609600 constd 2 8 ; 0x8
36609601 add 2 202 36609600
36609602 ite 2 16609600 36609601 36608802 ; 0x10230(~19): addi sp,sp,8

; syscalls

40000000 constd 2 93 ; SYSCALL_EXIT
40000001 constd 2 63 ; SYSCALL_READ
40000002 constd 2 64 ; SYSCALL_WRITE
40000003 constd 2 56 ; SYSCALL_OPENAT
40000004 constd 2 214 ; SYSCALL_BRK

40000010 eq 1 217 40000000 ; $a7 == SYSCALL_EXIT
40000011 eq 1 217 40000001 ; $a7 == SYSCALL_READ
40000012 eq 1 217 40000002 ; $a7 == SYSCALL_WRITE
40000013 eq 1 217 40000003 ; $a7 == SYSCALL_OPENAT
40000014 eq 1 217 40000004 ; $a7 == SYSCALL_BRK

41000000 and 1 36566800 40000010 ; exit ecall is active
41000001 ite 1 60 40000010 41000000 ; stay in kernel mode indefinitely if exit ecall is active

42000000 and 1 36566800 40000011 ; read ecall is active
42000001 ite 2 42000000 211 36609200 ; $a1 is start address of buffer for checking address validity
42000002 ite 1 42000000 11 41000001 ; go into kernel mode if read ecall is active
42000003 ite 2 42000000 20 36607200 ; set $a0 = 0 bytes if read ecall is active
42000004 sub 2 212 210 ; $a2 - $a0
42000005 ugte 1 42000004 28 ; $a2 - $a0 >= 8 bytes
42000006 ite 2 42000005 28 42000004 ; read 8 bytes if $a2 - $a0 >= 8 bytes, or else $a2 - $a0 bytes
42000007 eq 1 42000006 22 ; increment == 2
42000008 ite 2 42000007 92 91 ; unsigned-extended 2-byte input if increment == 2, or else unsigned-extended 1-byte input
42000009 eq 1 42000006 23 ; increment == 3
42000010 ite 2 42000009 93 42000008 ; unsigned-extended 3-byte input if increment == 3
42000011 eq 1 42000006 24 ; increment == 4
42000012 ite 2 42000011 94 42000010 ; unsigned-extended 4-byte input if increment == 4
42000013 eq 1 42000006 25 ; increment == 5
42000014 ite 2 42000013 95 42000012 ; unsigned-extended 5-byte input if increment == 5
42000015 eq 1 42000006 26 ; increment == 6
42000016 ite 2 42000015 96 42000014 ; unsigned-extended 6-byte input if increment == 6
42000017 eq 1 42000006 27 ; increment == 7
42000018 ite 2 42000017 97 42000016 ; unsigned-extended 7-byte input if increment == 7
42000019 eq 1 42000006 28 ; increment == 8
42000020 ite 2 42000019 98 42000018 ; 8-byte input if increment == 8
42000021 add 2 211 210 ; $a1 + $a0
42000022 write 3 20000000 42000021 42000020 ; memory[$a1 + $a0] = input
42000023 ult 1 210 212 ; $a0 < $a2
42000024 and 1 40000011 42000023 ; $a7 == SYSCALL_READ and $a0 < $a2
42000025 and 1 60 42000024 ; read ecall is in kernel mode and not done yet
42000026 ugt 1 42000006 20 ; increment > 0
42000027 and 1 42000025 42000026 ; read ecall is in kernel mode and not done yet and increment > 0
42000028 ite 3 42000027 42000022 36606404 ; read input into memory[$a1 + $a0]
42000029 add 2 210 42000006 ; $a0 + increment
42000030 ite 2 42000025 42000029 42000003 ; set $a0 = $a0 + increment if read ecall is in kernel mode and not done yet
42000031 ite 1 42000025 11 42000002 ; stay in kernel mode if read ecall is in kernel mode and not done yet

43000000 and 1 36566800 40000012 ; write ecall is active
43000001 ite 2 43000000 211 42000001 ; $a1 is start address of buffer for checking address validity
43000002 ite 2 43000000 212 42000030 ; set $a0 = $a2 if write ecall is active

44000000 and 1 36566800 40000013 ; openat ecall is active
44000001 ite 2 44000000 211 43000001 ; $a1 is start address of buffer for checking address validity
44000002 state 2 fd-bump-pointer
44000003 init 2 44000002 21 ; initial fd-bump-pointer is 1 (file descriptor bump pointer)
44000004 inc 2 44000002
44000005 ite 2 44000000 44000004 44000002 ; fd-bump-pointer + 1 if openat ecall is active
44000006 next 2 44000002 44000005 ; increment fd-bump-pointer if openat ecall is active
44000007 ite 2 44000000 44000004 43000002 ; set $a0 = fd-bump-pointer + 1 if openat ecall is active

45000000 and 1 36566800 40000014 ; brk ecall is active
45000001 state 2 brk-bump-pointer
45000002 init 2 45000001 33 ; current program break
45000003 ulte 1 45000001 210 ; brk <= $a0
45000004 ult 1 210 202 ; $a0 < $sp
45000005 and 1 45000003 45000004 ; brk <= $a0 < $sp
45000006 and 2 210 27 ; reset all but 3 LSBs of $a0
45000007 eq 1 45000006 20 ; 3 LSBs of $a0 == 0 ($a0 is word-aligned)
45000008 and 1 45000005 45000007 ; brk <= $a0 < $sp and $a0 is word-aligned ($a0 is valid)
45000009 and 1 45000000 45000008 ; brk ecall is active and $a0 is valid
45000010 ite 2 45000009 210 45000001 ; brk = $a0 if brk ecall is active and $a0 is valid
45000011 next 2 45000001 45000010 ; set brk = $a0 if brk ecall is active and $a0 is valid
45000012 not 1 45000008 ; $a0 is invalid
45000013 and 1 45000000 45000012 ; brk ecall is active and $a0 is invalid
45000014 ite 2 45000013 45000001 44000007 ; set $a0 = brk if brk ecall is active and $a0 is invalid

46000000 next 1 60 42000031 ; updating kernel-mode flag

; control flow

56561600 not 2 21 ; jalr 66100[0x10234](~19)
56561601 and 2 201 56561600
56561602 eq 1 56561601 36561200
56561603 and 1 16610000 56561602
56561604 next 1 16561600 56561603 ; ->65616[0x10050](~1)
; 65616[0x10050](~1)
56562000 next 1 16562000 16561600 ; ->65620[0x10054](~1)
; 65620[0x10054](~1)
56562400 next 1 16562400 16562000 ; ->65624[0x10058](~1)
; 65624[0x10058](~1)
56562800 next 1 16562800 16562400 ; ->65628[0x1005C](~1)
; 65628[0x1005C](~1)
56563200 next 1 16563200 16562800 ; ->65632[0x10060](~1)
; 65632[0x10060](~1)
56563600 next 1 16563600 16563200 ; ->65636[0x10064](~1)
56564000 state 1 kernel-mode-pc-flag-65636[0x10064](~1)
56564001 init 1 56564000 10 ; ecall is initially inactive
56564002 ite 1 56564000 60 16563600 ; activate ecall and keep active while in kernel mode
56564003 next 1 56564000 56564002 ; keep ecall active while in kernel mode
56564004 and 1 56564000 62 ; ecall is active but not in kernel mode anymore
56566800 next 1 16566800 10 ; ->65668[0x10084](~1)
56567200 state 1 kernel-mode-pc-flag-65668[0x10084](~1)
56567201 init 1 56567200 10 ; ecall is initially inactive
56567202 ite 1 56567200 60 16566800 ; activate ecall and keep active while in kernel mode
56567203 next 1 56567200 56567202 ; keep ecall active while in kernel mode
56567204 and 1 56567200 62 ; ecall is active but not in kernel mode anymore
56567205 next 1 16567200 56567204 ; ->65672[0x10088](~1)
56595200 not 2 21 ; jalr 65672[0x10088](~1)
56595201 and 2 201 56595200
56595202 eq 1 56595201 36594800
56595203 and 1 16567200 56595202
56595204 next 1 16595200 56595203 ; ->65952[0x101A0](~8)
; 65952[0x101A0](~8)
56595600 next 1 16595600 16595200 ; ->65956[0x101A4](~10)
; 65956[0x101A4](~10)
56596000 next 1 16596000 16595600 ; ->65960[0x101A8](~10)
; 65960[0x101A8](~10)
56596400 next 1 16596400 16596000 ; ->65964[0x101AC](~10)
; jal 66000[0x101D0](~15)
; 65964[0x101AC](~10)
56596800 ite 1 16596400 11 16600000
56596801 next 1 16596800 56596800 ; ->65968[0x101B0](~12)
; 65968[0x101B0](~12)
56597200 next 1 16597200 16596800 ; ->65972[0x101B4](~12)
; 65972[0x101B4](~12)
56597600 next 1 16597600 16597200 ; ->65976[0x101B8](~12)
; 65976[0x101B8](~12)
56598000 next 1 16598000 16597600 ; ->65980[0x101BC](~12)
56598400 and 1 16598000 36598001 ; beq 65980[0x101BC](~12)
56598401 next 1 16598400 56598400 ; ->65984[0x101C0](~13)
; 65984[0x101C0](~13)
56598800 next 1 16598800 16598400 ; ->65988[0x101C4](~13)
; 65988[0x101C4](~13)
56599200 next 1 16599200 16598800 ; ->65992[0x101C8](~13)
; 65992[0x101C8](~13)
56599600 next 1 16599600 16599200 ; ->65996[0x101CC](~13)
; 65996[0x101CC](~13)
56600000 next 1 16600000 16599600 ; ->66000[0x101D0](~15)
56600400 and 1 16598000 36598000 ; beq 65980[0x101BC](~12)
56600401 next 1 16600400 56600400 ; ->66004[0x101D4](~15)
; 66004[0x101D4](~15)
56600800 next 1 16600800 16600400 ; ->66008[0x101D8](~15)
; 66008[0x101D8](~15)
56601200 next 1 16601200 16600800 ; ->66012[0x101DC](~15)
; 66012[0x101DC](~15)
56601600 next 1 16601600 16601200 ; ->66016[0x101E0](~15)
; 66016[0x101E0](~15)
56602000 next 1 16602000 16601600 ; ->66020[0x101E4](~15)
; 66020[0x101E4](~15)
56602400 next 1 16602400 16602000 ; ->66024[0x101E8](~15)
; 66024[0x101E8](~15)
56602800 next 1 16602800 16602400 ; ->66028[0x101EC](~15)
; 66028[0x101EC](~15)
56603200 next 1 16603200 16602800 ; ->66032[0x101F0](~15)
; 66032[0x101F0](~15)
56603600 next 1 16603600 16603200 ; ->66036[0x101F4](~15)
56604000 and 1 16603600 36603601 ; beq 66036[0x101F4](~15)
56604001 next 1 16604000 56604000 ; ->66040[0x101F8](~17)
; 66040[0x101F8](~17)
56604400 next 1 16604400 16604000 ; ->66044[0x101FC](~17)
; 66044[0x101FC](~17)
56604800 next 1 16604800 16604400 ; ->66048[0x10200](~17)
; 66048[0x10200](~17)
56605200 next 1 16605200 16604800 ; ->66052[0x10204](~17)
; 66052[0x10204](~17)
56605600 next 1 16605600 16605200 ; ->66056[0x10208](~17)
; 66056[0x10208](~17)
56606000 next 1 16606000 16605600 ; ->66060[0x1020C](~17)
; 66060[0x1020C](~17)
56606400 next 1 16606400 16606000 ; ->66064[0x10210](~17)
; 66064[0x10210](~17)
56606800 and 1 16603600 36603600 ; beq 66036[0x101F4](~15)
56606801 ite 1 56606800 11 16606400
56606802 next 1 16606800 56606801 ; ->66068[0x10214](~18)
; 66068[0x10214](~18)
56607200 next 1 16607200 16606800 ; ->66072[0x10218](~18)
; 66072[0x10218](~18)
56607600 next 1 16607600 16607200 ; ->66076[0x1021C](~18)
; jal 66076[0x1021C](~18)
56608000 next 1 16608000 16607600 ; ->66080[0x10220](~19)
; 66080[0x10220](~19)
56608400 next 1 16608400 16608000 ; ->66084[0x10224](~19)
; 66084[0x10224](~19)
56608800 next 1 16608800 16608400 ; ->66088[0x10228](~19)
; 66088[0x10228](~19)
56609200 next 1 16609200 16608800 ; ->66092[0x1022C](~19)
; 66092[0x1022C](~19)
56609600 next 1 16609600 16609200 ; ->66096[0x10230](~19)
; 66096[0x10230](~19)
56610000 next 1 16610000 16609600 ; ->66100[0x10234](~19)

; updating registers

60000001 next 2 201 36609202 ra ; register $1
60000002 next 2 202 36609602 sp ; register $2
60000003 next 2 203 203 gp ; register $3
60000004 next 2 204 204 tp ; register $4
60000005 next 2 205 36606800 t0 ; register $5
60000006 next 2 206 36605201 t1 ; register $6
60000007 next 2 207 36604801 t2 ; register $7
60000008 next 2 208 36608402 s0 ; register $8
60000009 next 2 209 209 s1 ; register $9
60000010 next 2 210 45000014 a0 ; register $10
60000011 next 2 211 211 a1 ; register $11
60000012 next 2 212 212 a2 ; register $12
60000013 next 2 213 213 a3 ; register $13
60000014 next 2 214 214 a4 ; register $14
60000015 next 2 215 215 a5 ; register $15
60000016 next 2 216 216 a6 ; register $16
60000017 next 2 217 36563201 a7 ; register $17
60000018 next 2 218 218 s2 ; register $18
60000019 next 2 219 219 s3 ; register $19
60000020 next 2 220 220 s4 ; register $20
60000021 next 2 221 221 s5 ; register $21
60000022 next 2 222 222 s6 ; register $22
60000023 next 2 223 223 s7 ; register $23
60000024 next 2 224 224 s8 ; register $24
60000025 next 2 225 225 s9 ; register $25
60000026 next 2 226 226 s10 ; register $26
60000027 next 2 227 227 s11 ; register $27
60000028 next 2 228 228 t3 ; register $28
60000029 next 2 229 229 t4 ; register $29
60000030 next 2 230 230 t5 ; register $30
60000031 next 2 231 231 t6 ; register $31

; updating 64-bit physical memory

70000000 next 3 20000000 42000028 physical-memory

; checking segmentation faults

; is start address of memory access in a valid segment?

80000000 ult 1 44000001 30 ; address < start of data segment
80000001 bad 80000000 b0 ; memory access below data segment
80000002 ugte 1 44000001 31 ; address >= end of data segment
80000003 ult 1 44000001 32 ; address < start of heap segment
80000004 and 1 80000002 80000003
80000005 bad 80000004 b1 ; memory access in between data and heap segments
80000006 ugte 1 44000001 45000001 ; address >= current end of heap segment
80000007 ult 1 44000001 202 ; address < current start of stack segment
80000008 and 1 80000006 80000007
80000009 bad 80000008 b2 ; memory access in between current heap and stack segments
80000010 ugt 1 44000001 50 ; address > highest address in 32-bit virtual address space (4GB)
80000011 bad 80000010 b3 ; memory access above stack segment

; end of BTOR2 s.btor2
