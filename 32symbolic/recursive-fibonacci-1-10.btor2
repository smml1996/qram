; selfie.cs.uni-salzburg.at

; BTOR2 examples/symbolic/recursive-fibonacci-1-10.btor2 generated by ./beator-32
; with --linear-address-space
; with --heap-allowance 4
; with --stack-allowance 28

; RISC-V code obtained from examples/symbolic/recursive-fibonacci-1-10.c and invoked as: examples/symbolic/recursive-fibonacci-1-10.c
; with --constant-propagation

1 sort bitvec 1 ; Boolean
2 sort bitvec 32 ; 32-bit machine word

4 sort bitvec 30 ; 30-bit linear address
5 sort array 4 2 ; 30-bit physical memory

; 128B total memory, 4B data, 12B heap (8B,4B), 112B stack (84B,28B)

10 zero 1
11 one 1

20 zero 2
21 one 2
22 constd 2 2
23 constd 2 3
24 constd 2 4

; start of data segment in 32-bit virtual memory
30 constd 2 69632 ; 0x11000
; end of data segment in 32-bit virtual memory
31 constd 2 69636 ; 0x11004

; start of heap segment in 32-bit virtual memory (initial program break)
32 constd 2 73728 ; 0x12000
; current end of heap segment in 32-bit virtual memory (current program break)
33 constd 2 73736 ; 0x12008

; allowed end of heap segment in 32-bit virtual memory (with 4B allowance)
34 constd 2 73740 ; 0x1200C
; allowed start of stack segment in 32-bit virtual memory (with 28B allowance)
35 constd 2 4294967184 ; 0xFFFFFF90

; start of data segment in 30-bit linear memory
40 constd 4 17408 ; 0x4400
; end of data segment in 30-bit linear memory
41 constd 4 17409 ; 0x4401

; start of heap segment in 30-bit linear memory (initial program break)
42 constd 4 18432 ; 0x4800
; current end of heap segment in 30-bit linear memory (current program break)
43 constd 4 18434 ; 0x4802

; allowed end of heap segment in 30-bit linear memory (with 4B allowance)
44 constd 4 18435 ; 0x4803
; allowed start of stack segment in 30-bit linear memory (with 28B allowance)
45 constd 4 1073741796 ; 0x3FFFFFE4

; highest address in 32-bit virtual address space (4GB)

50 constd 2 4294967292 ; 0xFFFFFFFC

; kernel-mode flag

60 state 1 kernel-mode
61 init 1 60 10 kernel-mode ; initial value is false
62 not 1 60

; unsigned-extended inputs for byte-wise reading

71 sort bitvec 8 ; 1 byte
72 sort bitvec 16 ; 2 bytes
73 sort bitvec 24 ; 3 bytes

81 input 71 1-byte-input
82 input 72 2-byte-input
83 input 73 3-byte-input

91 uext 2 81 24 ; uext-1-byte-input
92 uext 2 82 16 ; uext-2-byte-input
93 uext 2 83 8 ; uext-3-byte-input
94 input 2 4-byte-input

; 32 32-bit general-purpose registers

; non-zero initial register values

101 constd 2 66128 ; 0x10250 for ra
102 constd 2 4294967212 ; 0xFFFFFFAC for sp
103 constd 2 69636 ; 0x11004 for gp
105 constd 2 1 ; 0x1 for t0
108 constd 2 4294967220 ; 0xFFFFFFB4 for s0
111 constd 2 73728 ; 0x12000 for a1
112 constd 2 1 ; 0x1 for a2
116 constd 2 1074148576 ; 0x400634E0 for a6
117 constd 2 63 ; 0x3F for a7

; registers

200 zero 2 zero ; register $0 is always 0
201 state 2 ra ; register $1
202 state 2 sp ; register $2
203 state 2 gp ; register $3
204 state 2 tp ; register $4
205 state 2 t0 ; register $5
206 state 2 t1 ; register $6
207 state 2 t2 ; register $7
208 state 2 s0 ; register $8
209 state 2 s1 ; register $9
210 state 2 a0 ; register $10
211 state 2 a1 ; register $11
212 state 2 a2 ; register $12
213 state 2 a3 ; register $13
214 state 2 a4 ; register $14
215 state 2 a5 ; register $15
216 state 2 a6 ; register $16
217 state 2 a7 ; register $17
218 state 2 s2 ; register $18
219 state 2 s3 ; register $19
220 state 2 s4 ; register $20
221 state 2 s5 ; register $21
222 state 2 s6 ; register $22
223 state 2 s7 ; register $23
224 state 2 s8 ; register $24
225 state 2 s9 ; register $25
226 state 2 s10 ; register $26
227 state 2 s11 ; register $27
228 state 2 t3 ; register $28
229 state 2 t4 ; register $29
230 state 2 t5 ; register $30
231 state 2 t6 ; register $31

; initializing registers

301 init 2 201 101 ra ; initial value is 66128
302 init 2 202 102 sp ; initial value is 4294967212
303 init 2 203 103 gp ; initial value is 69636
304 init 2 204 20 tp ; initial value is 0
305 init 2 205 105 t0 ; initial value is 1
306 init 2 206 20 t1 ; initial value is 0
307 init 2 207 20 t2 ; initial value is 0
308 init 2 208 108 s0 ; initial value is 4294967220
309 init 2 209 20 s1 ; initial value is 0
310 init 2 210 20 a0 ; initial value is 0
311 init 2 211 111 a1 ; initial value is 73728
312 init 2 212 112 a2 ; initial value is 1
313 init 2 213 20 a3 ; initial value is 0
314 init 2 214 20 a4 ; initial value is 0
315 init 2 215 20 a5 ; initial value is 0
316 init 2 216 116 a6 ; initial value is 1074148576
317 init 2 217 117 a7 ; initial value is 63
318 init 2 218 20 s2 ; initial value is 0
319 init 2 219 20 s3 ; initial value is 0
320 init 2 220 20 s4 ; initial value is 0
321 init 2 221 20 s5 ; initial value is 0
322 init 2 222 20 s6 ; initial value is 0
323 init 2 223 20 s7 ; initial value is 0
324 init 2 224 20 s8 ; initial value is 0
325 init 2 225 20 s9 ; initial value is 0
326 init 2 226 20 s10 ; initial value is 0
327 init 2 227 20 s11 ; initial value is 0
328 init 2 228 20 t3 ; initial value is 0
329 init 2 229 20 t4 ; initial value is 0
330 init 2 230 20 t5 ; initial value is 0
331 init 2 231 20 t6 ; initial value is 0

; 32-bit program counter encoded in Boolean flags

; 16553600 unreachable state at 10000
; 16554000 unreachable state at 10004
; 16554400 unreachable state at 10008
; 16554800 unreachable state at 1000C
; 16555200 unreachable state at 10010
; 16555600 unreachable state at 10014
; 16556000 unreachable state at 10018
; 16556400 unreachable state at 1001C
; 16556800 unreachable state at 10020
; 16557200 unreachable state at 10024
; 16557600 unreachable state at 10028
; 16558000 unreachable state at 1002C
; 16558400 unreachable state at 10030
; 16558800 unreachable state at 10034
; 16559200 unreachable state at 10038
; 16559600 unreachable state at 1003C
; 16560000 unreachable state at 10040
; 16560400 unreachable state at 10044
; 16560800 unreachable state at 10048
; 16561200 unreachable state at 1004C
16561600 state 1 pc=0x10050
16561601 init 1 16561600 10
16562000 state 1 pc=0x10054
16562001 init 1 16562000 10
16562400 state 1 pc=0x10058
16562401 init 1 16562400 10
16562800 state 1 pc=0x1005C
16562801 init 1 16562800 10
16563200 state 1 pc=0x10060
16563201 init 1 16563200 10
16563600 state 1 pc=0x10064
16563601 init 1 16563600 10
; 16564000 unreachable state at 10068
; 16564400 unreachable state at 1006C
; 16564800 unreachable state at 10070
; 16565200 unreachable state at 10074
; 16565600 unreachable state at 10078
; 16566000 unreachable state at 1007C
; 16566400 unreachable state at 10080
16566800 state 1 pc=0x10084
16566801 init 1 16566800 11 ; initial program counter
16567200 state 1 pc=0x10088
16567201 init 1 16567200 10
; 16567600 unreachable state at 1008C
; 16568000 unreachable state at 10090
; 16568400 unreachable state at 10094
; 16568800 unreachable state at 10098
; 16569200 unreachable state at 1009C
; 16569600 unreachable state at 100A0
; 16570000 unreachable state at 100A4
; 16570400 unreachable state at 100A8
; 16570800 unreachable state at 100AC
; 16571200 unreachable state at 100B0
; 16571600 unreachable state at 100B4
; 16572000 unreachable state at 100B8
; 16572400 unreachable state at 100BC
; 16572800 unreachable state at 100C0
; 16573200 unreachable state at 100C4
; 16573600 unreachable state at 100C8
; 16574000 unreachable state at 100CC
; 16574400 unreachable state at 100D0
; 16574800 unreachable state at 100D4
; 16575200 unreachable state at 100D8
; 16575600 unreachable state at 100DC
; 16576000 unreachable state at 100E0
; 16576400 unreachable state at 100E4
; 16576800 unreachable state at 100E8
; 16577200 unreachable state at 100EC
; 16577600 unreachable state at 100F0
; 16578000 unreachable state at 100F4
; 16578400 unreachable state at 100F8
; 16578800 unreachable state at 100FC
; 16579200 unreachable state at 10100
; 16579600 unreachable state at 10104
; 16580000 unreachable state at 10108
; 16580400 unreachable state at 1010C
; 16580800 unreachable state at 10110
; 16581200 unreachable state at 10114
; 16581600 unreachable state at 10118
; 16582000 unreachable state at 1011C
; 16582400 unreachable state at 10120
; 16582800 unreachable state at 10124
; 16583200 unreachable state at 10128
; 16583600 unreachable state at 1012C
; 16584000 unreachable state at 10130
; 16584400 unreachable state at 10134
; 16584800 unreachable state at 10138
; 16585200 unreachable state at 1013C
16585600 state 1 pc=0x10140
16585601 init 1 16585600 10
16586000 state 1 pc=0x10144
16586001 init 1 16586000 10
16586400 state 1 pc=0x10148
16586401 init 1 16586400 10
16586800 state 1 pc=0x1014C
16586801 init 1 16586800 10
16587200 state 1 pc=0x10150
16587201 init 1 16587200 10
16587600 state 1 pc=0x10154
16587601 init 1 16587600 10
16588000 state 1 pc=0x10158
16588001 init 1 16588000 10
16588400 state 1 pc=0x1015C
16588401 init 1 16588400 10
16588800 state 1 pc=0x10160
16588801 init 1 16588800 10
16589200 state 1 pc=0x10164
16589201 init 1 16589200 10
16589600 state 1 pc=0x10168
16589601 init 1 16589600 10
16590000 state 1 pc=0x1016C
16590001 init 1 16590000 10
16590400 state 1 pc=0x10170
16590401 init 1 16590400 10
16590800 state 1 pc=0x10174
16590801 init 1 16590800 10
; 16591200 unreachable state at 10178
16591600 state 1 pc=0x1017C
16591601 init 1 16591600 10
16592000 state 1 pc=0x10180
16592001 init 1 16592000 10
16592400 state 1 pc=0x10184
16592401 init 1 16592400 10
16592800 state 1 pc=0x10188
16592801 init 1 16592800 10
16593200 state 1 pc=0x1018C
16593201 init 1 16593200 10
16593600 state 1 pc=0x10190
16593601 init 1 16593600 10
16594000 state 1 pc=0x10194
16594001 init 1 16594000 10
16594400 state 1 pc=0x10198
16594401 init 1 16594400 10
16594800 state 1 pc=0x1019C
16594801 init 1 16594800 10
16595200 state 1 pc=0x101A0
16595201 init 1 16595200 10
16595600 state 1 pc=0x101A4
16595601 init 1 16595600 10
16596000 state 1 pc=0x101A8
16596001 init 1 16596000 10
16596400 state 1 pc=0x101AC
16596401 init 1 16596400 10
16596800 state 1 pc=0x101B0
16596801 init 1 16596800 10
16597200 state 1 pc=0x101B4
16597201 init 1 16597200 10
16597600 state 1 pc=0x101B8
16597601 init 1 16597600 10
16598000 state 1 pc=0x101BC
16598001 init 1 16598000 10
16598400 state 1 pc=0x101C0
16598401 init 1 16598400 10
16598800 state 1 pc=0x101C4
16598801 init 1 16598800 10
16599200 state 1 pc=0x101C8
16599201 init 1 16599200 10
16599600 state 1 pc=0x101CC
16599601 init 1 16599600 10
16600000 state 1 pc=0x101D0
16600001 init 1 16600000 10
16600400 state 1 pc=0x101D4
16600401 init 1 16600400 10
16600800 state 1 pc=0x101D8
16600801 init 1 16600800 10
16601200 state 1 pc=0x101DC
16601201 init 1 16601200 10
16601600 state 1 pc=0x101E0
16601601 init 1 16601600 10
16602000 state 1 pc=0x101E4
16602001 init 1 16602000 10
16602400 state 1 pc=0x101E8
16602401 init 1 16602400 10
16602800 state 1 pc=0x101EC
16602801 init 1 16602800 10
; 16603200 unreachable state at 101F0
; 16603600 unreachable state at 101F4
; 16604000 unreachable state at 101F8
; 16604400 unreachable state at 101FC
; 16604800 unreachable state at 10200
; 16605200 unreachable state at 10204
; 16605600 unreachable state at 10208
; 16606000 unreachable state at 1020C
; 16606400 unreachable state at 10210
; 16606800 unreachable state at 10214
; 16607200 unreachable state at 10218
; 16607600 unreachable state at 1021C
; 16608000 unreachable state at 10220
; 16608400 unreachable state at 10224
; 16608800 unreachable state at 10228
; 16609200 unreachable state at 1022C
; 16609600 unreachable state at 10230
; 16610000 unreachable state at 10234
; 16610400 unreachable state at 10238
; 16610800 unreachable state at 1023C
; 16611200 unreachable state at 10240
; 16611600 unreachable state at 10244
; 16612000 unreachable state at 10248
; 16612400 unreachable state at 1024C
16612800 state 1 pc=0x10250
16612801 init 1 16612800 10
16613200 state 1 pc=0x10254
16613201 init 1 16613200 10
16613600 state 1 pc=0x10258
16613601 init 1 16613600 10
16614000 state 1 pc=0x1025C
16614001 init 1 16614000 10
16614400 state 1 pc=0x10260
16614401 init 1 16614400 10
16614800 state 1 pc=0x10264
16614801 init 1 16614800 10
16615200 state 1 pc=0x10268
16615201 init 1 16615200 10
16615600 state 1 pc=0x1026C
16615601 init 1 16615600 10
16616000 state 1 pc=0x10270
16616001 init 1 16616000 10
16616400 state 1 pc=0x10274
16616401 init 1 16616400 10
16616800 state 1 pc=0x10278
16616801 init 1 16616800 10
16617200 state 1 pc=0x1027C
16617201 init 1 16617200 10
16617600 state 1 pc=0x10280
16617601 init 1 16617600 10
16618000 state 1 pc=0x10284
16618001 init 1 16618000 10
16618400 state 1 pc=0x10288
16618401 init 1 16618400 10
16618800 state 1 pc=0x1028C
16618801 init 1 16618800 10
16619200 state 1 pc=0x10290
16619201 init 1 16619200 10
16619600 state 1 pc=0x10294
16619601 init 1 16619600 10
16620000 state 1 pc=0x10298
16620001 init 1 16620000 10
16620400 state 1 pc=0x1029C
16620401 init 1 16620400 10
16620800 state 1 pc=0x102A0
16620801 init 1 16620800 10
16621200 state 1 pc=0x102A4
16621201 init 1 16621200 10
16621600 state 1 pc=0x102A8
16621601 init 1 16621600 10
16622000 state 1 pc=0x102AC
16622001 init 1 16622000 10
; 16622400 unreachable state at 102B0
16622800 state 1 pc=0x102B4
16622801 init 1 16622800 10
16623200 state 1 pc=0x102B8
16623201 init 1 16623200 10
16623600 state 1 pc=0x102BC
16623601 init 1 16623600 10
16624000 state 1 pc=0x102C0
16624001 init 1 16624000 10
16624400 state 1 pc=0x102C4
16624401 init 1 16624400 10
16624800 state 1 pc=0x102C8
16624801 init 1 16624800 10
16625200 state 1 pc=0x102CC
16625201 init 1 16625200 10
16625600 state 1 pc=0x102D0
16625601 init 1 16625600 10
16626000 state 1 pc=0x102D4
16626001 init 1 16626000 10

16963200 state 5 memory-dump

; data segment

16963201 constd 4 17408 ; 0x4400 paddr, 0x11000 vaddr
16963202 constd 2 73736 ; 0x12008 word
16963203 write 5 16963200 16963201 16963202

; heap segment

17372800 constd 4 18432 ; 0x4800 paddr, 0x12000 vaddr
17372801 write 5 16963203 17372800 20
17373200 constd 4 18433 ; 0x4801 paddr, 0x12004 vaddr
17373201 write 5 17372801 17373200 20
17373600 constd 4 18434 ; 0x4802 paddr, 0x12008 vaddr
17373601 write 5 17373201 17373600 20

; stack segment

17374000 constd 4 1073741796 ; 0x3FFFFFE4 paddr, 0xFFFFFF90 vaddr
17374001 write 5 17373601 17374000 20
17374400 constd 4 1073741797 ; 0x3FFFFFE5 paddr, 0xFFFFFF94 vaddr
17374401 write 5 17374001 17374400 20
17374800 constd 4 1073741798 ; 0x3FFFFFE6 paddr, 0xFFFFFF98 vaddr
17374801 write 5 17374401 17374800 20
17375200 constd 4 1073741799 ; 0x3FFFFFE7 paddr, 0xFFFFFF9C vaddr
17375201 write 5 17374801 17375200 20
17375600 constd 4 1073741800 ; 0x3FFFFFE8 paddr, 0xFFFFFFA0 vaddr
17375601 write 5 17375201 17375600 20
17376000 constd 4 1073741801 ; 0x3FFFFFE9 paddr, 0xFFFFFFA4 vaddr
17376001 constd 2 73728 ; 0x12000 word
17376002 write 5 17375601 17376000 17376001
17376400 constd 4 1073741802 ; 0x3FFFFFEA paddr, 0xFFFFFFA8 vaddr
17376401 constd 2 1 ; 0x1 word
17376402 write 5 17376002 17376400 17376401
17376800 constd 4 1073741803 ; 0x3FFFFFEB paddr, 0xFFFFFFAC vaddr
17376801 constd 2 73728 ; 0x12000 word
17376802 write 5 17376402 17376800 17376801
17377200 constd 4 1073741804 ; 0x3FFFFFEC paddr, 0xFFFFFFB0 vaddr
17377201 write 5 17376802 17377200 20
17377600 constd 4 1073741805 ; 0x3FFFFFED paddr, 0xFFFFFFB4 vaddr
17377601 write 5 17377201 17377600 20
17378000 constd 4 1073741806 ; 0x3FFFFFEE paddr, 0xFFFFFFB8 vaddr
17378001 constd 2 65616 ; 0x10050 word
17378002 write 5 17377601 17378000 17378001
17378400 constd 4 1073741807 ; 0x3FFFFFEF paddr, 0xFFFFFFBC vaddr
17378401 constd 2 1 ; 0x1 word
17378402 write 5 17378002 17378400 17378401
17378800 constd 4 1073741808 ; 0x3FFFFFF0 paddr, 0xFFFFFFC0 vaddr
17378801 constd 2 4294967236 ; 0xFFFFFFC4 word
17378802 write 5 17378402 17378800 17378801
17379200 constd 4 1073741809 ; 0x3FFFFFF1 paddr, 0xFFFFFFC4 vaddr
17379201 constd 2 4294967248 ; 0xFFFFFFD0 word
17379202 write 5 17378802 17379200 17379201
17379600 constd 4 1073741810 ; 0x3FFFFFF2 paddr, 0xFFFFFFC8 vaddr
17379601 write 5 17379202 17379600 20
17380000 constd 4 1073741811 ; 0x3FFFFFF3 paddr, 0xFFFFFFCC vaddr
17380001 write 5 17379601 17380000 20
17380400 constd 4 1073741812 ; 0x3FFFFFF4 paddr, 0xFFFFFFD0 vaddr
17380401 constd 2 1835104357 ; 0x6D617865 word
17380402 write 5 17380001 17380400 17380401
17380800 constd 4 1073741813 ; 0x3FFFFFF5 paddr, 0xFFFFFFD4 vaddr
17380801 constd 2 1936026736 ; 0x73656C70 word
17380802 write 5 17380402 17380800 17380801
17381200 constd 4 1073741814 ; 0x3FFFFFF6 paddr, 0xFFFFFFD8 vaddr
17381201 constd 2 1836675887 ; 0x6D79732F word
17381202 write 5 17380802 17381200 17381201
17381600 constd 4 1073741815 ; 0x3FFFFFF7 paddr, 0xFFFFFFDC vaddr
17381601 constd 2 1768714082 ; 0x696C6F62 word
17381602 write 5 17381202 17381600 17381601
17382000 constd 4 1073741816 ; 0x3FFFFFF8 paddr, 0xFFFFFFE0 vaddr
17382001 constd 2 1701982051 ; 0x65722F63 word
17382002 write 5 17381602 17382000 17382001
17382400 constd 4 1073741817 ; 0x3FFFFFF9 paddr, 0xFFFFFFE4 vaddr
17382401 constd 2 1936880995 ; 0x73727563 word
17382402 write 5 17382002 17382400 17382401
17382800 constd 4 1073741818 ; 0x3FFFFFFA paddr, 0xFFFFFFE8 vaddr
17382801 constd 2 761624169 ; 0x2D657669 word
17382802 write 5 17382402 17382800 17382801
17383200 constd 4 1073741819 ; 0x3FFFFFFB paddr, 0xFFFFFFEC vaddr
17383201 constd 2 1868720486 ; 0x6F626966 word
17383202 write 5 17382802 17383200 17383201
17383600 constd 4 1073741820 ; 0x3FFFFFFC paddr, 0xFFFFFFF0 vaddr
17383601 constd 2 1667457390 ; 0x6363616E word
17383602 write 5 17383202 17383600 17383601
17384000 constd 4 1073741821 ; 0x3FFFFFFD paddr, 0xFFFFFFF4 vaddr
17384001 constd 2 758197609 ; 0x2D312D69 word
17384002 write 5 17383602 17384000 17384001
17384400 constd 4 1073741822 ; 0x3FFFFFFE paddr, 0xFFFFFFF8 vaddr
17384401 constd 2 1663971377 ; 0x632E3031 word
17384402 write 5 17384002 17384400 17384401
17384800 constd 4 1073741823 ; 0x3FFFFFFF paddr, 0xFFFFFFFC vaddr
17384801 constd 2 805317888 ; 0x30002D00 word
17384802 write 5 17384402 17384800 17384801

; 30-bit physical memory

20000000 state 5 physical-memory ; data, heap, stack segments
20000001 init 5 20000000 17384802 ; loading data, heap, stack segments into memory

; data flow

36561200 constd 2 65616 ; 0x10050
36561600 constd 2 -4 ; 0xFFFFFFFC
36561601 add 2 202 36561600
36561602 ite 2 16561600 36561601 202 ; 0x10050(~1): addi sp,sp,-4
36562000 slice 4 202 31 2
36562001 ite 2 16562000 202 30 ; for checking address validity
36562002 write 5 20000000 36562000 210
36562003 ite 5 16562000 36562002 20000000 ; 0x10054(~1): sw a0,0(sp)
36562400 slice 4 202 31 2
36562401 ite 2 16562400 202 36562001 ; for checking address validity
36562402 read 2 20000000 36562400
36562403 ite 2 16562400 36562402 210 ; 0x10058(~1): lw a0,0(sp)
36562800 constd 2 4 ; 0x4
36562801 add 2 202 36562800
36562802 ite 2 16562800 36562801 36561602 ; 0x1005C(~1): addi sp,sp,4
36563200 constd 2 93 ; 0x5D
36563201 ite 2 16563200 36563200 217 ; 0x10060(~1): addi a7,zero,93
36563600 ite 1 16563600 11 10 ; 0x10064(~1): ecall
36566800 ite 1 16566800 11 36563600 ; 0x10084(~1): ecall
36585600 constd 2 -4 ; 0xFFFFFFFC
36585601 add 2 202 36585600
36585602 ite 2 16585600 36585601 36562802 ; 0x10140(~2): addi sp,sp,-4
36586000 slice 4 202 31 2
36586001 ite 2 16586000 202 36562401 ; for checking address validity
36586002 write 5 20000000 36586000 201
36586003 ite 5 16586000 36586002 36562003 ; 0x10144(~2): sw ra,0(sp)
36586400 constd 2 -4 ; 0xFFFFFFFC
36586401 add 2 202 36586400
36586402 ite 2 16586400 36586401 36585602 ; 0x10148(~2): addi sp,sp,-4
36586800 slice 4 202 31 2
36586801 ite 2 16586800 202 36586001 ; for checking address validity
36586802 write 5 20000000 36586800 208
36586803 ite 5 16586800 36586802 36586003 ; 0x1014C(~2): sw s0,0(sp)
36587200 ite 2 16587200 202 208 ; 0x10150(~2): addi s0,sp,0
36587600 constd 2 8 ; 0x8
36587601 add 2 208 36587600
36587602 slice 4 36587601 31 2
36587603 ite 2 16587600 36587601 36586801 ; for checking address validity
36587604 read 2 20000000 36587602
36587605 ite 2 16587600 36587604 205 ; 0x10154(~2): lw t0,8(s0)
36588000 constd 2 1 ; 0x1
36588001 ite 2 16588000 36588000 206 ; 0x10158(~2): addi t1,zero,1
36588400 ult 1 206 205
36588401 uext 2 36588400 31
36588402 ite 2 16588400 36588401 36587605 ; 0x1015C(~2): sltu t0,t1,t0
36588800 constd 2 1 ; 0x1
36588801 ite 2 16588800 36588800 36588001 ; 0x10160(~2): addi t1,zero,1
36589200 sub 2 206 205
36589201 ite 2 16589200 36589200 36588402 ; 0x10164(~2): sub t0,t1,t0
36589600 eq 1 205 200 ; 0x10168(~2): beq t0,zero,5
36589601 not 1 36589600
36590000 constd 2 8 ; 0x8
36590001 add 2 208 36590000
36590002 slice 4 36590001 31 2
36590003 ite 2 16590000 36590001 36587603 ; for checking address validity
36590004 read 2 20000000 36590002
36590005 ite 2 16590000 36590004 36589201 ; 0x1016C(~3): lw t0,8(s0)
36590400 ite 2 16590400 205 36562403 ; 0x10170(~3): addi a0,t0,0
36591600 constd 2 8 ; 0x8
36591601 add 2 208 36591600
36591602 slice 4 36591601 31 2
36591603 ite 2 16591600 36591601 36590003 ; for checking address validity
36591604 read 2 20000000 36591602
36591605 ite 2 16591600 36591604 36590005 ; 0x1017C(~5): lw t0,8(s0)
36592000 constd 2 1 ; 0x1
36592001 ite 2 16592000 36592000 36588801 ; 0x10180(~5): addi t1,zero,1
36592400 sub 2 205 206
36592401 ite 2 16592400 36592400 36591605 ; 0x10184(~5): sub t0,t0,t1
36592800 constd 2 -4 ; 0xFFFFFFFC
36592801 add 2 202 36592800
36592802 ite 2 16592800 36592801 36586402 ; 0x10188(~5): addi sp,sp,-4
36593200 slice 4 202 31 2
36593201 ite 2 16593200 202 36591603 ; for checking address validity
36593202 write 5 20000000 36593200 205
36593203 ite 5 16593200 36593202 36586803 ; 0x1018C(~5): sw t0,0(sp)
36593600 constd 2 65940 ; 0x10194
36593601 ite 2 16593600 36593600 201 ; 0x10190(~5): jal ra,-20
36594000 ite 2 16594000 210 36592401 ; 0x10194(~5): addi t0,a0,0
36594400 ite 2 16594400 200 36590400 ; 0x10198(~5): addi a0,zero,0
36594800 constd 2 -4 ; 0xFFFFFFFC
36594801 add 2 202 36594800
36594802 ite 2 16594800 36594801 36592802 ; 0x1019C(~5): addi sp,sp,-4
36595200 slice 4 202 31 2
36595201 ite 2 16595200 202 36593201 ; for checking address validity
36595202 write 5 20000000 36595200 205
36595203 ite 5 16595200 36595202 36593203 ; 0x101A0(~5): sw t0,0(sp)
36595600 constd 2 8 ; 0x8
36595601 add 2 208 36595600
36595602 slice 4 36595601 31 2
36595603 ite 2 16595600 36595601 36595201 ; for checking address validity
36595604 read 2 20000000 36595602
36595605 ite 2 16595600 36595604 36594000 ; 0x101A4(~5): lw t0,8(s0)
36596000 constd 2 2 ; 0x2
36596001 ite 2 16596000 36596000 36592001 ; 0x101A8(~5): addi t1,zero,2
36596400 sub 2 205 206
36596401 ite 2 16596400 36596400 36595605 ; 0x101AC(~5): sub t0,t0,t1
36596800 constd 2 -4 ; 0xFFFFFFFC
36596801 add 2 202 36596800
36596802 ite 2 16596800 36596801 36594802 ; 0x101B0(~5): addi sp,sp,-4
36597200 slice 4 202 31 2
36597201 ite 2 16597200 202 36595603 ; for checking address validity
36597202 write 5 20000000 36597200 205
36597203 ite 5 16597200 36597202 36595203 ; 0x101B4(~5): sw t0,0(sp)
36597600 constd 2 65980 ; 0x101BC
36597601 ite 2 16597600 36597600 36593601 ; 0x101B8(~5): jal ra,-30
36598000 slice 4 202 31 2
36598001 ite 2 16598000 202 36597201 ; for checking address validity
36598002 read 2 20000000 36598000
36598003 ite 2 16598000 36598002 36596401 ; 0x101BC(~5): lw t0,0(sp)
36598400 constd 2 4 ; 0x4
36598401 add 2 202 36598400
36598402 ite 2 16598400 36598401 36596802 ; 0x101C0(~5): addi sp,sp,4
36598800 ite 2 16598800 210 36596001 ; 0x101C4(~5): addi t1,a0,0
36599200 ite 2 16599200 200 36594400 ; 0x101C8(~5): addi a0,zero,0
36599600 add 2 205 206
36599601 ite 2 16599600 36599600 36598003 ; 0x101CC(~5): add t0,t0,t1
36600000 ite 2 16600000 205 36599200 ; 0x101D0(~5): addi a0,t0,0
36600800 ite 2 16600800 208 36598402 ; 0x101D8(~6): addi sp,s0,0
36601200 slice 4 202 31 2
36601201 ite 2 16601200 202 36598001 ; for checking address validity
36601202 read 2 20000000 36601200
36601203 ite 2 16601200 36601202 36587200 ; 0x101DC(~6): lw s0,0(sp)
36601600 constd 2 4 ; 0x4
36601601 add 2 202 36601600
36601602 ite 2 16601600 36601601 36600800 ; 0x101E0(~6): addi sp,sp,4
36602000 slice 4 202 31 2
36602001 ite 2 16602000 202 36601201 ; for checking address validity
36602002 read 2 20000000 36602000
36602003 ite 2 16602000 36602002 36597601 ; 0x101E4(~6): lw ra,0(sp)
36602400 constd 2 8 ; 0x8
36602401 add 2 202 36602400
36602402 ite 2 16602400 36602401 36601602 ; 0x101E8(~6): addi sp,sp,8
36606800 constd 2 66072 ; 0x10218
36612400 constd 2 66128 ; 0x10250
36612800 ite 2 16612800 200 36600000 ; 0x10250(~16): addi a0,zero,0
36613200 constd 2 -8 ; 0xFFFFFFF8
36613201 add 2 208 36613200
36613202 slice 4 36613201 31 2
36613203 ite 2 16613200 36613201 36602001 ; for checking address validity
36613204 read 2 20000000 36613202
36613205 ite 2 16613200 36613204 36599601 ; 0x10254(~18): lw t0,-8(s0)
36613600 constd 2 -8 ; 0xFFFFFFF8
36613601 add 2 208 36613600
36613602 slice 4 36613601 31 2
36613603 ite 2 16613600 36613601 36613203 ; for checking address validity
36613604 read 2 20000000 36613602
36613605 ite 2 16613600 36613604 36598800 ; 0x10258(~18): lw t1,-8(s0)
36614000 slice 4 206 31 2
36614001 ite 2 16614000 206 36613603 ; for checking address validity
36614002 read 2 20000000 36614000
36614003 ite 2 16614000 36614002 36613605 ; 0x1025C(~18): lw t1,0(t1)
36614400 constd 2 46 ; 0x2E
36614401 ite 2 16614400 36614400 207 ; 0x10260(~18): addi t2,zero,46
36614800 sub 2 206 207
36614801 ite 2 16614800 36614800 36614003 ; 0x10264(~18): sub t1,t1,t2
36615200 slice 4 205 31 2
36615201 ite 2 16615200 205 36614001 ; for checking address validity
36615202 write 5 20000000 36615200 206
36615203 ite 5 16615200 36615202 36597203 ; 0x10268(~18): sw t1,0(t0)
36615600 constd 2 -8 ; 0xFFFFFFF8
36615601 add 2 208 36615600
36615602 slice 4 36615601 31 2
36615603 ite 2 16615600 36615601 36615201 ; for checking address validity
36615604 read 2 20000000 36615602
36615605 ite 2 16615600 36615604 36613205 ; 0x1026C(~21): lw t0,-8(s0)
36616000 slice 4 205 31 2
36616001 ite 2 16616000 205 36615603 ; for checking address validity
36616002 read 2 20000000 36616000
36616003 ite 2 16616000 36616002 36615605 ; 0x10270(~21): lw t0,0(t0)
36616400 constd 2 -4 ; 0xFFFFFFFC
36616401 add 2 202 36616400
36616402 ite 2 16616400 36616401 36602402 ; 0x10274(~21): addi sp,sp,-4
36616800 slice 4 202 31 2
36616801 ite 2 16616800 202 36616001 ; for checking address validity
36616802 write 5 20000000 36616800 205
36616803 ite 5 16616800 36616802 36615203 ; 0x10278(~21): sw t0,0(sp)
36617200 constd 2 66176 ; 0x10280
36617201 ite 2 16617200 36617200 36602003 ; 0x1027C(~21): jal ra,-79
36617600 ite 2 16617600 210 36616003 ; 0x10280(~21): addi t0,a0,0
36618000 ite 2 16618000 200 36612800 ; 0x10284(~21): addi a0,zero,0
36618400 constd 2 -4 ; 0xFFFFFFFC
36618401 add 2 208 36618400
36618402 slice 4 36618401 31 2
36618403 ite 2 16618400 36618401 36616801 ; for checking address validity
36618404 write 5 20000000 36618402 205
36618405 ite 5 16618400 36618404 36616803 ; 0x10288(~21): sw t0,-4(s0)
36618800 constd 2 -4 ; 0xFFFFFFFC
36618801 add 2 208 36618800
36618802 slice 4 36618801 31 2
36618803 ite 2 16618800 36618801 36618403 ; for checking address validity
36618804 read 2 20000000 36618802
36618805 ite 2 16618800 36618804 36617600 ; 0x1028C(~23): lw t0,-4(s0)
36619200 constd 2 2 ; 0x2
36619201 ite 2 16619200 36619200 36614801 ; 0x10290(~23): addi t1,zero,2
36619600 sub 2 206 205
36619601 ite 2 16619600 36619600 36618805 ; 0x10294(~23): sub t0,t1,t0
36620000 constd 2 1 ; 0x1
36620001 ite 2 16620000 36620000 36619201 ; 0x10298(~23): addi t1,zero,1
36620400 ult 1 205 206
36620401 uext 2 36620400 31
36620402 ite 2 16620400 36620401 36619601 ; 0x1029C(~23): sltu t0,t0,t1
36620800 eq 1 205 200 ; 0x102A0(~23): beq t0,zero,5
36620801 not 1 36620800
36621200 constd 2 1 ; 0x1
36621201 ite 2 16621200 36621200 36620402 ; 0x102A4(~25): addi t0,zero,1
36621600 ite 2 16621600 205 36618000 ; 0x102A8(~25): addi a0,t0,0
36622800 ite 2 16622800 200 36621201 ; 0x102B4(~27): addi t0,zero,0
36623200 ite 2 16623200 205 36621600 ; 0x102B8(~27): addi a0,t0,0
36624000 ite 2 16624000 208 36616402 ; 0x102C0(~28): addi sp,s0,0
36624400 slice 4 202 31 2
36624401 ite 2 16624400 202 36618803 ; for checking address validity
36624402 read 2 20000000 36624400
36624403 ite 2 16624400 36624402 36601203 ; 0x102C4(~28): lw s0,0(sp)
36624800 constd 2 4 ; 0x4
36624801 add 2 202 36624800
36624802 ite 2 16624800 36624801 36624000 ; 0x102C8(~28): addi sp,sp,4
36625200 slice 4 202 31 2
36625201 ite 2 16625200 202 36624401 ; for checking address validity
36625202 read 2 20000000 36625200
36625203 ite 2 16625200 36625202 36617201 ; 0x102CC(~28): lw ra,0(sp)
36625600 constd 2 4 ; 0x4
36625601 add 2 202 36625600
36625602 ite 2 16625600 36625601 36624802 ; 0x102D0(~28): addi sp,sp,4

; syscalls

40000000 constd 2 93 ; SYSCALL_EXIT
40000001 constd 2 63 ; SYSCALL_READ
40000002 constd 2 64 ; SYSCALL_WRITE
40000003 constd 2 56 ; SYSCALL_OPENAT
40000004 constd 2 214 ; SYSCALL_BRK

40000010 eq 1 217 40000000 ; $a7 == SYSCALL_EXIT
40000011 eq 1 217 40000001 ; $a7 == SYSCALL_READ
40000012 eq 1 217 40000002 ; $a7 == SYSCALL_WRITE
40000013 eq 1 217 40000003 ; $a7 == SYSCALL_OPENAT
40000014 eq 1 217 40000004 ; $a7 == SYSCALL_BRK

41000000 and 1 36566800 40000010 ; exit ecall is active
41000001 ite 1 60 40000010 41000000 ; stay in kernel mode indefinitely if exit ecall is active

42000000 and 1 36566800 40000011 ; read ecall is active
42000001 ite 2 42000000 211 36625201 ; $a1 is start address of buffer for checking address validity
42000002 ite 1 42000000 11 41000001 ; go into kernel mode if read ecall is active
42000003 ite 2 42000000 20 36623200 ; set $a0 = 0 bytes if read ecall is active
42000004 sub 2 212 210 ; $a2 - $a0
42000005 ugte 1 42000004 24 ; $a2 - $a0 >= 4 bytes
42000006 ite 2 42000005 24 42000004 ; read 4 bytes if $a2 - $a0 >= 4 bytes, or else $a2 - $a0 bytes
42000007 eq 1 42000006 22 ; increment == 2
42000008 ite 2 42000007 92 91 ; unsigned-extended 2-byte input if increment == 2, or else unsigned-extended 1-byte input
42000009 eq 1 42000006 23 ; increment == 3
42000010 ite 2 42000009 93 42000008 ; unsigned-extended 3-byte input if increment == 3
42000011 eq 1 42000006 24 ; increment == 4
42000012 ite 2 42000011 94 42000010 ; 4-byte input if increment == 4
42000013 add 2 211 210 ; $a1 + $a0
42000014 slice 4 42000013 31 2
42000015 write 5 20000000 42000014 42000012 ; memory[$a1 + $a0] = input
42000016 ult 1 210 212 ; $a0 < $a2
42000017 and 1 40000011 42000016 ; $a7 == SYSCALL_READ and $a0 < $a2
42000018 and 1 60 42000017 ; read ecall is in kernel mode and not done yet
42000019 ugt 1 42000006 20 ; increment > 0
42000020 and 1 42000018 42000019 ; read ecall is in kernel mode and not done yet and increment > 0
42000021 ite 5 42000020 42000015 36618405 ; read input into memory[$a1 + $a0]
42000022 add 2 210 42000006 ; $a0 + increment
42000023 ite 2 42000018 42000022 42000003 ; set $a0 = $a0 + increment if read ecall is in kernel mode and not done yet
42000024 ite 1 42000018 11 42000002 ; stay in kernel mode if read ecall is in kernel mode and not done yet

43000000 and 1 36566800 40000012 ; write ecall is active
43000001 ite 2 43000000 211 42000001 ; $a1 is start address of buffer for checking address validity
43000002 ite 2 43000000 212 42000023 ; set $a0 = $a2 if write ecall is active

44000000 and 1 36566800 40000013 ; openat ecall is active
44000001 ite 2 44000000 211 43000001 ; $a1 is start address of buffer for checking address validity
44000002 state 2 fd-bump-pointer
44000003 init 2 44000002 21 ; initial fd-bump-pointer is 1 (file descriptor bump pointer)
44000004 inc 2 44000002
44000005 ite 2 44000000 44000004 44000002 ; fd-bump-pointer + 1 if openat ecall is active
44000006 next 2 44000002 44000005 ; increment fd-bump-pointer if openat ecall is active
44000007 ite 2 44000000 44000004 43000002 ; set $a0 = fd-bump-pointer + 1 if openat ecall is active

45000000 and 1 36566800 40000014 ; brk ecall is active
45000001 state 2 brk-bump-pointer
45000002 init 2 45000001 33 ; current program break
45000003 ulte 1 45000001 210 ; brk <= $a0
45000004 ult 1 210 202 ; $a0 < $sp
45000005 and 1 45000003 45000004 ; brk <= $a0 < $sp
45000006 and 2 210 23 ; reset all but 2 LSBs of $a0
45000007 eq 1 45000006 20 ; 2 LSBs of $a0 == 0 ($a0 is word-aligned)
45000008 and 1 45000005 45000007 ; brk <= $a0 < $sp and $a0 is word-aligned ($a0 is valid)
45000009 and 1 45000000 45000008 ; brk ecall is active and $a0 is valid
45000010 ite 2 45000009 210 45000001 ; brk = $a0 if brk ecall is active and $a0 is valid
45000011 next 2 45000001 45000010 ; set brk = $a0 if brk ecall is active and $a0 is valid
45000012 not 1 45000008 ; $a0 is invalid
45000013 and 1 45000000 45000012 ; brk ecall is active and $a0 is invalid
45000014 ite 2 45000013 45000001 44000007 ; set $a0 = brk if brk ecall is active and $a0 is invalid

46000000 next 1 60 42000024 ; updating kernel-mode flag

; control flow

56561600 not 2 21 ; jalr 66260[0x102D4](~28)
56561601 and 2 201 56561600
56561602 eq 1 56561601 36561200
56561603 and 1 16626000 56561602
56561604 next 1 16561600 56561603 ; ->65616[0x10050](~1)
; 65616[0x10050](~1)
56562000 next 1 16562000 16561600 ; ->65620[0x10054](~1)
; 65620[0x10054](~1)
56562400 next 1 16562400 16562000 ; ->65624[0x10058](~1)
; 65624[0x10058](~1)
56562800 next 1 16562800 16562400 ; ->65628[0x1005C](~1)
; 65628[0x1005C](~1)
56563200 next 1 16563200 16562800 ; ->65632[0x10060](~1)
; 65632[0x10060](~1)
56563600 next 1 16563600 16563200 ; ->65636[0x10064](~1)
56564000 state 1 kernel-mode-pc-flag-65636[0x10064](~1)
56564001 init 1 56564000 10 ; ecall is initially inactive
56564002 ite 1 56564000 60 16563600 ; activate ecall and keep active while in kernel mode
56564003 next 1 56564000 56564002 ; keep ecall active while in kernel mode
56564004 and 1 56564000 62 ; ecall is active but not in kernel mode anymore
56566800 next 1 16566800 10 ; ->65668[0x10084](~1)
56567200 state 1 kernel-mode-pc-flag-65668[0x10084](~1)
56567201 init 1 56567200 10 ; ecall is initially inactive
56567202 ite 1 56567200 60 16566800 ; activate ecall and keep active while in kernel mode
56567203 next 1 56567200 56567202 ; keep ecall active while in kernel mode
56567204 and 1 56567200 62 ; ecall is active but not in kernel mode anymore
56567205 next 1 16567200 56567204 ; ->65672[0x10088](~1)
; jal 66172[0x1027C](~21)
; jal 65976[0x101B8](~5)
56585600 ite 1 16597600 11 16617200
; jal 65936[0x10190](~5)
56585601 ite 1 16593600 11 56585600
56585602 next 1 16585600 56585601 ; ->65856[0x10140](~2)
; 65856[0x10140](~2)
56586000 next 1 16586000 16585600 ; ->65860[0x10144](~2)
; 65860[0x10144](~2)
56586400 next 1 16586400 16586000 ; ->65864[0x10148](~2)
; 65864[0x10148](~2)
56586800 next 1 16586800 16586400 ; ->65868[0x1014C](~2)
; 65868[0x1014C](~2)
56587200 next 1 16587200 16586800 ; ->65872[0x10150](~2)
; 65872[0x10150](~2)
56587600 next 1 16587600 16587200 ; ->65876[0x10154](~2)
; 65876[0x10154](~2)
56588000 next 1 16588000 16587600 ; ->65880[0x10158](~2)
; 65880[0x10158](~2)
56588400 next 1 16588400 16588000 ; ->65884[0x1015C](~2)
; 65884[0x1015C](~2)
56588800 next 1 16588800 16588400 ; ->65888[0x10160](~2)
; 65888[0x10160](~2)
56589200 next 1 16589200 16588800 ; ->65892[0x10164](~2)
; 65892[0x10164](~2)
56589600 next 1 16589600 16589200 ; ->65896[0x10168](~2)
56590000 and 1 16589600 36589601 ; beq 65896[0x10168](~2)
56590001 next 1 16590000 56590000 ; ->65900[0x1016C](~3)
; 65900[0x1016C](~3)
56590400 next 1 16590400 16590000 ; ->65904[0x10170](~3)
; 65904[0x10170](~3)
56590800 next 1 16590800 16590400 ; ->65908[0x10174](~3)
56591600 and 1 16589600 36589600 ; beq 65896[0x10168](~2)
56591601 next 1 16591600 56591600 ; ->65916[0x1017C](~5)
; 65916[0x1017C](~5)
56592000 next 1 16592000 16591600 ; ->65920[0x10180](~5)
; 65920[0x10180](~5)
56592400 next 1 16592400 16592000 ; ->65924[0x10184](~5)
; 65924[0x10184](~5)
56592800 next 1 16592800 16592400 ; ->65928[0x10188](~5)
; 65928[0x10188](~5)
56593200 next 1 16593200 16592800 ; ->65932[0x1018C](~5)
; 65932[0x1018C](~5)
56593600 next 1 16593600 16593200 ; ->65936[0x10190](~5)
56594000 not 2 21 ; jalr 66028[0x101EC](~6)
56594001 and 2 201 56594000
56594002 eq 1 56594001 36593600
56594003 and 1 16602800 56594002
56594004 next 1 16594000 56594003 ; ->65940[0x10194](~5)
; 65940[0x10194](~5)
56594400 next 1 16594400 16594000 ; ->65944[0x10198](~5)
; 65944[0x10198](~5)
56594800 next 1 16594800 16594400 ; ->65948[0x1019C](~5)
; 65948[0x1019C](~5)
56595200 next 1 16595200 16594800 ; ->65952[0x101A0](~5)
; 65952[0x101A0](~5)
56595600 next 1 16595600 16595200 ; ->65956[0x101A4](~5)
; 65956[0x101A4](~5)
56596000 next 1 16596000 16595600 ; ->65960[0x101A8](~5)
; 65960[0x101A8](~5)
56596400 next 1 16596400 16596000 ; ->65964[0x101AC](~5)
; 65964[0x101AC](~5)
56596800 next 1 16596800 16596400 ; ->65968[0x101B0](~5)
; 65968[0x101B0](~5)
56597200 next 1 16597200 16596800 ; ->65972[0x101B4](~5)
; 65972[0x101B4](~5)
56597600 next 1 16597600 16597200 ; ->65976[0x101B8](~5)
56598000 not 2 21 ; jalr 66028[0x101EC](~6)
56598001 and 2 201 56598000
56598002 eq 1 56598001 36597600
56598003 and 1 16602800 56598002
56598004 next 1 16598000 56598003 ; ->65980[0x101BC](~5)
; 65980[0x101BC](~5)
56598400 next 1 16598400 16598000 ; ->65984[0x101C0](~5)
; 65984[0x101C0](~5)
56598800 next 1 16598800 16598400 ; ->65988[0x101C4](~5)
; 65988[0x101C4](~5)
56599200 next 1 16599200 16598800 ; ->65992[0x101C8](~5)
; 65992[0x101C8](~5)
56599600 next 1 16599600 16599200 ; ->65996[0x101CC](~5)
; 65996[0x101CC](~5)
56600000 next 1 16600000 16599600 ; ->66000[0x101D0](~5)
; 66000[0x101D0](~5)
56600400 next 1 16600400 16600000 ; ->66004[0x101D4](~5)
; jal 66004[0x101D4](~5)
; jal 65908[0x10174](~3)
56600800 ite 1 16590800 11 16600400
56600801 next 1 16600800 56600800 ; ->66008[0x101D8](~6)
; 66008[0x101D8](~6)
56601200 next 1 16601200 16600800 ; ->66012[0x101DC](~6)
; 66012[0x101DC](~6)
56601600 next 1 16601600 16601200 ; ->66016[0x101E0](~6)
; 66016[0x101E0](~6)
56602000 next 1 16602000 16601600 ; ->66020[0x101E4](~6)
; 66020[0x101E4](~6)
56602400 next 1 16602400 16602000 ; ->66024[0x101E8](~6)
; 66024[0x101E8](~6)
56602800 next 1 16602800 16602400 ; ->66028[0x101EC](~6)
56612800 not 2 21 ; jalr 65672[0x10088](~1)
56612801 and 2 201 56612800
56612802 eq 1 56612801 36612400
56612803 and 1 16567200 56612802
56612804 next 1 16612800 56612803 ; ->66128[0x10250](~16)
; 66128[0x10250](~16)
56613200 next 1 16613200 16612800 ; ->66132[0x10254](~18)
; 66132[0x10254](~18)
56613600 next 1 16613600 16613200 ; ->66136[0x10258](~18)
; 66136[0x10258](~18)
56614000 next 1 16614000 16613600 ; ->66140[0x1025C](~18)
; 66140[0x1025C](~18)
56614400 next 1 16614400 16614000 ; ->66144[0x10260](~18)
; 66144[0x10260](~18)
56614800 next 1 16614800 16614400 ; ->66148[0x10264](~18)
; 66148[0x10264](~18)
56615200 next 1 16615200 16614800 ; ->66152[0x10268](~18)
; 66152[0x10268](~18)
56615600 next 1 16615600 16615200 ; ->66156[0x1026C](~21)
; 66156[0x1026C](~21)
56616000 next 1 16616000 16615600 ; ->66160[0x10270](~21)
; 66160[0x10270](~21)
56616400 next 1 16616400 16616000 ; ->66164[0x10274](~21)
; 66164[0x10274](~21)
56616800 next 1 16616800 16616400 ; ->66168[0x10278](~21)
; 66168[0x10278](~21)
56617200 next 1 16617200 16616800 ; ->66172[0x1027C](~21)
56617600 not 2 21 ; jalr 66028[0x101EC](~6)
56617601 and 2 201 56617600
56617602 eq 1 56617601 36617200
56617603 and 1 16602800 56617602
56617604 next 1 16617600 56617603 ; ->66176[0x10280](~21)
; 66176[0x10280](~21)
56618000 next 1 16618000 16617600 ; ->66180[0x10284](~21)
; 66180[0x10284](~21)
56618400 next 1 16618400 16618000 ; ->66184[0x10288](~21)
; 66184[0x10288](~21)
56618800 next 1 16618800 16618400 ; ->66188[0x1028C](~23)
; 66188[0x1028C](~23)
56619200 next 1 16619200 16618800 ; ->66192[0x10290](~23)
; 66192[0x10290](~23)
56619600 next 1 16619600 16619200 ; ->66196[0x10294](~23)
; 66196[0x10294](~23)
56620000 next 1 16620000 16619600 ; ->66200[0x10298](~23)
; 66200[0x10298](~23)
56620400 next 1 16620400 16620000 ; ->66204[0x1029C](~23)
; 66204[0x1029C](~23)
56620800 next 1 16620800 16620400 ; ->66208[0x102A0](~23)
56621200 and 1 16620800 36620801 ; beq 66208[0x102A0](~23)
56621201 next 1 16621200 56621200 ; ->66212[0x102A4](~25)
; 66212[0x102A4](~25)
56621600 next 1 16621600 16621200 ; ->66216[0x102A8](~25)
; 66216[0x102A8](~25)
56622000 next 1 16622000 16621600 ; ->66220[0x102AC](~25)
56622800 and 1 16620800 36620800 ; beq 66208[0x102A0](~23)
56622801 next 1 16622800 56622800 ; ->66228[0x102B4](~27)
; 66228[0x102B4](~27)
56623200 next 1 16623200 16622800 ; ->66232[0x102B8](~27)
; 66232[0x102B8](~27)
56623600 next 1 16623600 16623200 ; ->66236[0x102BC](~27)
; jal 66236[0x102BC](~27)
; jal 66220[0x102AC](~25)
56624000 ite 1 16622000 11 16623600
56624001 next 1 16624000 56624000 ; ->66240[0x102C0](~28)
; 66240[0x102C0](~28)
56624400 next 1 16624400 16624000 ; ->66244[0x102C4](~28)
; 66244[0x102C4](~28)
56624800 next 1 16624800 16624400 ; ->66248[0x102C8](~28)
; 66248[0x102C8](~28)
56625200 next 1 16625200 16624800 ; ->66252[0x102CC](~28)
; 66252[0x102CC](~28)
56625600 next 1 16625600 16625200 ; ->66256[0x102D0](~28)
; 66256[0x102D0](~28)
56626000 next 1 16626000 16625600 ; ->66260[0x102D4](~28)

; updating registers

60000001 next 2 201 36625203 ra ; register $1
60000002 next 2 202 36625602 sp ; register $2
60000003 next 2 203 203 gp ; register $3
60000004 next 2 204 204 tp ; register $4
60000005 next 2 205 36622800 t0 ; register $5
60000006 next 2 206 36620001 t1 ; register $6
60000007 next 2 207 36614401 t2 ; register $7
60000008 next 2 208 36624403 s0 ; register $8
60000009 next 2 209 209 s1 ; register $9
60000010 next 2 210 45000014 a0 ; register $10
60000011 next 2 211 211 a1 ; register $11
60000012 next 2 212 212 a2 ; register $12
60000013 next 2 213 213 a3 ; register $13
60000014 next 2 214 214 a4 ; register $14
60000015 next 2 215 215 a5 ; register $15
60000016 next 2 216 216 a6 ; register $16
60000017 next 2 217 36563201 a7 ; register $17
60000018 next 2 218 218 s2 ; register $18
60000019 next 2 219 219 s3 ; register $19
60000020 next 2 220 220 s4 ; register $20
60000021 next 2 221 221 s5 ; register $21
60000022 next 2 222 222 s6 ; register $22
60000023 next 2 223 223 s7 ; register $23
60000024 next 2 224 224 s8 ; register $24
60000025 next 2 225 225 s9 ; register $25
60000026 next 2 226 226 s10 ; register $26
60000027 next 2 227 227 s11 ; register $27
60000028 next 2 228 228 t3 ; register $28
60000029 next 2 229 229 t4 ; register $29
60000030 next 2 230 230 t5 ; register $30
60000031 next 2 231 231 t6 ; register $31

; updating 30-bit physical memory

70000000 next 5 20000000 42000021 physical-memory

; checking syscall id

80000000 not 1 40000010 ; $a7 != SYSCALL_EXIT
80000001 not 1 40000011 ; $a7 != SYSCALL_READ
80000002 not 1 40000012 ; $a7 != SYSCALL_WRITE
80000003 not 1 40000013 ; $a7 != SYSCALL_OPENAT
80000004 not 1 40000014 ; $a7 != SYSCALL_BRK
80000005 and 1 80000000 80000001 ; ... and $a7 != SYSCALL_READ
80000006 and 1 80000005 80000002 ; ... and $a7 != SYSCALL_WRITE
80000007 and 1 80000006 80000003 ; ... and $a7 != SYSCALL_OPENAT
80000008 and 1 80000007 80000004 ; ... and $a7 != SYSCALL_BRK

80000009 and 1 36566800 80000008 ; ecall is active for invalid syscall id
80000010 bad 80000009 b0 ; invalid syscall id

; checking exit code

80000011 neq 1 210 20 ; $a0 != zero exit code
80000012 and 1 41000000 80000011 ; exit ecall is active with non-zero exit code
80000013 bad 80000012 b1 ; non-zero exit code

; checking division and remainder by zero

80000014 eq 1 21 20
80000015 bad 80000014 b2 ; division by zero

80000016 eq 1 21 20
80000017 bad 80000016 b3 ; remainder by zero

; checking address validity

; is start address of memory access word-aligned?

80000018 and 2 44000001 23 ; reset all but 2 LSBs of address
80000019 neq 1 80000018 20 ; 2 LSBs of address != 0 (address is not word-aligned)
80000020 bad 80000019 b4 ; word-unaligned memory access

; checking segmentation faults

; is start address of memory access in a valid segment?

80000021 ult 1 44000001 30 ; address < start of data segment
80000022 bad 80000021 b5 ; memory access below data segment
80000023 ugte 1 44000001 31 ; address >= end of data segment
80000024 ult 1 44000001 32 ; address < start of heap segment
80000025 and 1 80000023 80000024
80000026 bad 80000025 b6 ; memory access in between data and heap segments
80000027 ugte 1 44000001 45000001 ; address >= current end of heap segment
80000028 ult 1 44000001 202 ; address < current start of stack segment
80000029 and 1 80000027 80000028
80000030 bad 80000029 b7 ; memory access in between current heap and stack segments
80000031 ugte 1 44000001 34 ; address >= allowed end of heap segment
80000032 ult 1 44000001 45000001 ; address < current end of heap segment
80000033 and 1 80000031 80000032
80000034 bad 80000033 b8 ; memory access in between allowed and current end of heap segment
80000035 ugte 1 44000001 202 ; address >= current start of stack segment
80000036 ult 1 44000001 35 ; address < allowed start of stack segment
80000037 and 1 80000035 80000036
80000038 bad 80000037 b9 ; memory access in between current and allowed start of stack segment
80000039 ugt 1 44000001 50 ; address > highest address in 32-bit virtual address space (4GB)
80000040 bad 80000039 b10 ; memory access above stack segment

; end of BTOR2 examples/symbolic/recursive-fibonacci-1-10.btor2
