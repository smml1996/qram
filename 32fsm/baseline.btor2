; selfie.cs.uni-salzburg.at

; BTOR2 s.btor2 generated by ./beator-32
; with --heap-allowance 4
; with --stack-allowance 28

; RISC-V code obtained from s.c and invoked as: s.c

1 sort bitvec 1 ; Boolean
2 sort bitvec 32 ; 32-bit machine word
3 sort array 2 2 ; 32-bit physical memory

; 60B total memory, 8B data, 4B heap (0B,4B), 48B stack (20B,28B)

10 zero 1
11 one 1

20 zero 2
21 one 2
22 constd 2 2
23 constd 2 3
24 constd 2 4

; start of data segment in 32-bit virtual memory
30 constd 2 69632 ; 0x11000
; end of data segment in 32-bit virtual memory
31 constd 2 69640 ; 0x11008

; start of heap segment in 32-bit virtual memory (initial program break)
32 constd 2 73728 ; 0x12000
; current end of heap segment in 32-bit virtual memory (current program break)
33 constd 2 73728 ; 0x12000

; allowed end of heap segment in 32-bit virtual memory (with 4B allowance)
34 constd 2 73732 ; 0x12004
; allowed start of stack segment in 32-bit virtual memory (with 28B allowance)
35 constd 2 4294967248 ; 0xFFFFFFD0

; highest address in 32-bit virtual address space (4GB)

50 constd 2 4294967292 ; 0xFFFFFFFC

; kernel-mode flag

60 state 1 kernel-mode
61 init 1 60 10 kernel-mode ; initial value is false
62 not 1 60

; unsigned-extended inputs for byte-wise reading

71 sort bitvec 8 ; 1 byte
72 sort bitvec 16 ; 2 bytes
73 sort bitvec 24 ; 3 bytes

81 input 71 1-byte-input
82 input 72 2-byte-input
83 input 73 3-byte-input

91 uext 2 81 24 ; uext-1-byte-input
92 uext 2 82 16 ; uext-2-byte-input
93 uext 2 83 8 ; uext-3-byte-input
94 input 2 4-byte-input

; 32 32-bit general-purpose registers

; non-zero initial register values

102 constd 2 4294967276 ; 0xFFFFFFEC for sp
116 constd 2 1074146816 ; 0x40062E00 for a6

; registers

200 zero 2 zero ; register $0 is always 0
201 state 2 ra ; register $1
202 state 2 sp ; register $2
203 state 2 gp ; register $3
204 state 2 tp ; register $4
205 state 2 t0 ; register $5
206 state 2 t1 ; register $6
207 state 2 t2 ; register $7
208 state 2 s0 ; register $8
209 state 2 s1 ; register $9
210 state 2 a0 ; register $10
211 state 2 a1 ; register $11
212 state 2 a2 ; register $12
213 state 2 a3 ; register $13
214 state 2 a4 ; register $14
215 state 2 a5 ; register $15
216 state 2 a6 ; register $16
217 state 2 a7 ; register $17
218 state 2 s2 ; register $18
219 state 2 s3 ; register $19
220 state 2 s4 ; register $20
221 state 2 s5 ; register $21
222 state 2 s6 ; register $22
223 state 2 s7 ; register $23
224 state 2 s8 ; register $24
225 state 2 s9 ; register $25
226 state 2 s10 ; register $26
227 state 2 s11 ; register $27
228 state 2 t3 ; register $28
229 state 2 t4 ; register $29
230 state 2 t5 ; register $30
231 state 2 t6 ; register $31

; initializing registers

301 init 2 201 20 ra ; initial value is 0
302 init 2 202 102 sp ; initial value is 4294967276
303 init 2 203 20 gp ; initial value is 0
304 init 2 204 20 tp ; initial value is 0
305 init 2 205 20 t0 ; initial value is 0
306 init 2 206 20 t1 ; initial value is 0
307 init 2 207 20 t2 ; initial value is 0
308 init 2 208 20 s0 ; initial value is 0
309 init 2 209 20 s1 ; initial value is 0
310 init 2 210 20 a0 ; initial value is 0
311 init 2 211 20 a1 ; initial value is 0
312 init 2 212 20 a2 ; initial value is 0
313 init 2 213 20 a3 ; initial value is 0
314 init 2 214 20 a4 ; initial value is 0
315 init 2 215 20 a5 ; initial value is 0
316 init 2 216 116 a6 ; initial value is 1074146816
317 init 2 217 20 a7 ; initial value is 0
318 init 2 218 20 s2 ; initial value is 0
319 init 2 219 20 s3 ; initial value is 0
320 init 2 220 20 s4 ; initial value is 0
321 init 2 221 20 s5 ; initial value is 0
322 init 2 222 20 s6 ; initial value is 0
323 init 2 223 20 s7 ; initial value is 0
324 init 2 224 20 s8 ; initial value is 0
325 init 2 225 20 s9 ; initial value is 0
326 init 2 226 20 s10 ; initial value is 0
327 init 2 227 20 s11 ; initial value is 0
328 init 2 228 20 t3 ; initial value is 0
329 init 2 229 20 t4 ; initial value is 0
330 init 2 230 20 t5 ; initial value is 0
331 init 2 231 20 t6 ; initial value is 0

; 32-bit program counter encoded in Boolean flags

16553600 state 1 pc=0x10000
16553601 init 1 16553600 11 ; initial program counter
16554000 state 1 pc=0x10004
16554001 init 1 16554000 10
16554400 state 1 pc=0x10008
16554401 init 1 16554400 10
16554800 state 1 pc=0x1000C
16554801 init 1 16554800 10
16555200 state 1 pc=0x10010
16555201 init 1 16555200 10
16555600 state 1 pc=0x10014
16555601 init 1 16555600 10
16556000 state 1 pc=0x10018
16556001 init 1 16556000 10
16556400 state 1 pc=0x1001C
16556401 init 1 16556400 10
16556800 state 1 pc=0x10020
16556801 init 1 16556800 10
16557200 state 1 pc=0x10024
16557201 init 1 16557200 10
16557600 state 1 pc=0x10028
16557601 init 1 16557600 10
16558000 state 1 pc=0x1002C
16558001 init 1 16558000 10
16558400 state 1 pc=0x10030
16558401 init 1 16558400 10
16558800 state 1 pc=0x10034
16558801 init 1 16558800 10
16559200 state 1 pc=0x10038
16559201 init 1 16559200 10
16559600 state 1 pc=0x1003C
16559601 init 1 16559600 10
16560000 state 1 pc=0x10040
16560001 init 1 16560000 10
16560400 state 1 pc=0x10044
16560401 init 1 16560400 10
16560800 state 1 pc=0x10048
16560801 init 1 16560800 10
16561200 state 1 pc=0x1004C
16561201 init 1 16561200 10
16561600 state 1 pc=0x10050
16561601 init 1 16561600 10
16562000 state 1 pc=0x10054
16562001 init 1 16562000 10
16562400 state 1 pc=0x10058
16562401 init 1 16562400 10
16562800 state 1 pc=0x1005C
16562801 init 1 16562800 10
16563200 state 1 pc=0x10060
16563201 init 1 16563200 10
16563600 state 1 pc=0x10064
16563601 init 1 16563600 10
16564000 state 1 pc=0x10068
16564001 init 1 16564000 10
16564400 state 1 pc=0x1006C
16564401 init 1 16564400 10
16564800 state 1 pc=0x10070
16564801 init 1 16564800 10
16565200 state 1 pc=0x10074
16565201 init 1 16565200 10
16565600 state 1 pc=0x10078
16565601 init 1 16565600 10
16566000 state 1 pc=0x1007C
16566001 init 1 16566000 10
16566400 state 1 pc=0x10080
16566401 init 1 16566400 10
16566800 state 1 pc=0x10084
16566801 init 1 16566800 10
16567200 state 1 pc=0x10088
16567201 init 1 16567200 10
; 16567600 unreachable state at 1008C
; 16568000 unreachable state at 10090
; 16568400 unreachable state at 10094
; 16568800 unreachable state at 10098
; 16569200 unreachable state at 1009C
; 16569600 unreachable state at 100A0
; 16570000 unreachable state at 100A4
; 16570400 unreachable state at 100A8
; 16570800 unreachable state at 100AC
; 16571200 unreachable state at 100B0
; 16571600 unreachable state at 100B4
; 16572000 unreachable state at 100B8
; 16572400 unreachable state at 100BC
; 16572800 unreachable state at 100C0
; 16573200 unreachable state at 100C4
; 16573600 unreachable state at 100C8
; 16574000 unreachable state at 100CC
; 16574400 unreachable state at 100D0
; 16574800 unreachable state at 100D4
16575200 state 1 pc=0x100D8
16575201 init 1 16575200 10
16575600 state 1 pc=0x100DC
16575601 init 1 16575600 10
16576000 state 1 pc=0x100E0
16576001 init 1 16576000 10
16576400 state 1 pc=0x100E4
16576401 init 1 16576400 10
16576800 state 1 pc=0x100E8
16576801 init 1 16576800 10
16577200 state 1 pc=0x100EC
16577201 init 1 16577200 10
16577600 state 1 pc=0x100F0
16577601 init 1 16577600 10
16578000 state 1 pc=0x100F4
16578001 init 1 16578000 10
16578400 state 1 pc=0x100F8
16578401 init 1 16578400 10
16578800 state 1 pc=0x100FC
16578801 init 1 16578800 10
16579200 state 1 pc=0x10100
16579201 init 1 16579200 10
16579600 state 1 pc=0x10104
16579601 init 1 16579600 10
16580000 state 1 pc=0x10108
16580001 init 1 16580000 10
16580400 state 1 pc=0x1010C
16580401 init 1 16580400 10
16580800 state 1 pc=0x10110
16580801 init 1 16580800 10
16581200 state 1 pc=0x10114
16581201 init 1 16581200 10
16581600 state 1 pc=0x10118
16581601 init 1 16581600 10
16582000 state 1 pc=0x1011C
16582001 init 1 16582000 10
; 16582400 unreachable state at 10120
; 16582800 unreachable state at 10124
; 16583200 unreachable state at 10128
; 16583600 unreachable state at 1012C
; 16584000 unreachable state at 10130
; 16584400 unreachable state at 10134
; 16584800 unreachable state at 10138
; 16585200 unreachable state at 1013C
16585600 state 1 pc=0x10140
16585601 init 1 16585600 10
16586000 state 1 pc=0x10144
16586001 init 1 16586000 10
16586400 state 1 pc=0x10148
16586401 init 1 16586400 10
16586800 state 1 pc=0x1014C
16586801 init 1 16586800 10
16587200 state 1 pc=0x10150
16587201 init 1 16587200 10
16587600 state 1 pc=0x10154
16587601 init 1 16587600 10
16588000 state 1 pc=0x10158
16588001 init 1 16588000 10
16588400 state 1 pc=0x1015C
16588401 init 1 16588400 10
16588800 state 1 pc=0x10160
16588801 init 1 16588800 10
16589200 state 1 pc=0x10164
16589201 init 1 16589200 10
16589600 state 1 pc=0x10168
16589601 init 1 16589600 10
16590000 state 1 pc=0x1016C
16590001 init 1 16590000 10
16590400 state 1 pc=0x10170
16590401 init 1 16590400 10
16590800 state 1 pc=0x10174
16590801 init 1 16590800 10
16591200 state 1 pc=0x10178
16591201 init 1 16591200 10
16591600 state 1 pc=0x1017C
16591601 init 1 16591600 10
16592000 state 1 pc=0x10180
16592001 init 1 16592000 10
16592400 state 1 pc=0x10184
16592401 init 1 16592400 10
16592800 state 1 pc=0x10188
16592801 init 1 16592800 10
16593200 state 1 pc=0x1018C
16593201 init 1 16593200 10
16593600 state 1 pc=0x10190
16593601 init 1 16593600 10
16594000 state 1 pc=0x10194
16594001 init 1 16594000 10
16594400 state 1 pc=0x10198
16594401 init 1 16594400 10
16594800 state 1 pc=0x1019C
16594801 init 1 16594800 10
16595200 state 1 pc=0x101A0
16595201 init 1 16595200 10
16595600 state 1 pc=0x101A4
16595601 init 1 16595600 10
16596000 state 1 pc=0x101A8
16596001 init 1 16596000 10
16596400 state 1 pc=0x101AC
16596401 init 1 16596400 10
16596800 state 1 pc=0x101B0
16596801 init 1 16596800 10
16597200 state 1 pc=0x101B4
16597201 init 1 16597200 10
16597600 state 1 pc=0x101B8
16597601 init 1 16597600 10
16598000 state 1 pc=0x101BC
16598001 init 1 16598000 10
16598400 state 1 pc=0x101C0
16598401 init 1 16598400 10
16598800 state 1 pc=0x101C4
16598801 init 1 16598800 10
16599200 state 1 pc=0x101C8
16599201 init 1 16599200 10
16599600 state 1 pc=0x101CC
16599601 init 1 16599600 10
16600000 state 1 pc=0x101D0
16600001 init 1 16600000 10
16600400 state 1 pc=0x101D4
16600401 init 1 16600400 10
16600800 state 1 pc=0x101D8
16600801 init 1 16600800 10
16601200 state 1 pc=0x101DC
16601201 init 1 16601200 10
16601600 state 1 pc=0x101E0
16601601 init 1 16601600 10
16602000 state 1 pc=0x101E4
16602001 init 1 16602000 10
16602400 state 1 pc=0x101E8
16602401 init 1 16602400 10
16602800 state 1 pc=0x101EC
16602801 init 1 16602800 10
16603200 state 1 pc=0x101F0
16603201 init 1 16603200 10
16603600 state 1 pc=0x101F4
16603601 init 1 16603600 10
16604000 state 1 pc=0x101F8
16604001 init 1 16604000 10
16604400 state 1 pc=0x101FC
16604401 init 1 16604400 10
16604800 state 1 pc=0x10200
16604801 init 1 16604800 10
16605200 state 1 pc=0x10204
16605201 init 1 16605200 10
16605600 state 1 pc=0x10208
16605601 init 1 16605600 10
16606000 state 1 pc=0x1020C
16606001 init 1 16606000 10
16606400 state 1 pc=0x10210
16606401 init 1 16606400 10
16606800 state 1 pc=0x10214
16606801 init 1 16606800 10
16607200 state 1 pc=0x10218
16607201 init 1 16607200 10
16607600 state 1 pc=0x1021C
16607601 init 1 16607600 10
16608000 state 1 pc=0x10220
16608001 init 1 16608000 10
16608400 state 1 pc=0x10224
16608401 init 1 16608400 10
16608800 state 1 pc=0x10228
16608801 init 1 16608800 10
16609200 state 1 pc=0x1022C
16609201 init 1 16609200 10
16609600 state 1 pc=0x10230
16609601 init 1 16609600 10
16610000 state 1 pc=0x10234
16610001 init 1 16610000 10

16963200 state 3 memory-dump

; data segment

16963201 constd 2 69632 ; 0x11000 paddr, 0x11000 vaddr
16963202 write 3 16963200 16963201 20
16963600 constd 2 69636 ; 0x11004 paddr, 0x11004 vaddr
16963601 write 3 16963202 16963600 20

; heap segment

17372800 constd 2 73728 ; 0x12000 paddr, 0x12000 vaddr
17372801 write 3 16963601 17372800 20

; stack segment

17373200 constd 2 4294967248 ; 0xFFFFFFD0 paddr, 0xFFFFFFD0 vaddr
17373201 write 3 17372801 17373200 20
17373600 constd 2 4294967252 ; 0xFFFFFFD4 paddr, 0xFFFFFFD4 vaddr
17373601 write 3 17373201 17373600 20
17374000 constd 2 4294967256 ; 0xFFFFFFD8 paddr, 0xFFFFFFD8 vaddr
17374001 write 3 17373601 17374000 20
17374400 constd 2 4294967260 ; 0xFFFFFFDC paddr, 0xFFFFFFDC vaddr
17374401 write 3 17374001 17374400 20
17374800 constd 2 4294967264 ; 0xFFFFFFE0 paddr, 0xFFFFFFE0 vaddr
17374801 write 3 17374401 17374800 20
17375200 constd 2 4294967268 ; 0xFFFFFFE4 paddr, 0xFFFFFFE4 vaddr
17375201 write 3 17374801 17375200 20
17375600 constd 2 4294967272 ; 0xFFFFFFE8 paddr, 0xFFFFFFE8 vaddr
17375601 write 3 17375201 17375600 20
17376000 constd 2 4294967276 ; 0xFFFFFFEC paddr, 0xFFFFFFEC vaddr
17376001 constd 2 1 ; 0x1 word
17376002 write 3 17375601 17376000 17376001
17376400 constd 2 4294967280 ; 0xFFFFFFF0 paddr, 0xFFFFFFF0 vaddr
17376401 constd 2 4294967292 ; 0xFFFFFFFC word
17376402 write 3 17376002 17376400 17376401
17376800 constd 2 4294967284 ; 0xFFFFFFF4 paddr, 0xFFFFFFF4 vaddr
17376801 write 3 17376402 17376800 20
17377200 constd 2 4294967288 ; 0xFFFFFFF8 paddr, 0xFFFFFFF8 vaddr
17377201 write 3 17376801 17377200 20
17377600 constd 2 4294967292 ; 0xFFFFFFFC paddr, 0xFFFFFFFC vaddr
17377601 constd 2 6499955 ; 0x632E73 word
17377602 write 3 17377201 17377600 17377601

; 32-bit physical memory

20000000 state 3 physical-memory ; data, heap, stack segments
20000001 init 3 20000000 17377602 ; loading data, heap, stack segments into memory

; data flow

36553600 constd 2 69632 ; 0x11 << 12
36553601 ite 2 16553600 36553600 205 ; 0x10000(~1): lui t0,0x11
36554000 constd 2 8 ; 0x8
36554001 add 2 205 36554000
36554002 ite 2 16554000 36554001 36553601 ; 0x10004(~1): addi t0,t0,8
36554400 ite 2 16554400 205 203 ; 0x10008(~1): addi gp,t0,0
36554800 ite 2 16554800 200 210 ; 0x1000C(~1): addi a0,zero,0
36555200 constd 2 214 ; 0xD6
36555201 ite 2 16555200 36555200 217 ; 0x10010(~1): addi a7,zero,214
36555600 ite 1 16555600 11 10 ; 0x10014(~1): ecall
36556000 constd 2 3 ; 0x3
36556001 add 2 210 36556000
36556002 ite 2 16556000 36556001 36554800 ; 0x10018(~1): addi a0,a0,3
36556400 constd 2 4 ; 0x4
36556401 ite 2 16556400 36556400 36554002 ; 0x1001C(~1): addi t0,zero,4
36556800 ite 2 16556800 205 21 ; record t0 for checking remainder by zero
36556801 urem 2 210 205
36556802 ite 2 16556800 36556801 36556401 ; 0x10020(~1): remu t0,a0,t0
36557200 sub 2 210 205
36557201 ite 2 16557200 36557200 36556002 ; 0x10024(~1): sub a0,a0,t0
36557600 constd 2 214 ; 0xD6
36557601 ite 2 16557600 36557600 36555201 ; 0x10028(~1): addi a7,zero,214
36558000 ite 1 16558000 11 36555600 ; 0x1002C(~1): ecall
36558400 constd 2 -4 ; 0xFFFFFFFC
36558401 add 2 203 36558400
36558402 ite 2 16558400 36558401 30 ; for checking address validity
36558403 write 3 20000000 36558401 210
36558404 ite 3 16558400 36558403 20000000 ; 0x10030(~1): sw a0,-4(gp)
36558800 ite 2 16558800 200 36557201 ; 0x10034(~1): addi a0,zero,0
36559200 ite 2 16559200 202 36558402 ; for checking address validity
36559201 read 2 20000000 202
36559202 ite 2 16559200 36559201 36556802 ; 0x10038(~1): lw t0,0(sp)
36559600 constd 2 -4 ; 0xFFFFFFFC
36559601 add 2 202 36559600
36559602 ite 2 16559600 36559601 202 ; 0x1003C(~1): addi sp,sp,-4
36560000 ite 2 16560000 202 36559200 ; for checking address validity
36560001 write 3 20000000 202 205
36560002 ite 3 16560000 36560001 36558404 ; 0x10040(~1): sw t0,0(sp)
36560400 constd 2 8 ; 0x8
36560401 add 2 202 36560400
36560402 ite 2 16560400 36560401 36559202 ; 0x10044(~1): addi t0,sp,8
36560800 constd 2 4 ; 0x4
36560801 add 2 202 36560800
36560802 ite 2 16560800 36560801 36560000 ; for checking address validity
36560803 write 3 20000000 36560801 205
36560804 ite 3 16560800 36560803 36560002 ; 0x10048(~1): sw t0,4(sp)
36561200 constd 2 65616 ; 0x10050
36561201 ite 2 16561200 36561200 201 ; 0x1004C(~1): jal ra,61
36561600 constd 2 -4 ; 0xFFFFFFFC
36561601 add 2 202 36561600
36561602 ite 2 16561600 36561601 36559602 ; 0x10050(~1): addi sp,sp,-4
36562000 ite 2 16562000 202 36560802 ; for checking address validity
36562001 write 3 20000000 202 210
36562002 ite 3 16562000 36562001 36560804 ; 0x10054(~1): sw a0,0(sp)
36562400 ite 2 16562400 202 36562000 ; for checking address validity
36562401 read 2 20000000 202
36562402 ite 2 16562400 36562401 36558800 ; 0x10058(~1): lw a0,0(sp)
36562800 constd 2 4 ; 0x4
36562801 add 2 202 36562800
36562802 ite 2 16562800 36562801 36561602 ; 0x1005C(~1): addi sp,sp,4
36563200 constd 2 93 ; 0x5D
36563201 ite 2 16563200 36563200 36557601 ; 0x10060(~1): addi a7,zero,93
36563600 ite 1 16563600 11 36558000 ; 0x10064(~1): ecall
36564000 ite 2 16564000 202 36562400 ; for checking address validity
36564001 read 2 20000000 202
36564002 ite 2 16564000 36564001 36562402 ; 0x10068(~1): lw a0,0(sp)
36564400 constd 2 4 ; 0x4
36564401 add 2 202 36564400
36564402 ite 2 16564400 36564401 36562802 ; 0x1006C(~1): addi sp,sp,4
36564800 ite 2 16564800 202 36564000 ; for checking address validity
36564801 read 2 20000000 202
36564802 ite 2 16564800 36564801 211 ; 0x10070(~1): lw a1,0(sp)
36565200 constd 2 4 ; 0x4
36565201 add 2 202 36565200
36565202 ite 2 16565200 36565201 36564402 ; 0x10074(~1): addi sp,sp,4
36565600 ite 2 16565600 202 36564800 ; for checking address validity
36565601 read 2 20000000 202
36565602 ite 2 16565600 36565601 212 ; 0x10078(~1): lw a2,0(sp)
36566000 constd 2 4 ; 0x4
36566001 add 2 202 36566000
36566002 ite 2 16566000 36566001 36565202 ; 0x1007C(~1): addi sp,sp,4
36566400 constd 2 63 ; 0x3F
36566401 ite 2 16566400 36566400 36563201 ; 0x10080(~1): addi a7,zero,63
36566800 ite 1 16566800 11 36563600 ; 0x10084(~1): ecall
36575200 ite 2 16575200 202 36565600 ; for checking address validity
36575201 read 2 20000000 202
36575202 ite 2 16575200 36575201 36560402 ; 0x100D8(~1): lw t0,0(sp)
36575600 constd 2 4 ; 0x4
36575601 add 2 202 36575600
36575602 ite 2 16575600 36575601 36566002 ; 0x100DC(~1): addi sp,sp,4
36576000 constd 2 3 ; 0x3
36576001 add 2 205 36576000
36576002 ite 2 16576000 36576001 36575202 ; 0x100E0(~1): addi t0,t0,3
36576400 constd 2 4 ; 0x4
36576401 ite 2 16576400 36576400 206 ; 0x100E4(~1): addi t1,zero,4
36576800 ite 2 16576800 206 36556800 ; record t1 for checking remainder by zero
36576801 urem 2 205 206
36576802 ite 2 16576800 36576801 36576401 ; 0x100E8(~1): remu t1,t0,t1
36577200 sub 2 205 206
36577201 ite 2 16577200 36577200 36576002 ; 0x100EC(~1): sub t0,t0,t1
36577600 constd 2 -4 ; 0xFFFFFFFC
36577601 add 2 203 36577600
36577602 ite 2 16577600 36577601 36575200 ; for checking address validity
36577603 read 2 20000000 36577601
36577604 ite 2 16577600 36577603 36576802 ; 0x100F0(~1): lw t1,-4(gp)
36578000 add 2 206 205
36578001 ite 2 16578000 36578000 36564002 ; 0x100F4(~1): add a0,t1,t0
36578400 constd 2 214 ; 0xD6
36578401 ite 2 16578400 36578400 36566401 ; 0x100F8(~1): addi a7,zero,214
36578800 ite 1 16578800 11 36566800 ; 0x100FC(~1): ecall
36579200 eq 1 210 206 ; 0x10100(~1): beq a0,t1,2
36579201 not 1 36579200
36579600 eq 1 200 200 ; 0x10104(~1): beq zero,zero,4
36579601 not 1 36579600
36580000 eq 1 200 205 ; 0x10108(~1): beq zero,t0,3
36580001 not 1 36580000
36580400 ite 2 16580400 200 36578001 ; 0x1010C(~1): addi a0,zero,0
36580800 eq 1 200 200 ; 0x10110(~1): beq zero,zero,3
36580801 not 1 36580800
36581200 constd 2 -4 ; 0xFFFFFFFC
36581201 add 2 203 36581200
36581202 ite 2 16581200 36581201 36577602 ; for checking address validity
36581203 write 3 20000000 36581201 210
36581204 ite 3 16581200 36581203 36562002 ; 0x10114(~1): sw a0,-4(gp)
36581600 ite 2 16581600 206 36580400 ; 0x10118(~1): addi a0,t1,0
36585600 constd 2 -4 ; 0xFFFFFFFC
36585601 add 2 202 36585600
36585602 ite 2 16585600 36585601 36575602 ; 0x10140(~4): addi sp,sp,-4
36586000 ite 2 16586000 202 36581202 ; for checking address validity
36586001 write 3 20000000 202 201
36586002 ite 3 16586000 36586001 36581204 ; 0x10144(~4): sw ra,0(sp)
36586400 constd 2 -4 ; 0xFFFFFFFC
36586401 add 2 202 36586400
36586402 ite 2 16586400 36586401 36585602 ; 0x10148(~4): addi sp,sp,-4
36586800 ite 2 16586800 202 36586000 ; for checking address validity
36586801 write 3 20000000 202 208
36586802 ite 3 16586800 36586801 36586002 ; 0x1014C(~4): sw s0,0(sp)
36587200 ite 2 16587200 202 208 ; 0x10150(~4): addi s0,sp,0
36587600 constd 2 -4 ; 0xFFFFFFFC
36587601 add 2 202 36587600
36587602 ite 2 16587600 36587601 36586402 ; 0x10154(~4): addi sp,sp,-4
36588000 constd 2 1 ; 0x1
36588001 ite 2 16588000 36588000 36577201 ; 0x10158(~4): addi t0,zero,1
36588400 constd 2 -4 ; 0xFFFFFFFC
36588401 add 2 202 36588400
36588402 ite 2 16588400 36588401 36587602 ; 0x1015C(~4): addi sp,sp,-4
36588800 ite 2 16588800 202 36586800 ; for checking address validity
36588801 write 3 20000000 202 205
36588802 ite 3 16588800 36588801 36586802 ; 0x10160(~4): sw t0,0(sp)
36589200 constd 2 65896 ; 0x10168
36589201 ite 2 16589200 36589200 36561201 ; 0x10164(~4): jal ra,-35
36589600 ite 2 16589600 210 36588001 ; 0x10168(~4): addi t0,a0,0
36590000 ite 2 16590000 200 36581600 ; 0x1016C(~4): addi a0,zero,0
36590400 constd 2 -8 ; 0xFFFFFFF8
36590401 add 2 203 36590400
36590402 ite 2 16590400 36590401 36588800 ; for checking address validity
36590403 write 3 20000000 36590401 205
36590404 ite 3 16590400 36590403 36588802 ; 0x10170(~4): sw t0,-8(gp)
36590800 constd 2 -8 ; 0xFFFFFFF8
36590801 add 2 203 36590800
36590802 ite 2 16590800 36590801 36590402 ; for checking address validity
36590803 read 2 20000000 36590801
36590804 ite 2 16590800 36590803 36589600 ; 0x10174(~6): lw t0,-8(gp)
36591200 ite 2 16591200 200 36577604 ; 0x10178(~6): addi t1,zero,0
36591600 ite 2 16591600 205 36590802 ; for checking address validity
36591601 write 3 20000000 205 206
36591602 ite 3 16591600 36591601 36590404 ; 0x1017C(~6): sw t1,0(t0)
36592000 ite 2 16592000 200 36590804 ; 0x10180(~8): addi t0,zero,0
36592400 constd 2 -12 ; 0xFFFFFFF4
36592401 add 2 202 36592400
36592402 ite 2 16592400 36592401 36588402 ; 0x10184(~8): addi sp,sp,-12
36592800 ite 2 16592800 202 36591600 ; for checking address validity
36592801 write 3 20000000 202 205
36592802 ite 3 16592800 36592801 36591602 ; 0x10188(~8): sw t0,0(sp)
36593200 constd 2 -8 ; 0xFFFFFFF8
36593201 add 2 203 36593200
36593202 ite 2 16593200 36593201 36592800 ; for checking address validity
36593203 read 2 20000000 36593201
36593204 ite 2 16593200 36593203 36592000 ; 0x1018C(~8): lw t0,-8(gp)
36593600 constd 2 4 ; 0x4
36593601 add 2 202 36593600
36593602 ite 2 16593600 36593601 36593202 ; for checking address validity
36593603 write 3 20000000 36593601 205
36593604 ite 3 16593600 36593603 36592802 ; 0x10190(~8): sw t0,4(sp)
36594000 constd 2 1 ; 0x1
36594001 ite 2 16594000 36594000 36593204 ; 0x10194(~8): addi t0,zero,1
36594400 constd 2 8 ; 0x8
36594401 add 2 202 36594400
36594402 ite 2 16594400 36594401 36593602 ; for checking address validity
36594403 write 3 20000000 36594401 205
36594404 ite 3 16594400 36594403 36593604 ; 0x10198(~8): sw t0,8(sp)
36594800 constd 2 65952 ; 0x101A0
36594801 ite 2 16594800 36594800 36589201 ; 0x1019C(~8): jal ra,-77
36595200 ite 2 16595200 200 36590000 ; 0x101A0(~8): addi a0,zero,0
36595600 constd 2 -8 ; 0xFFFFFFF8
36595601 add 2 203 36595600
36595602 ite 2 16595600 36595601 36594402 ; for checking address validity
36595603 read 2 20000000 36595601
36595604 ite 2 16595600 36595603 36594001 ; 0x101A4(~10): lw t0,-8(gp)
36596000 ite 2 16596000 205 36595602 ; for checking address validity
36596001 read 2 20000000 205
36596002 ite 2 16596000 36596001 36595604 ; 0x101A8(~10): lw t0,0(t0)
36596400 constd 2 -4 ; 0xFFFFFFFC
36596401 add 2 208 36596400
36596402 ite 2 16596400 36596401 36596000 ; for checking address validity
36596403 write 3 20000000 36596401 205
36596404 ite 3 16596400 36596403 36594404 ; 0x101AC(~10): sw t0,-4(s0)
36596800 constd 2 -4 ; 0xFFFFFFFC
36596801 add 2 208 36596800
36596802 ite 2 16596800 36596801 36596402 ; for checking address validity
36596803 read 2 20000000 36596801
36596804 ite 2 16596800 36596803 36596002 ; 0x101B0(~12): lw t0,-4(s0)
36597200 constd 2 48 ; 0x30
36597201 ite 2 16597200 36597200 36591200 ; 0x101B4(~12): addi t1,zero,48
36597600 ult 1 206 205
36597601 uext 2 36597600 31
36597602 ite 2 16597600 36597601 36596804 ; 0x101B8(~12): sltu t0,t1,t0
36598000 eq 1 205 200 ; 0x101BC(~12): beq t0,zero,6
36598001 not 1 36598000
36598400 constd 2 -4 ; 0xFFFFFFFC
36598401 add 2 208 36598400
36598402 ite 2 16598400 36598401 36596802 ; for checking address validity
36598403 read 2 20000000 36598401
36598404 ite 2 16598400 36598403 36597602 ; 0x101C0(~13): lw t0,-4(s0)
36598800 constd 2 1 ; 0x1
36598801 ite 2 16598800 36598800 36597201 ; 0x101C4(~13): addi t1,zero,1
36599200 sub 2 205 206
36599201 ite 2 16599200 36599200 36598404 ; 0x101C8(~13): sub t0,t0,t1
36599600 constd 2 -4 ; 0xFFFFFFFC
36599601 add 2 208 36599600
36599602 ite 2 16599600 36599601 36598402 ; for checking address validity
36599603 write 3 20000000 36599601 205
36599604 ite 3 16599600 36599603 36596404 ; 0x101CC(~13): sw t0,-4(s0)
36600400 constd 2 -4 ; 0xFFFFFFFC
36600401 add 2 208 36600400
36600402 ite 2 16600400 36600401 36599602 ; for checking address validity
36600403 read 2 20000000 36600401
36600404 ite 2 16600400 36600403 36599201 ; 0x101D4(~15): lw t0,-4(s0)
36600800 constd 2 -8 ; 0xFFFFFFF8
36600801 add 2 203 36600800
36600802 ite 2 16600800 36600801 36600402 ; for checking address validity
36600803 read 2 20000000 36600801
36600804 ite 2 16600800 36600803 36598801 ; 0x101D8(~15): lw t1,-8(gp)
36601200 ite 2 16601200 206 36600802 ; for checking address validity
36601201 read 2 20000000 206
36601202 ite 2 16601200 36601201 36600804 ; 0x101DC(~15): lw t1,0(t1)
36601600 constd 2 1 ; 0x1
36601601 ite 2 16601600 36601600 207 ; 0x101E0(~15): addi t2,zero,1
36602000 sub 2 206 207
36602001 ite 2 16602000 36602000 36601202 ; 0x101E4(~15): sub t1,t1,t2
36602400 sub 2 206 205
36602401 ite 2 16602400 36602400 36600404 ; 0x101E8(~15): sub t0,t1,t0
36602800 constd 2 1 ; 0x1
36602801 ite 2 16602800 36602800 36602001 ; 0x101EC(~15): addi t1,zero,1
36603200 ult 1 205 206
36603201 uext 2 36603200 31
36603202 ite 2 16603200 36603201 36602401 ; 0x101F0(~15): sltu t0,t0,t1
36603600 eq 1 205 200 ; 0x101F4(~15): beq t0,zero,8
36603601 not 1 36603600
36604000 constd 2 -8 ; 0xFFFFFFF8
36604001 add 2 203 36604000
36604002 ite 2 16604000 36604001 36601200 ; for checking address validity
36604003 read 2 20000000 36604001
36604004 ite 2 16604000 36604003 36603202 ; 0x101F8(~17): lw t0,-8(gp)
36604400 constd 2 -4 ; 0xFFFFFFFC
36604401 add 2 208 36604400
36604402 ite 2 16604400 36604401 36604002 ; for checking address validity
36604403 read 2 20000000 36604401
36604404 ite 2 16604400 36604403 36602801 ; 0x101FC(~17): lw t1,-4(s0)
36604800 constd 2 4 ; 0x4
36604801 ite 2 16604800 36604800 36601601 ; 0x10200(~17): addi t2,zero,4
36605200 mul 2 206 207
36605201 ite 2 16605200 36605200 36604404 ; 0x10204(~17): mul t1,t1,t2
36605600 add 2 205 206
36605601 ite 2 16605600 36605600 36604004 ; 0x10208(~17): add t0,t0,t1
36606000 ite 2 16606000 205 36604402 ; for checking address validity
36606001 read 2 20000000 205
36606002 ite 2 16606000 36606001 36605601 ; 0x1020C(~17): lw t0,0(t0)
36606400 constd 2 -4 ; 0xFFFFFFFC
36606401 add 2 208 36606400
36606402 ite 2 16606400 36606401 36606000 ; for checking address validity
36606403 write 3 20000000 36606401 205
36606404 ite 3 16606400 36606403 36599604 ; 0x10210(~17): sw t0,-4(s0)
36606800 ite 2 16606800 200 36606002 ; 0x10214(~18): addi t0,zero,0
36607200 ite 2 16607200 205 36595200 ; 0x10218(~18): addi a0,t0,0
36608000 ite 2 16608000 208 36592402 ; 0x10220(~19): addi sp,s0,0
36608400 ite 2 16608400 202 36606402 ; for checking address validity
36608401 read 2 20000000 202
36608402 ite 2 16608400 36608401 36587200 ; 0x10224(~19): lw s0,0(sp)
36608800 constd 2 4 ; 0x4
36608801 add 2 202 36608800
36608802 ite 2 16608800 36608801 36608000 ; 0x10228(~19): addi sp,sp,4
36609200 ite 2 16609200 202 36608400 ; for checking address validity
36609201 read 2 20000000 202
36609202 ite 2 16609200 36609201 36594801 ; 0x1022C(~19): lw ra,0(sp)
36609600 constd 2 4 ; 0x4
36609601 add 2 202 36609600
36609602 ite 2 16609600 36609601 36608802 ; 0x10230(~19): addi sp,sp,4

; syscalls

40000000 constd 2 93 ; SYSCALL_EXIT
40000001 constd 2 63 ; SYSCALL_READ
40000002 constd 2 64 ; SYSCALL_WRITE
40000003 constd 2 56 ; SYSCALL_OPENAT
40000004 constd 2 214 ; SYSCALL_BRK

40000010 eq 1 217 40000000 ; $a7 == SYSCALL_EXIT
40000011 eq 1 217 40000001 ; $a7 == SYSCALL_READ
40000012 eq 1 217 40000002 ; $a7 == SYSCALL_WRITE
40000013 eq 1 217 40000003 ; $a7 == SYSCALL_OPENAT
40000014 eq 1 217 40000004 ; $a7 == SYSCALL_BRK

41000000 and 1 36578800 40000010 ; exit ecall is active
41000001 ite 1 60 40000010 41000000 ; stay in kernel mode indefinitely if exit ecall is active

42000000 and 1 36578800 40000011 ; read ecall is active
42000001 ite 2 42000000 211 36609200 ; $a1 is start address of buffer for checking address validity
42000002 ite 1 42000000 11 41000001 ; go into kernel mode if read ecall is active
42000003 ite 2 42000000 20 36607200 ; set $a0 = 0 bytes if read ecall is active
42000004 sub 2 212 210 ; $a2 - $a0
42000005 ugte 1 42000004 24 ; $a2 - $a0 >= 4 bytes
42000006 ite 2 42000005 24 42000004 ; read 4 bytes if $a2 - $a0 >= 4 bytes, or else $a2 - $a0 bytes
42000007 eq 1 42000006 22 ; increment == 2
42000008 ite 2 42000007 92 91 ; unsigned-extended 2-byte input if increment == 2, or else unsigned-extended 1-byte input
42000009 eq 1 42000006 23 ; increment == 3
42000010 ite 2 42000009 93 42000008 ; unsigned-extended 3-byte input if increment == 3
42000011 eq 1 42000006 24 ; increment == 4
42000012 ite 2 42000011 94 42000010 ; 4-byte input if increment == 4
42000013 add 2 211 210 ; $a1 + $a0
42000014 write 3 20000000 42000013 42000012 ; memory[$a1 + $a0] = input
42000015 ult 1 210 212 ; $a0 < $a2
42000016 and 1 40000011 42000015 ; $a7 == SYSCALL_READ and $a0 < $a2
42000017 and 1 60 42000016 ; read ecall is in kernel mode and not done yet
42000018 ugt 1 42000006 20 ; increment > 0
42000019 and 1 42000017 42000018 ; read ecall is in kernel mode and not done yet and increment > 0
42000020 ite 3 42000019 42000014 36606404 ; read input into memory[$a1 + $a0]
42000021 add 2 210 42000006 ; $a0 + increment
42000022 ite 2 42000017 42000021 42000003 ; set $a0 = $a0 + increment if read ecall is in kernel mode and not done yet
42000023 ite 1 42000017 11 42000002 ; stay in kernel mode if read ecall is in kernel mode and not done yet

43000000 and 1 36578800 40000012 ; write ecall is active
43000001 ite 2 43000000 211 42000001 ; $a1 is start address of buffer for checking address validity
43000002 ite 2 43000000 212 42000022 ; set $a0 = $a2 if write ecall is active

44000000 and 1 36578800 40000013 ; openat ecall is active
44000001 ite 2 44000000 211 43000001 ; $a1 is start address of buffer for checking address validity
44000002 state 2 fd-bump-pointer
44000003 init 2 44000002 21 ; initial fd-bump-pointer is 1 (file descriptor bump pointer)
44000004 inc 2 44000002
44000005 ite 2 44000000 44000004 44000002 ; fd-bump-pointer + 1 if openat ecall is active
44000006 next 2 44000002 44000005 ; increment fd-bump-pointer if openat ecall is active
44000007 ite 2 44000000 44000004 43000002 ; set $a0 = fd-bump-pointer + 1 if openat ecall is active

45000000 and 1 36578800 40000014 ; brk ecall is active
45000001 state 2 brk-bump-pointer
45000002 init 2 45000001 33 ; current program break
45000003 ulte 1 45000001 210 ; brk <= $a0
45000004 ult 1 210 202 ; $a0 < $sp
45000005 and 1 45000003 45000004 ; brk <= $a0 < $sp
45000006 and 2 210 23 ; reset all but 2 LSBs of $a0
45000007 eq 1 45000006 20 ; 2 LSBs of $a0 == 0 ($a0 is word-aligned)
45000008 and 1 45000005 45000007 ; brk <= $a0 < $sp and $a0 is word-aligned ($a0 is valid)
45000009 and 1 45000000 45000008 ; brk ecall is active and $a0 is valid
45000010 ite 2 45000009 210 45000001 ; brk = $a0 if brk ecall is active and $a0 is valid
45000011 next 2 45000001 45000010 ; set brk = $a0 if brk ecall is active and $a0 is valid
45000012 not 1 45000008 ; $a0 is invalid
45000013 and 1 45000000 45000012 ; brk ecall is active and $a0 is invalid
45000014 ite 2 45000013 45000001 44000007 ; set $a0 = brk if brk ecall is active and $a0 is invalid

46000000 next 1 60 42000023 ; updating kernel-mode flag

; control flow

56553600 next 1 16553600 10 ; ->65536[0x10000](~1)
; 65536[0x10000](~1)
56554000 next 1 16554000 16553600 ; ->65540[0x10004](~1)
; 65540[0x10004](~1)
56554400 next 1 16554400 16554000 ; ->65544[0x10008](~1)
; 65544[0x10008](~1)
56554800 next 1 16554800 16554400 ; ->65548[0x1000C](~1)
; 65548[0x1000C](~1)
56555200 next 1 16555200 16554800 ; ->65552[0x10010](~1)
; 65552[0x10010](~1)
56555600 next 1 16555600 16555200 ; ->65556[0x10014](~1)
56556000 state 1 kernel-mode-pc-flag-65556[0x10014](~1)
56556001 init 1 56556000 10 ; ecall is initially inactive
56556002 ite 1 56556000 60 16555600 ; activate ecall and keep active while in kernel mode
56556003 next 1 56556000 56556002 ; keep ecall active while in kernel mode
56556004 and 1 56556000 62 ; ecall is active but not in kernel mode anymore
56556005 next 1 16556000 56556004 ; ->65560[0x10018](~1)
; 65560[0x10018](~1)
56556400 next 1 16556400 16556000 ; ->65564[0x1001C](~1)
; 65564[0x1001C](~1)
56556800 next 1 16556800 16556400 ; ->65568[0x10020](~1)
; 65568[0x10020](~1)
56557200 next 1 16557200 16556800 ; ->65572[0x10024](~1)
; 65572[0x10024](~1)
56557600 next 1 16557600 16557200 ; ->65576[0x10028](~1)
; 65576[0x10028](~1)
56558000 next 1 16558000 16557600 ; ->65580[0x1002C](~1)
56558400 state 1 kernel-mode-pc-flag-65580[0x1002C](~1)
56558401 init 1 56558400 10 ; ecall is initially inactive
56558402 ite 1 56558400 60 16558000 ; activate ecall and keep active while in kernel mode
56558403 next 1 56558400 56558402 ; keep ecall active while in kernel mode
56558404 and 1 56558400 62 ; ecall is active but not in kernel mode anymore
56558405 next 1 16558400 56558404 ; ->65584[0x10030](~1)
; 65584[0x10030](~1)
56558800 next 1 16558800 16558400 ; ->65588[0x10034](~1)
; 65588[0x10034](~1)
56559200 next 1 16559200 16558800 ; ->65592[0x10038](~1)
; 65592[0x10038](~1)
56559600 next 1 16559600 16559200 ; ->65596[0x1003C](~1)
; 65596[0x1003C](~1)
56560000 next 1 16560000 16559600 ; ->65600[0x10040](~1)
; 65600[0x10040](~1)
56560400 next 1 16560400 16560000 ; ->65604[0x10044](~1)
; 65604[0x10044](~1)
56560800 next 1 16560800 16560400 ; ->65608[0x10048](~1)
; 65608[0x10048](~1)
56561200 next 1 16561200 16560800 ; ->65612[0x1004C](~1)
56561600 not 2 21 ; jalr 66100[0x10234](~19)
56561601 and 2 201 56561600
56561602 eq 1 56561601 36561200
56561603 and 1 16610000 56561602
56561604 next 1 16561600 56561603 ; ->65616[0x10050](~1)
; 65616[0x10050](~1)
56562000 next 1 16562000 16561600 ; ->65620[0x10054](~1)
; 65620[0x10054](~1)
56562400 next 1 16562400 16562000 ; ->65624[0x10058](~1)
; 65624[0x10058](~1)
56562800 next 1 16562800 16562400 ; ->65628[0x1005C](~1)
; 65628[0x1005C](~1)
56563200 next 1 16563200 16562800 ; ->65632[0x10060](~1)
; 65632[0x10060](~1)
56563600 next 1 16563600 16563200 ; ->65636[0x10064](~1)
; jal 65948[0x1019C](~8)
56564000 state 1 kernel-mode-pc-flag-65636[0x10064](~1)
56564001 init 1 56564000 10 ; ecall is initially inactive
56564002 ite 1 56564000 60 16563600 ; activate ecall and keep active while in kernel mode
56564003 next 1 56564000 56564002 ; keep ecall active while in kernel mode
56564004 and 1 56564000 62 ; ecall is active but not in kernel mode anymore
56564005 ite 1 56564004 11 16594800
56564006 next 1 16564000 56564005 ; ->65640[0x10068](~1)
; 65640[0x10068](~1)
56564400 next 1 16564400 16564000 ; ->65644[0x1006C](~1)
; 65644[0x1006C](~1)
56564800 next 1 16564800 16564400 ; ->65648[0x10070](~1)
; 65648[0x10070](~1)
56565200 next 1 16565200 16564800 ; ->65652[0x10074](~1)
; 65652[0x10074](~1)
56565600 next 1 16565600 16565200 ; ->65656[0x10078](~1)
; 65656[0x10078](~1)
56566000 next 1 16566000 16565600 ; ->65660[0x1007C](~1)
; 65660[0x1007C](~1)
56566400 next 1 16566400 16566000 ; ->65664[0x10080](~1)
; 65664[0x10080](~1)
56566800 next 1 16566800 16566400 ; ->65668[0x10084](~1)
56567200 state 1 kernel-mode-pc-flag-65668[0x10084](~1)
56567201 init 1 56567200 10 ; ecall is initially inactive
56567202 ite 1 56567200 60 16566800 ; activate ecall and keep active while in kernel mode
56567203 next 1 56567200 56567202 ; keep ecall active while in kernel mode
56567204 and 1 56567200 62 ; ecall is active but not in kernel mode anymore
56567205 next 1 16567200 56567204 ; ->65672[0x10088](~1)
; jal 65892[0x10164](~4)
56575200 next 1 16575200 16589200 ; ->65752[0x100D8](~1)
; 65752[0x100D8](~1)
56575600 next 1 16575600 16575200 ; ->65756[0x100DC](~1)
; 65756[0x100DC](~1)
56576000 next 1 16576000 16575600 ; ->65760[0x100E0](~1)
; 65760[0x100E0](~1)
56576400 next 1 16576400 16576000 ; ->65764[0x100E4](~1)
; 65764[0x100E4](~1)
56576800 next 1 16576800 16576400 ; ->65768[0x100E8](~1)
; 65768[0x100E8](~1)
56577200 next 1 16577200 16576800 ; ->65772[0x100EC](~1)
; 65772[0x100EC](~1)
56577600 next 1 16577600 16577200 ; ->65776[0x100F0](~1)
; 65776[0x100F0](~1)
56578000 next 1 16578000 16577600 ; ->65780[0x100F4](~1)
; 65780[0x100F4](~1)
56578400 next 1 16578400 16578000 ; ->65784[0x100F8](~1)
; 65784[0x100F8](~1)
56578800 next 1 16578800 16578400 ; ->65788[0x100FC](~1)
56579200 state 1 kernel-mode-pc-flag-65788[0x100FC](~1)
56579201 init 1 56579200 10 ; ecall is initially inactive
56579202 ite 1 56579200 60 16578800 ; activate ecall and keep active while in kernel mode
56579203 next 1 56579200 56579202 ; keep ecall active while in kernel mode
56579204 and 1 56579200 62 ; ecall is active but not in kernel mode anymore
56579205 next 1 16579200 56579204 ; ->65792[0x10100](~1)
56579600 and 1 16579200 36579201 ; beq 65792[0x10100](~1)
56579601 next 1 16579600 56579600 ; ->65796[0x10104](~1)
56580000 and 1 16579600 36579601 ; beq 65796[0x10104](~1)
56580001 and 1 16579200 36579200 ; beq 65792[0x10100](~1)
56580002 ite 1 56580001 11 56580000
56580003 next 1 16580000 56580002 ; ->65800[0x10108](~1)
56580400 and 1 16580000 36580001 ; beq 65800[0x10108](~1)
56580401 next 1 16580400 56580400 ; ->65804[0x1010C](~1)
; 65804[0x1010C](~1)
56580800 next 1 16580800 16580400 ; ->65808[0x10110](~1)
56581200 and 1 16580800 36580801 ; beq 65808[0x10110](~1)
56581201 and 1 16580000 36580000 ; beq 65800[0x10108](~1)
56581202 ite 1 56581201 11 56581200
56581203 and 1 16579600 36579600 ; beq 65796[0x10104](~1)
56581204 ite 1 56581203 11 56581202
56581205 next 1 16581200 56581204 ; ->65812[0x10114](~1)
; 65812[0x10114](~1)
56581600 next 1 16581600 16581200 ; ->65816[0x10118](~1)
; 65816[0x10118](~1)
56582000 and 1 16580800 36580800 ; beq 65808[0x10110](~1)
56582001 ite 1 56582000 11 16581600
56582002 next 1 16582000 56582001 ; ->65820[0x1011C](~1)
; jal 65612[0x1004C](~1)
56585600 next 1 16585600 16561200 ; ->65856[0x10140](~4)
; 65856[0x10140](~4)
56586000 next 1 16586000 16585600 ; ->65860[0x10144](~4)
; 65860[0x10144](~4)
56586400 next 1 16586400 16586000 ; ->65864[0x10148](~4)
; 65864[0x10148](~4)
56586800 next 1 16586800 16586400 ; ->65868[0x1014C](~4)
; 65868[0x1014C](~4)
56587200 next 1 16587200 16586800 ; ->65872[0x10150](~4)
; 65872[0x10150](~4)
56587600 next 1 16587600 16587200 ; ->65876[0x10154](~4)
; 65876[0x10154](~4)
56588000 next 1 16588000 16587600 ; ->65880[0x10158](~4)
; 65880[0x10158](~4)
56588400 next 1 16588400 16588000 ; ->65884[0x1015C](~4)
; 65884[0x1015C](~4)
56588800 next 1 16588800 16588400 ; ->65888[0x10160](~4)
; 65888[0x10160](~4)
56589200 next 1 16589200 16588800 ; ->65892[0x10164](~4)
56589600 not 2 21 ; jalr 65820[0x1011C](~1)
56589601 and 2 201 56589600
56589602 eq 1 56589601 36589200
56589603 and 1 16582000 56589602
56589604 next 1 16589600 56589603 ; ->65896[0x10168](~4)
; 65896[0x10168](~4)
56590000 next 1 16590000 16589600 ; ->65900[0x1016C](~4)
; 65900[0x1016C](~4)
56590400 next 1 16590400 16590000 ; ->65904[0x10170](~4)
; 65904[0x10170](~4)
56590800 next 1 16590800 16590400 ; ->65908[0x10174](~6)
; 65908[0x10174](~6)
56591200 next 1 16591200 16590800 ; ->65912[0x10178](~6)
; 65912[0x10178](~6)
56591600 next 1 16591600 16591200 ; ->65916[0x1017C](~6)
; 65916[0x1017C](~6)
56592000 next 1 16592000 16591600 ; ->65920[0x10180](~8)
; 65920[0x10180](~8)
56592400 next 1 16592400 16592000 ; ->65924[0x10184](~8)
; 65924[0x10184](~8)
56592800 next 1 16592800 16592400 ; ->65928[0x10188](~8)
; 65928[0x10188](~8)
56593200 next 1 16593200 16592800 ; ->65932[0x1018C](~8)
; 65932[0x1018C](~8)
56593600 next 1 16593600 16593200 ; ->65936[0x10190](~8)
; 65936[0x10190](~8)
56594000 next 1 16594000 16593600 ; ->65940[0x10194](~8)
; 65940[0x10194](~8)
56594400 next 1 16594400 16594000 ; ->65944[0x10198](~8)
; 65944[0x10198](~8)
56594800 next 1 16594800 16594400 ; ->65948[0x1019C](~8)
56595200 not 2 21 ; jalr 65672[0x10088](~1)
56595201 and 2 201 56595200
56595202 eq 1 56595201 36594800
56595203 and 1 16567200 56595202
56595204 next 1 16595200 56595203 ; ->65952[0x101A0](~8)
; 65952[0x101A0](~8)
56595600 next 1 16595600 16595200 ; ->65956[0x101A4](~10)
; 65956[0x101A4](~10)
56596000 next 1 16596000 16595600 ; ->65960[0x101A8](~10)
; 65960[0x101A8](~10)
56596400 next 1 16596400 16596000 ; ->65964[0x101AC](~10)
; jal 66000[0x101D0](~15)
; 65964[0x101AC](~10)
56596800 ite 1 16596400 11 16600000
56596801 next 1 16596800 56596800 ; ->65968[0x101B0](~12)
; 65968[0x101B0](~12)
56597200 next 1 16597200 16596800 ; ->65972[0x101B4](~12)
; 65972[0x101B4](~12)
56597600 next 1 16597600 16597200 ; ->65976[0x101B8](~12)
; 65976[0x101B8](~12)
56598000 next 1 16598000 16597600 ; ->65980[0x101BC](~12)
56598400 and 1 16598000 36598001 ; beq 65980[0x101BC](~12)
56598401 next 1 16598400 56598400 ; ->65984[0x101C0](~13)
; 65984[0x101C0](~13)
56598800 next 1 16598800 16598400 ; ->65988[0x101C4](~13)
; 65988[0x101C4](~13)
56599200 next 1 16599200 16598800 ; ->65992[0x101C8](~13)
; 65992[0x101C8](~13)
56599600 next 1 16599600 16599200 ; ->65996[0x101CC](~13)
; 65996[0x101CC](~13)
56600000 next 1 16600000 16599600 ; ->66000[0x101D0](~15)
56600400 and 1 16598000 36598000 ; beq 65980[0x101BC](~12)
56600401 next 1 16600400 56600400 ; ->66004[0x101D4](~15)
; 66004[0x101D4](~15)
56600800 next 1 16600800 16600400 ; ->66008[0x101D8](~15)
; 66008[0x101D8](~15)
56601200 next 1 16601200 16600800 ; ->66012[0x101DC](~15)
; 66012[0x101DC](~15)
56601600 next 1 16601600 16601200 ; ->66016[0x101E0](~15)
; 66016[0x101E0](~15)
56602000 next 1 16602000 16601600 ; ->66020[0x101E4](~15)
; 66020[0x101E4](~15)
56602400 next 1 16602400 16602000 ; ->66024[0x101E8](~15)
; 66024[0x101E8](~15)
56602800 next 1 16602800 16602400 ; ->66028[0x101EC](~15)
; 66028[0x101EC](~15)
56603200 next 1 16603200 16602800 ; ->66032[0x101F0](~15)
; 66032[0x101F0](~15)
56603600 next 1 16603600 16603200 ; ->66036[0x101F4](~15)
56604000 and 1 16603600 36603601 ; beq 66036[0x101F4](~15)
56604001 next 1 16604000 56604000 ; ->66040[0x101F8](~17)
; 66040[0x101F8](~17)
56604400 next 1 16604400 16604000 ; ->66044[0x101FC](~17)
; 66044[0x101FC](~17)
56604800 next 1 16604800 16604400 ; ->66048[0x10200](~17)
; 66048[0x10200](~17)
56605200 next 1 16605200 16604800 ; ->66052[0x10204](~17)
; 66052[0x10204](~17)
56605600 next 1 16605600 16605200 ; ->66056[0x10208](~17)
; 66056[0x10208](~17)
56606000 next 1 16606000 16605600 ; ->66060[0x1020C](~17)
; 66060[0x1020C](~17)
56606400 next 1 16606400 16606000 ; ->66064[0x10210](~17)
; 66064[0x10210](~17)
56606800 and 1 16603600 36603600 ; beq 66036[0x101F4](~15)
56606801 ite 1 56606800 11 16606400
56606802 next 1 16606800 56606801 ; ->66068[0x10214](~18)
; 66068[0x10214](~18)
56607200 next 1 16607200 16606800 ; ->66072[0x10218](~18)
; 66072[0x10218](~18)
56607600 next 1 16607600 16607200 ; ->66076[0x1021C](~18)
; jal 66076[0x1021C](~18)
56608000 next 1 16608000 16607600 ; ->66080[0x10220](~19)
; 66080[0x10220](~19)
56608400 next 1 16608400 16608000 ; ->66084[0x10224](~19)
; 66084[0x10224](~19)
56608800 next 1 16608800 16608400 ; ->66088[0x10228](~19)
; 66088[0x10228](~19)
56609200 next 1 16609200 16608800 ; ->66092[0x1022C](~19)
; 66092[0x1022C](~19)
56609600 next 1 16609600 16609200 ; ->66096[0x10230](~19)
; 66096[0x10230](~19)
56610000 next 1 16610000 16609600 ; ->66100[0x10234](~19)

; updating registers

60000001 next 2 201 36609202 ra ; register $1
60000002 next 2 202 36609602 sp ; register $2
60000003 next 2 203 36554400 gp ; register $3
60000004 next 2 204 204 tp ; register $4
60000005 next 2 205 36606800 t0 ; register $5
60000006 next 2 206 36605201 t1 ; register $6
60000007 next 2 207 36604801 t2 ; register $7
60000008 next 2 208 36608402 s0 ; register $8
60000009 next 2 209 209 s1 ; register $9
60000010 next 2 210 45000014 a0 ; register $10
60000011 next 2 211 36564802 a1 ; register $11
60000012 next 2 212 36565602 a2 ; register $12
60000013 next 2 213 213 a3 ; register $13
60000014 next 2 214 214 a4 ; register $14
60000015 next 2 215 215 a5 ; register $15
60000016 next 2 216 216 a6 ; register $16
60000017 next 2 217 36578401 a7 ; register $17
60000018 next 2 218 218 s2 ; register $18
60000019 next 2 219 219 s3 ; register $19
60000020 next 2 220 220 s4 ; register $20
60000021 next 2 221 221 s5 ; register $21
60000022 next 2 222 222 s6 ; register $22
60000023 next 2 223 223 s7 ; register $23
60000024 next 2 224 224 s8 ; register $24
60000025 next 2 225 225 s9 ; register $25
60000026 next 2 226 226 s10 ; register $26
60000027 next 2 227 227 s11 ; register $27
60000028 next 2 228 228 t3 ; register $28
60000029 next 2 229 229 t4 ; register $29
60000030 next 2 230 230 t5 ; register $30
60000031 next 2 231 231 t6 ; register $31

; updating 32-bit physical memory

70000000 next 3 20000000 42000020 physical-memory

; checking syscall id

80000000 not 1 40000010 ; $a7 != SYSCALL_EXIT
80000001 not 1 40000011 ; $a7 != SYSCALL_READ
80000002 not 1 40000012 ; $a7 != SYSCALL_WRITE
80000003 not 1 40000013 ; $a7 != SYSCALL_OPENAT
80000004 not 1 40000014 ; $a7 != SYSCALL_BRK
80000005 and 1 80000000 80000001 ; ... and $a7 != SYSCALL_READ
80000006 and 1 80000005 80000002 ; ... and $a7 != SYSCALL_WRITE
80000007 and 1 80000006 80000003 ; ... and $a7 != SYSCALL_OPENAT
80000008 and 1 80000007 80000004 ; ... and $a7 != SYSCALL_BRK

80000009 and 1 36578800 80000008 ; ecall is active for invalid syscall id
80000010 bad 80000009 b0 ; invalid syscall id

; checking exit code

80000011 neq 1 210 20 ; $a0 != zero exit code
80000012 and 1 41000000 80000011 ; exit ecall is active with non-zero exit code
80000013 bad 80000012 b1 ; non-zero exit code

; checking division and remainder by zero

80000014 eq 1 21 20
80000015 bad 80000014 b2 ; division by zero

80000016 eq 1 36576800 20
80000017 bad 80000016 b3 ; remainder by zero

; checking address validity

; is start address of memory access word-aligned?

80000018 and 2 44000001 23 ; reset all but 2 LSBs of address
80000019 neq 1 80000018 20 ; 2 LSBs of address != 0 (address is not word-aligned)
80000020 bad 80000019 b4 ; word-unaligned memory access

; checking segmentation faults

; is start address of memory access in a valid segment?

80000021 ult 1 44000001 30 ; address < start of data segment
80000022 bad 80000021 b5 ; memory access below data segment
80000023 ugte 1 44000001 31 ; address >= end of data segment
80000024 ult 1 44000001 32 ; address < start of heap segment
80000025 and 1 80000023 80000024
80000026 bad 80000025 b6 ; memory access in between data and heap segments
80000027 ugte 1 44000001 45000001 ; address >= current end of heap segment
80000028 ult 1 44000001 202 ; address < current start of stack segment
80000029 and 1 80000027 80000028
80000030 bad 80000029 b7 ; memory access in between current heap and stack segments
80000031 ugte 1 44000001 34 ; address >= allowed end of heap segment
80000032 ult 1 44000001 45000001 ; address < current end of heap segment
80000033 and 1 80000031 80000032
80000034 bad 80000033 b8 ; memory access in between allowed and current end of heap segment
80000035 ugte 1 44000001 202 ; address >= current start of stack segment
80000036 ult 1 44000001 35 ; address < allowed start of stack segment
80000037 and 1 80000035 80000036
80000038 bad 80000037 b9 ; memory access in between current and allowed start of stack segment
80000039 ugt 1 44000001 50 ; address > highest address in 32-bit virtual address space (4GB)
80000040 bad 80000039 b10 ; memory access above stack segment

; end of BTOR2 s.btor2
